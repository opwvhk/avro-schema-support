/** Dangling documentation 1 */
/**
 * A simple test case.
 */
@namespace("12 monkeys")
/** Misplaced documentation 1 */
protocol Many.Mistakes {
	@namespace("hashes")
	fixed MD5(16);
	enum Letters { A, B, C } = A;

	@foo.bar({"key": 3})
	record MyData {
		Letters @order("ascending") one_letter;
		Letters @order("descending") another_letter;
		Letters @order("ignore") different_letter;
	}

	record Unusual {
		@logicalType("date")
		int can_use_primitive_date;
		@logicalType("time-millis")
		int can_use_primitive_time_ms;
		@logicalType("timestamp-millis")
		long can_use_primitive_timestamp_ms;
		@logicalType("local-timestamp-millis")
		long can_use_primitive_local_timestamp_ms;
		@logicalType("uuid")
		string can_use_primitive_uuid;
		@logicalType("decimal")
		@precision(6)
		@scale(2)
		bytes can_use_decimal_type;
	}

	null firstCorrectOnewayMessage() oneway;
	void secondCorrectOnewayMessage() oneway;

	/** Dangling documentation 2 */
	/** Documentation */
	@correct(1)
	/** Misplaced documentation 2 */
	enum Status { ON, OFF }
	@correct(1)
	/** Misplaced documentation 3 */
	/** Misplaced documentation 4 */
	fixed Status(1);

	/** Dangling documentation 3 */
	/** Documentation */
	@namespace(12)
	/** Misplaced documentation 5 */
	/** Misplaced documentation 6 */
	fixed
		/** Misplaced documentation 7 */
		foo.bar
		/** Misplaced documentation 8 */
		(
		/** Misplaced documentation 9 */
		16
		/** Misplaced documentation 10 */
		)/** Misplaced documentation 11 */;

	/** Dangling documentation 4 */
	/** Documentation */
	@aliases(["even-more-wrong"])
	/** Misplaced documentation 12 */
	enum also-wrong { A, B } = C;
	record my-data {
		@namespace("unused")
		Letters @logicalType("character") one-letter;

		/** Default documentation */
		@namespace("on.type")
		@aliases(["for_type"])
		/** Misplaced documentation 13 */
		@order("ignore")
		@logicalType(23)
		long /** Documentation */ @order(34) /** Misplaced documentation 14 */ notLogic1a, notLogic1b;
		@logicalType("date")
		string @order("wrong") notLogic2;
		@logicalType("time-millis")
		string /** Dangling documentation 5 */ /** Documentation */ @aliases(45) /** Misplaced documentation 15 */ /** Misplaced documentation 16 */ notLogic3;
		@logicalType("timestamp-millis")
		string @aliases([56, "invites-failure"]) notLogic4;
		@logicalType("local-timestamp-millis")
		int notLogic5;
		@logicalType("decimal")
		bytes notLogic6;
		@logicalType("decimal")
		@precision(true)
		bytes notLogic7;
		@logicalType("decimal")
		@precision(-1)
		bytes notLogic8;
		@logicalType("decimal")
		@precision(4294967296)
		bytes notLogic9;
		@logicalType("decimal")
		@precision(6)
		@scale(false)
		bytes notLogic10;
		@logicalType("decimal")
		@precision(6)
		@scale(-2)
		bytes notLogic11;
		@logicalType("decimal")
		@precision(6)
		@scale(8)
		long notLogic12;
		@logicalType("decimal")
		@precision(6)
		@scale(2)
		long notLogic13;
		@logicalType("decimal")
		@precision(40)
		@scale(0)
		hashes.MD5 notLogic14;
	}
	/** Dangling documentation 6 */
	/** Documentation */
	@aliases(67)
	/** Misplaced documentation 17 */
	@aliases([78, "her-failure"])
	/** Misplaced documentation 18 */
	/** Misplaced documentation 19 */
	error his-failure {}

	/** Dangling documentation 7 */
	/** Documentation */
	Whatever
		do-stuff(
			/** Default documentation */
			Something
				/** Dangling documentation 8 */
				/** Documentation */
				one) throws SomeError, hashes.MD5;

	string onewayMessagesMustUseVoid() oneway;
}

{
	"$id": "https://github.com/opwvhk/avro-schema-support/blob/master/src/main/resources/schemas/avro-schema.schema.json",
	"$schema": "http://json-schema.org/draft-07/schema#",
	"title": "avro-schema",
	"description": "JSON Schema for an Apache Avro schema, version 1.10.1",
	"$ref": "#/definitions/schema",
	"definitions": {
		"schema": {
			"description": "An Avro schema; either a schema name, anonymous (primitive type, annotated primitive type, array, map, union) or named (fixed, enum, record/error)",
			"oneOf": [
				{ "$ref": "#/definitions/namedTypeReference" },
				{ "$ref": "#/definitions/primitiveType" },
				{ "$ref": "#/definitions/annotatedPrimitiveType" },
				{ "$ref": "#/definitions/array" },
				{ "$ref": "#/definitions/map" },
				{ "$ref": "#/definitions/union" },
				{ "$ref": "#/definitions/fixed" },
				{ "$ref": "#/definitions/enum" },
				{ "$ref": "#/definitions/record" }
			]
		},
		"namedTypeReference": {
			"description": "A reference to a named type",
			"$ref": "#/definitions/nameOrNamespace"
		},
		"primitiveType": {
			"description": "A primitive type",
			"enum": [ "null", "boolean", "int", "long", "float", "double", "string", "bytes" ]
		},
		"annotatedPrimitiveType": {
			"description": "A primitive type with annotations (e.g. a logical type)",
			"type": "object",
			"required": [ "type" ],
			"properties": {
				"type": { "$ref": "#/definitions/primitiveType" },
				"logicalType": {
					"oneOf": [
						{ "$ref": "#/definitions/stdLogicalTypes" },
						{ "type": "string", "not": { "$ref": "#/definitions/stdLogicalTypes" } }
					]
				},
				"decimal": { "type": "integer", "minimum": 1, "maximum": 2147483647 },
				"scale": { "type": "integer", "minimum": 0, "maximum": 2147483647 }
			}
		},
		"array": {
			"description": "An array",
			"type": "object",
			"required": [ "type", "items" ],
			"properties": {
				"type": { "enum": [ "array" ] },
				"items": { "$ref": "#/definitions/schema" },
				"logicalType": { "type": "string" }
			}
		},
		"map": {
			"description": "A map (keys are always strings)",
			"type": "object",
			"required": [ "type", "values" ],
			"properties": {
				"type": { "enum": [ "map" ] },
				"values": { "$ref": "#/definitions/schema" },
				"logicalType": { "type": "string" }
			}
		},
		"union": {
			"description": "A union of schemas",
			"type": "array",
			"uniqueItems": true,
			"items": {
				"allOf": [
					{ "$ref": "#/definitions/schema" },
					{ "not": { "$ref": "#/definitions/union" } }
				]
			}
		},
		"fixed": {
			"description": "A fixed length schema",
			"type": "object",
			"required": [ "type", "name", "size" ],
			"properties": {
				"type": { "enum": [ "fixed" ] },
				"name": { "$ref": "#/definitions/nameOrNamespace" },
				"namespace": { "$ref": "#/definitions/nameOrNamespace" },
				"size": { "type": "integer", "minimum": 0 },
				"aliases": { "$ref": "#/definitions/aliases" },
				"logicalType": { "type": "string" },
				"decimal": { "type": "integer", "minimum": 1, "maximum": 2147483647 },
				"scale": { "type": "integer", "minimum": 0, "maximum": 2147483647 }
			}
		},
		"enum": {
			"description": "An enum",
			"type": "object",
			"required": [ "type", "name", "symbols" ],
			"properties": {
				"type": { "enum": [ "enum" ] },
				"name": { "$ref": "#/definitions/nameOrNamespace" },
				"namespace": { "$ref": "#/definitions/nameOrNamespace" },
				"aliases": { "$ref": "#/definitions/aliases" },
				"doc": { "type": "string" },
				"symbols": {
					"type": "array",
					"items": { "$ref": "#/definitions/name" },
					"minItems": 1,
					"uniqueItems": true
				},
				"default": {
					"description": "when reading an unknown symbol, use this symbol instead",
					"type": "string"
				}
			}
		},
		"record": {
			"description": "A record or error",
			"type": "object",
			"required": [ "type", "name", "fields" ],
			"properties": {
				"type": { "enum": [ "record", "error" ] },
				"name": { "$ref": "#/definitions/nameOrNamespace" },
				"namespace": { "$ref": "#/definitions/nameOrNamespace" },
				"doc": { "type": "string" },
				"aliases": { "$ref": "#/definitions/aliases" },
				"fields": {
					"type": "array",
					"items": { "$ref": "#/definitions/field" }
				}
			}
		},
		"field": {
			"description": "A field in a record",
			"type": "object",
			"required": [ "name", "type" ],
			"properties": {
				"name": { "$ref": "#/definitions/nameOrNamespace" },
				"doc": { "type": "string" },
				"type": { "$ref": "#/definitions/schema" },
				"default": {
					"description": "default value, a JSON value that can be mapped to the field schema"
				},
				"order": {
					"enum": [ "ascending", "descending", "ignore" ]
				},
				"aliases": { "$ref": "#/definitions/aliases" }
			}
		},
		"aliases": {
			"description": "Aliases of a schema, field, ... (potentially invalid). Can be used to fix/change/evolve names, but not to relocate elements.",
			"type": "array",
			"minItems": 1,
			"uniqueItems": true,
			"items": { "type": "string" }
		},
		"name": {
			"description": "a name is an identifier, but not equal to a primitive type",
			"type": "string",
			"pattern": "^[A-Za-z_][A-Za-z0-9_]*$",
			"not": { "$ref": "#/definitions/primitiveType" }
		},
		"nameOrNamespace": {
			"description": "a nameOrNamespace is a dot separated sequence of one or more identifiers, but not equal to a primitive type",
			"type": "string",
			"pattern": "^[A-Za-z_][A-Za-z0-9_]*(\\.[A-Za-z_][A-Za-z0-9_]*)*$",
			"not": { "$ref": "#/definitions/primitiveType" }
		},
		"stdLogicalTypes": {
			"enum": [
				"decimal", "uuid", "date", "time-millis", "time-micros",
				"timestamp-millis", "timestamp-micros", "local-timestamp-millis", "local-timestamp-micros"
			]
		}
	}
}

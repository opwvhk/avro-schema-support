{
	"$id": "https://raw.githubusercontent.com/opwvhk/avro-schema-support/master/src/main/resources/schemas/avro-protocol.schema.json",
	"$schema": "http://json-schema.org/draft-07/schema#",
	"title": "avro-protocol",
	"description": "JSON Schema for an Apache Avro protocol, version 1.11.3",
	"$comment": "The current structure, using an allOf+if/then combination and copying the definitions from the schema JSON-schema is needed due to two bugs: https://youtrack.jetbrains.com/issue/WEB-64286/JSON-Schema-completion-not-evaluating-if-and-pattern-conditionals-correctly and https://youtrack.jetbrains.com/issue/WEB-23543",
	"$ref": "#/definitions/protocol",
	"definitions": {
		"schema": {
			"description": "An Avro schema; either a schema name, anonymous (primitive type, annotated primitive type, array, map, union) or named (fixed, enum, record/error)",
			"anyOf": [
				{
					"type": "string",
					"oneOf": [
						{"$ref": "#/definitions/fullName"},
						{"$ref": "#/definitions/primitiveType"}
					]
				},
				{
					"type": "object",
					"required": ["type"],
					"properties": {
						"type": {
							"description": "The type of the schema; can be a record/error, enum, fixed, array, map or primitive type",
							"enum": [
								"null", "boolean", "int", "long", "float", "double", "string", "bytes", "array", "map",
								"fixed", "enum", "record", "error"
							],
							"x-intellij-enum-metadata": {
								"null": "no value; used in unions to make values optional",
								"boolean": "a binary value",
								"int": "32-bit signed integer",
								"long": "64-bit signed integer",
								"float": "single precision (32-bit) IEEE 754 floating-point number",
								"double": "double precision (64-bit) IEEE 754 floating-point number",
								"string": "unicode character sequence",
								"bytes": "sequence of 8-bit unsigned bytes",
								"array": "an array of items",
								"map": "a map of values by string keys",
								"fixed": "a fixed-length named type",
								"enum": "a named type with explicit values (symbols)",
								"record": "a named type with fields",
								"error": "a named type with fields, thrown my protocol messages"
							}
						},
						"logicalType": {
							"description": "If a standard type doesn't suit, you can specify a logical type. This is a logical representation of an underlying value, like a timestamp is the number of milliseconds since 1970-01-01T00:00:00.000Z",
							"oneOf": [
								{"$ref": "#/definitions/stdLogicalTypes"},
								{
									"type": "string",
									"not": {"$ref": "#/definitions/stdLogicalTypes"}
								}
							]
						}
					},
					"allOf": [
						{"$ref": "#/definitions/arrayItems"},
						{"$ref": "#/definitions/mapValues"},
						{"$ref": "#/definitions/typesWithName"},
						{"$ref": "#/definitions/fixedSize"},
						{"$ref": "#/definitions/enumSymbols"},
						{"$ref": "#/definitions/recordFields"},
						{"$ref": "#/definitions/logicalTypeValidation"}
					]
				},
				{
					"type": "array",
					"$ref": "#/definitions/union"
				}
			]
		},
		"fullName": {
			"description": "a full name is a dot separated sequence of one or more simple names (letters, digits and underscores, but doesn't start with a digit), but not equal to a primitive type",
			"type": "string",
			"pattern": "^[A-Za-z_][A-Za-z0-9_]*([.][A-Za-z_][A-Za-z0-9_]*)*$",
			"not": {"$ref": "#/definitions/primitiveType"}
		},
		"simpleName": {
			"description": "a simple name is an identifier (letters, digits and underscores, but doesn't start with a digit), but not equal to a primitive type",
			"type": "string",
			"pattern": "^[A-Za-z_][A-Za-z0-9_]*$",
			"not": {"$ref": "#/definitions/primitiveType"}
		},
		"primitiveType": {
			"description": "A primitive type",
			"type": "string",
			"enum": ["null", "boolean", "int", "long", "float", "double", "string", "bytes"],
			"x-intellij-enum-metadata": {
				"null": "no value; used in unions to make values optional",
				"boolean": "a binary value",
				"int": "32-bit signed integer",
				"long": "64-bit signed integer",
				"float": "single precision (32-bit) IEEE 754 floating-point number",
				"double": "double precision (64-bit) IEEE 754 floating-point number",
				"string": "unicode character sequence",
				"bytes": "sequence of 8-bit unsigned bytes"
			}
		},
		"arrayItems": {
			"description": "An array must have a schema for the items",
			"if": {"properties": {"type": {"const": "array"}}},
			"then": {
				"required": ["items"],
				"properties": {
					"items": {
						"description": "The type of the items of the array.",
						"$ref": "#/definitions/schema"
					}
				}
			}
		},
		"mapValues": {
			"description": "A map must have with string keys and a schema for the values",
			"if": {"properties": {"type": {"const": "map"}}},
			"then": {
				"required": ["values"],
				"properties": {
					"values": {
						"description": "The type of the values in the map (keys are always strings).",
						"$ref": "#/definitions/schema"
					}
				}
			}
		},
		"typesWithName": {
			"description": "Named types must have a name, and can have documentation, a separate namespace, and aliases",
			"if": {"properties": {"type": {"enum": ["fixed", "enum", "record", "error"]}}},
			"then": {
				"required": ["name"],
				"properties": {
					"name": {
						"$ref": "#/definitions/fullName",
						"description": "The name of the type. Can be a simple name (with separate namespace) or a full name."
					},
					"namespace": {
						"$ref": "#/definitions/fullName",
						"description": "The namespace of the type; ignored if the name is not a simple name."
					},
					"aliases": {"$ref": "#/definitions/aliases"},
					"doc": {
						"type": "string",
						"description": "Documentation for the schema."
					}
				}
			}
		},
		"fixedSize": {
			"description": "A fixed size type must have a size",
			"if": {"properties": {"type": {"const": "fixed"}}},
			"then": {
				"required": ["size"],
				"properties": {
					"size": {
						"type": "integer",
						"minimum": 0,
						"description": "The size (in bytes) of this type."
					}
				}
			}
		},
		"enumSymbols": {
			"description": "An enum must have a list of possible symbols, one of which can be the default",
			"if": {"properties": {"type": {"const": "enum"}}},
			"then": {
				"required": ["symbols"],
				"properties": {
					"symbols": {
						"description": "The symbols this enum has.",
						"type": "array",
						"items": {"$ref": "#/definitions/simpleName"},
						"minItems": 1,
						"uniqueItems": true
					},
					"default": {
						"description": "The enum value to use during schema resolution for unknown/unmatched values of the write schema",
						"$ref": "#/definitions/simpleName"
					}
				}
			}
		},
		"recordFields": {
			"description": "A record or error must have a list of fields",
			"if": {"properties": {"type": {"enum": ["record", "error"]}}},
			"then": {
				"required": ["fields"],
				"properties": {
					"fields": {
						"description": "The fields of the record/error.",
						"type": "array",
						"items": {"$ref": "#/definitions/field"}
					}
				}
			}
		},
		"logicalTypeValidation": {
			"description": "All (standard) logical types must have a correct underlying type",
			"allOf": [
				{
					"if": {
						"required": ["logicalType"],
						"properties": {"logicalType": {"const": "decimal"}}
					},
					"then": {
						"required": ["precision"],
						"properties": {
							"type": {"enum": ["bytes", "fixed"]},
							"precision": {
								"type": "integer",
								"minimum": 1,
								"maximum": 2147483647,
								"description": "The number of digits in a decimal logical type."
							},
							"scale": {
								"type": "integer",
								"minimum": 0,
								"maximum": 2147483647,
								"description": "The number of decimal places in a decimal logical type."
							}
						}
					}
				},
				{
					"if": {
						"required": ["logicalType"],
						"properties": {"logicalType": {"const": "uuid"}}
					},
					"then": {
						"oneOf": [
							{"properties": {"type": {"const": "string"}}},
							{
								"properties": {
									"type": {"const": "fixed"},
									"size": {"const": 16}
								}
							}
						]
					}
				},
				{
					"if": {
						"required": ["logicalType"],
						"properties": {"logicalType": {"enum": ["date", "time-millis"]}}
					},
					"then": {"properties": {"type": {"const": "int"}}}
				},
				{
					"if": {
						"required": ["logicalType"],
						"properties": {
							"logicalType": {
								"enum": [
									"time-micros", "timestamp-millis", "timestamp-micros", "local-timestamp-millis",
									"local-timestamp-micros"
								]
							}
						}
					},
					"then": {"properties": {"type": {"const": "long"}}}
				},
				{
					"if": {
						"required": ["logicalType"],
						"properties": {"logicalType": {"const": "duration"}}
					},
					"then": {
						"properties": {
							"type": {"const": "fixed"},
							"size": {"const": 12}
						}
					}
				}
			]
		},
		"union": {
			"description": "A union of schemas",
			"type": "array",
			"uniqueItems": true,
			"items": {
				"allOf": [
					{"$ref": "#/definitions/schema"},
					{"not": {"$ref": "#/definitions/union"}}
				]
			}
		},
		"field": {
			"description": "A field in a record",
			"type": "object",
			"required": ["name", "type"],
			"properties": {
				"name": {"$ref": "#/definitions/simpleName"},
				"aliases": {"$ref": "#/definitions/aliases"},
				"doc": {"type": "string"},
				"type": {"$ref": "#/definitions/schema"},
				"default": {"description": "default value, a JSON value that can be mapped to the field schema"},
				"order": {"enum": ["ascending", "descending", "ignore"]}
			}
		},
		"aliases": {
			"description": "Aliases of a schema, field, ... (potentially invalid). Can be used to fix/change/evolve names, but not to relocate elements.",
			"type": "array",
			"minItems": 1,
			"uniqueItems": true,
			"items": {"type": "string"}
		},
		"stdLogicalTypes": {
			"description": "Standard logical types",
			"type": "string",
			"enum": [
				"decimal", "uuid", "date", "time-millis", "time-micros", "timestamp-millis", "timestamp-micros",
				"local-timestamp-millis", "local-timestamp-micros", "duration"
			],
			"x-intellij-enum-metadata": {
				"decimal": "arbitrary-precision signed decimal number of the form unscaled × 10^(-scale); annotates fixed or bytes types",
				"uuid": "a universally unique identifier (UUID); annotates a string, formatted as per RFC-4122",
				"date": "a date without time zone; annotates an int type, with the number of days from 1 January 1970 (ISO calendar)",
				"time-millis": "a time of day, with no time zone or date; annotates an int type, with the number of milliseconds since midnight, 00:00:00.000",
				"time-micros": "a time of day, with no time zone or date; annotates a long type, with the number of microseconds since midnight, 00:00:00.000000",
				"timestamp-millis": "an instant on the global timeline; annotates a long type, with the number of milliseconds since 1970-01-01T00:00:00.000Z",
				"timestamp-micros": "an instant on the global timeline; annotates a long type, with the number of microseconds since 1970-01-01T00:00:00.000000Z",
				"local-timestamp-millis": "a timestamp in a local timezone (undefined); annotates a long type, with the number of milliseconds since 1970-01-01T00:00:00.000",
				"local-timestamp-micros": "a timestamp in a local timezone (undefined); annotates a long type, with the number of microseconds since 1970-01-01T00:00:00.000000",
				"duration": "an amount of time defined by a number of months, days and milliseconds; annotates a fixed type with size 12, that stores 3 unsigned, little-endian unsigned integers"
			}
		},
		"protocol": {
			"description": "An Avro protocol definition",
			"type": "object",
			"required": ["protocol"],
			"properties": {
				"protocol": {"$ref": "#/definitions/fullName"},
				"namespace": {"$ref": "#/definitions/fullName"},
				"doc": {"type": "string"},
				"types": {
					"type": "array",
					"uniqueItems": true,
					"items": {
						"allOf": [
							{"properties": {"type": {"enum": ["fixed", "enum", "record", "error"]}}},
							{"$ref": "#/definitions/schema"}
						]
					}
				},
				"messages": {
					"type": "object",
					"propertyNames": {
						"pattern": "^[A-Za-z_][A-Za-z0-9_]*$",
						"uniqueItems": true
					},
					"patternProperties": {
						"^.*$": {"$ref": "#/definitions/message"}
					}
				}
			}
		},
		"message": {
			"description": "A protocol message description",
			"type": "object",
			"required": ["request", "response"],
			"properties": {
				"doc": {"type": "string"},
				"request": {
					"description": "Message request parameters; treated as an anonymous records schema",
					"type": "array",
					"items": {"$ref": "#/definitions/field"},
					"uniqueItems": true
				},
				"response": {
					"description": "Message response type; can be any schema, and void is an alias for the null type",
					"anyOf": [
						{"type": "string", "const": "void"},
						{"$ref": "#/definitions/schema"}
					]
				},
				"errors": {
					"description": "Errors that may be the result of the message; must be (references to) 'error' schemas",
					"type": "array",
					"uniqueItems": true,
					"items": {
						"allOf": [
							{"$ref": "#/definitions/schema"},
							{"properties": {"type": {"const": "error"}}}
						]
					}
				},
				"one-way": {
					"description": "Whether the message is one-way only. If true, the response schema MUST be null or void",
					"type": "boolean"
				}
			}
		}
	}
}

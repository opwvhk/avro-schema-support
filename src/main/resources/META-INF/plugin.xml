<idea-plugin>
	<id>net.sf.opk.avro-schema-support</id>
	<name>Avro Schema Support</name>
	<vendor email="oscar@westravanholthe.nl" url="https://www.github.com/opwvhk/avro-schema-support">
		Oscar Westra van Holthe - Kind
	</vendor>

	<description><![CDATA[
		<p>
			Extend IntelliJ, PyCharm and other JetBrains IDEs to more easily work with Avro&trade; schemata and
			protocols in both JSON and IDL format, including the <code>.avsc</code> equivalent schema syntax
			(new in Avro 1.12.0)!
		</p>
		<p>
			<br/>
			IDL (<code>.avdl</code>) features include:
		</p>
		<ul>
			<li>Syntax &amp; error highlighting for protocols (the original syntax)</li>
			<li>Syntax &amp; error highlighting for schemas (the new <code>.avsc</code> equivalent syntax)</li>
			<li>Code completion</li>
			<li>Formatting (configurable)</li>
			<li>Inspections and quick fixes</li>
			<li>Navigation, renaming, quote/brace pairs, etc.</li>
			<li>Converting Avro schemas/protocols from/to IDL</li>
		</ul>
		<p>
			<br/>
			JSON (<code>.avsc</code>/<code>.avpr</code>) features include:
		</p>
		<ul>
			<li>Syntax & some error highlighting</li>
			<li>Code completion</li>
		</ul>
		<p>
			<br/>
			Please note that the JSON features are limited, as they are provided by IntelliJ JSON support combined with
			JSON schemas packaged in the plugin. Especially error detection is extremely limited, as are inspections.
		</p>
		<h3>Trademarks, Logo's, etc.</h3>
		<p>
			The pigeon logo was created by Emma K (<a href="https://github.com/emmak3l">emmak3l</a> on GitHub), and is
			used for this plugin with permission. She is also the creator of the
			<a href="https://avro.apache.org/">Apache Avro</a> logo.
		</p>
		<p>
			The names Apache Avro, Avro™, Apache®, and the Apache Avro paper plane logo are either registered trademarks
			or trademarks of The Apache Software Foundation. They are used in this plugin to signal intended
			compatibility, and are not intended to suggest endorsement.
		</p>
	]]></description>

	<!-- please see https://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html on how to target different products -->
	<depends>com.intellij.modules.platform</depends>
	<depends>com.intellij.modules.lang</depends>
	<depends optional="true" config-file="plugin-json.xml">com.intellij.modules.json</depends>
	<depends optional="true" config-file="plugin-intellilang.xml">org.intellij.intelliLang</depends>
	<!-- Known incompatibilities -->
	<incompatible-with>claims.bold.intellij.avro</incompatible-with>

	<resource-bundle>messages.TextBundle</resource-bundle>
	<extensionPoints>
		<extensionPoint qualifiedName="opwvhk.avro.idl.naming.convention" dynamic="true"
		                interface="opwvhk.intellij.avro_idl.naming.AvroIdlNamingConvention"/>
	</extensionPoints>
	<extensions defaultExtensionNs="com.intellij">
		<notificationGroup id="avro.idl.updates" key="notification.group.avro.idl.updates"
		                   displayType="BALLOON"/>
		<postStartupActivity implementation="opwvhk.intellij.avro_idl.AvroIdlPluginUpdateStartupActivity"/>
		<!--
		TODO: When requiring 2023.3+, check out https://plugins.jetbrains.com/docs/marketplace/exception-analyzer.html
		-->
		<errorHandler implementation="opwvhk.intellij.avro_idl.AvroIdlErrorReportSubmitter"/>
		<!-- File type & Language -->
		<fileType name="AvroIDL" fieldName="INSTANCE" language="AvroIDL" extensions="avdl"
		          implementationClass="opwvhk.intellij.avro_idl.AvroIdlFileType"/>
		<lang.parserDefinition language="AvroIDL"
		                       implementationClass="opwvhk.intellij.avro_idl.syntax.AvroIdlParserDefinition"/>
		<annotator language="AvroIDL" implementationClass="opwvhk.intellij.avro_idl.language.AvroIdlAnnotator"/>
		<lang.namesValidator language="AvroIDL"
		                     implementationClass="opwvhk.intellij.avro_idl.language.AvroIdlNamesValidator"/>
		<lang.elementManipulator forClass="opwvhk.intellij.avro_idl.psi.AvroIdlJsonStringLiteral"
		                         implementationClass="opwvhk.intellij.avro_idl.psi.AvroIdlJsonStringLiteralManipulator"/>
		<!-- Syntax highlighting & color definitions -->
		<lang.syntaxHighlighter language="AvroIDL"
		                        implementationClass="opwvhk.intellij.avro_idl.editor.AvroIdlSyntaxHighlighter"/>
		<colorSettingsPage implementation="opwvhk.intellij.avro_idl.editor.AvroIdlColorSettingsPage"/>
		<!-- Code completion (additional to type references) -->
		<completion.contributor language="AvroIDL"
		                        implementationClass="opwvhk.intellij.avro_idl.language.AvroIdlCompletionContributor"/>
		<!-- References, navigation & editor actions -->
		<lang.findUsagesProvider language="AvroIDL"
		                         implementationClass="opwvhk.intellij.avro_idl.language.AvroIdlFindUsagesProvider"/>
		<gotoSymbolContributor implementation="opwvhk.intellij.avro_idl.language.AvroIdlChooseByNameContributor"/>
		<lang.refactoringSupport language="AvroIDL"
		                         implementationClass="opwvhk.intellij.avro_idl.language.AvroIdlRefactoringSupportProvider"/>
		<lang.commenter language="AvroIDL" implementationClass="opwvhk.intellij.avro_idl.editor.AvroIdlCommenter"/>
		<quoteHandler fileType="AvroIDL" className="opwvhk.intellij.avro_idl.editor.AvroIdlTokenSetQuoteHandler"/>
		<!-- Angle brackets must be handled specially, as generic handling interferes with some languages (XML, Java) -->
		<lang.braceMatcher language="AvroIDL"
		                   implementationClass="opwvhk.intellij.avro_idl.editor.AvroIdlPairedBraceMatcher"/>
		<typedHandler implementation="opwvhk.intellij.avro_idl.editor.AvroIdlAngleBracketTypedHandler"/>
		<backspaceHandlerDelegate implementation="opwvhk.intellij.avro_idl.editor.AvroIdlAngleBracketBackspaceHandler"/>
		<declarationRangeHandler key="opwvhk.intellij.avro_idl.psi.AvroIdlNameIdentifierOwner"
		                         implementationClass="opwvhk.intellij.avro_idl.editor.AvroIdlDeclarationRangeHandler"/>
		<lang.documentationProvider language="AvroIDL"
		                            implementationClass="opwvhk.intellij.avro_idl.editor.AvroIdlDocumentationProvider"/>
		<!-- Structure view (also in project view and navigation bar) -->
		<lang.psiStructureViewFactory language="AvroIDL"
		                              implementationClass="opwvhk.intellij.avro_idl.editor.AvroIdlStructureViewFactory"/>
		<treeStructureProvider implementation="opwvhk.intellij.avro_idl.editor.AvroIdlTreeStructureProvider"/>
		<navbar implementation="opwvhk.intellij.avro_idl.editor.AvroIdlStructureAwareNavbar"/>
		<!-- Formatting & code style -->
		<lang.foldingBuilder language="AvroIDL"
		                     implementationClass="opwvhk.intellij.avro_idl.editor.AvroIdlFoldingBuilder"/>
		<lang.formatter language="AvroIDL"
		                implementationClass="opwvhk.intellij.avro_idl.editor.AvroIdlFormattingModelBuilder"/>
		<codeStyleSettingsProvider implementation="opwvhk.intellij.avro_idl.editor.AvroIdlCodeStyleSettingsProvider"/>
		<langCodeStyleSettingsProvider
				implementation="opwvhk.intellij.avro_idl.editor.AvroIdlLanguageCodeStyleSettingsProvider"/>
		<!-- Inspections (can be turned off) -->
		<localInspection language="AvroIDL" groupKey="inspection.group.avro" key="inspection.duplicate.annotations"
		                 level="WARNING" enabledByDefault="true"
		                 implementationClass="opwvhk.intellij.avro_idl.inspections.AvroIdlDuplicateAnnotationsInspection"/>
		<localInspection language="AvroIDL" groupKey="inspection.group.avro" key="inspection.misplaced.annotations"
		                 level="WEAK WARNING" enabledByDefault="true"
		                 implementationClass="opwvhk.intellij.avro_idl.inspections.AvroIdlMisplacedAnnotationsInspection"/>
		<localInspection language="AvroIDL" groupKey="inspection.group.avro" key="inspection.invalid.namespace.annotation"
		                 level="WARNING" enabledByDefault="true"
		                 implementationClass="opwvhk.intellij.avro_idl.inspections.AvroIdlInvalidNamespaceAnnotationInspection"/>
		<localInspection language="AvroIDL" groupKey="inspection.group.avro" key="inspection.misplaced.documentation"
		                 level="WARNING" enabledByDefault="true"
		                 implementationClass="opwvhk.intellij.avro_idl.inspections.AvroIdlMisplacedDocumentationInspection"/>
		<localInspection language="AvroIDL" groupKey="inspection.group.avro" key="inspection.use.nullable.shorthand"
		                 level="WEAK WARNING" enabledByDefault="true"
		                 implementationClass="opwvhk.intellij.avro_idl.inspections.AvroIdlUseNullableShorthandInspection"/>
		<localInspection language="AvroIDL" groupKey="inspection.group.avro" key="inspection.avoid.nullable.shorthand"
		                 level="ERROR" enabledByDefault="false"
		                 implementationClass="opwvhk.intellij.avro_idl.inspections.AvroIdlAvoidNullableShorthandInspection"/>
		<localInspection language="AvroIDL" groupKey="inspection.group.avro" key="inspection.use.schema.syntax"
		                 level="WEAK WARNING" enabledByDefault="true"
		                 implementationClass="opwvhk.intellij.avro_idl.inspections.AvroIdlUseSchemaSyntaxInspection"/>
		<localInspection language="AvroIDL" groupKey="inspection.group.avro" key="inspection.avoid.schema.syntax"
		                 level="ERROR" enabledByDefault="false"
		                 implementationClass="opwvhk.intellij.avro_idl.inspections.AvroIdlAvoidSchemaSyntaxInspection"/>
		<localInspection language="AvroIDL" groupKey="inspection.group.avro" key="inspection.naming.convention"
		                 level="TYPO" enabledByDefault="false"
		                 implementationClass="opwvhk.intellij.avro_idl.inspections.AvroIdlNamingConventionInspection"/>
	</extensions>
	<extensions defaultExtensionNs="opwvhk.avro.idl">
		<!--
		Please note: the naming convention order is explicitly reversed in the IntelliJ displaying code.
		This explains the use of "last"/"before" instead of the more logical "first"/"after".
		-->
		<naming.convention id="AvroIdlNamespaceNamingConvention" order="last"
		                   implementation="opwvhk.intellij.avro_idl.naming.AvroIdlNamespaceNamingConvention"/>
		<naming.convention id="AvroIdlRecordNamingConvention" order="before AvroIdlNamespaceNamingConvention"
		                   implementation="opwvhk.intellij.avro_idl.naming.AvroIdlRecordNamingConvention"/>
		<naming.convention id="AvroIdlErrorNamingConvention" order="before AvroIdlRecordNamingConvention"
		                   implementation="opwvhk.intellij.avro_idl.naming.AvroIdlErrorNamingConvention"/>
		<naming.convention id="AvroIdlFieldNamingConvention" order="before AvroIdlErrorNamingConvention"
		                   implementation="opwvhk.intellij.avro_idl.naming.AvroIdlFieldNamingConvention"/>
		<naming.convention id="AvroIdlEnumNamingConvention" order="before AvroIdlFieldNamingConvention"
		                   implementation="opwvhk.intellij.avro_idl.naming.AvroIdlEnumNamingConvention"/>
		<naming.convention id="AvroIdlEnumConstantNamingConvention" order="before AvroIdlEnumNamingConvention"
		                   implementation="opwvhk.intellij.avro_idl.naming.AvroIdlEnumConstantNamingConvention"/>
		<naming.convention id="AvroIdlFixedNamingConvention" order="before AvroIdlEnumConstantNamingConvention"
		                   implementation="opwvhk.intellij.avro_idl.naming.AvroIdlFixedNamingConvention"/>
		<naming.convention id="AvroIdlProtocolNamingConvention" order="before AvroIdlFixedNamingConvention"
		                   implementation="opwvhk.intellij.avro_idl.naming.AvroIdlProtocolNamingConvention"/>
		<naming.convention id="AvroIdlMessageNamingConvention" order="before AvroIdlProtocolNamingConvention"
		                   implementation="opwvhk.intellij.avro_idl.naming.AvroIdlMessageNamingConvention"/>
	</extensions>
	<actions>
		<action id="AvroIdl.IdlToProtocol" class="opwvhk.intellij.avro_idl.actions.AvroIdlToProtocolAction">
			<add-to-group group-id="RefactoringMenu" anchor="last"/>
		</action>
		<action id="AvroIdl.IdlToSchema" class="opwvhk.intellij.avro_idl.actions.AvroIdlToSchemaAction">
			<add-to-group group-id="RefactoringMenu" anchor="last"/>
		</action>
		<action id="AvroIdl.ProtocolToIdl" class="opwvhk.intellij.avro_idl.actions.AvroProtocolToIdlAction">
			<add-to-group group-id="RefactoringMenu" anchor="last"/>
		</action>
		<action id="AvroIdl.SchemaToIdl" class="opwvhk.intellij.avro_idl.actions.AvroSchemaToIdlAction">
			<add-to-group group-id="RefactoringMenu" anchor="last"/>
		</action>

		<group id="AvroIdl.NewGroup">
			<action id="AvroIdlNewFile" class="opwvhk.intellij.avro_idl.actions.AvroIdlCreateFileFromAction"/>
			<add-to-group group-id="NewGroup" anchor="before" relative-to-action="NewFromTemplate"/>
		</group>
	</actions>
</idea-plugin>

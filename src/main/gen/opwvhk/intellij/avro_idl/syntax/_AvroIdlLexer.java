/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package opwvhk.intellij.avro_idl.syntax;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static opwvhk.intellij.avro_idl.psi.AvroIdlTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_AvroIdlLexer.flex</tt>
 */
public class _AvroIdlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 17488 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1"+
    "\21\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\21\1\25\1\57\1\60\5\21\2\25\1\61"+
    "\7\21\1\25\1\62\20\21\1\25\1\63\1\21\1\64\13\25\1\65\1\25\1\66\22\21\1\67"+
    "\1\70\4\21\1\71\11\21\1\72\1\73\1\74\1\75\1\21\1\76\2\21\1\77\3\21\1\100\2"+
    "\21\1\101\10\21\123\25\1\102\7\25\1\103\1\104\12\25\1\105\15\25\1\106\6\21"+
    "\1\25\1\107\u0582\21\1\110\u017f\21");

  /* The ZZ_CMAP_Y table has 4672 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1"+
    "\17\3\0\1\20\1\21\1\22\1\23\2\11\1\24\3\11\1\24\71\11\1\25\1\11\1\26\1\27"+
    "\1\30\1\31\2\27\16\0\1\32\1\33\1\34\1\35\2\11\1\36\11\11\1\37\21\11\1\40\1"+
    "\41\24\11\1\42\3\11\1\24\1\43\1\42\4\11\1\44\1\45\4\0\1\46\1\47\1\27\3\11"+
    "\2\50\1\27\1\51\1\52\1\0\1\53\5\11\1\54\3\0\1\55\1\56\13\11\1\57\1\46\1\60"+
    "\1\61\1\0\1\62\1\27\1\63\1\64\3\11\3\0\1\65\12\11\1\66\1\0\1\67\1\27\1\0\1"+
    "\70\3\11\1\54\1\71\1\23\2\11\1\66\1\72\1\73\1\74\2\27\3\11\1\75\1\11\1\50"+
    "\6\27\2\11\1\32\1\76\2\27\1\77\5\0\1\100\6\11\1\101\2\0\1\102\1\11\1\103\1"+
    "\0\1\42\1\11\1\104\1\105\1\106\2\11\1\107\1\110\1\111\1\112\1\113\1\63\1\114"+
    "\1\103\1\0\1\115\1\116\1\117\1\120\1\106\2\11\1\107\1\121\1\122\1\123\1\124"+
    "\1\125\1\126\1\127\1\0\1\130\1\27\1\117\1\37\1\36\2\11\1\107\1\131\1\111\1"+
    "\46\1\132\1\133\1\27\1\103\1\0\1\43\1\134\1\117\1\105\1\106\2\11\1\107\1\131"+
    "\1\111\1\112\1\124\1\127\1\114\1\103\1\0\1\43\1\27\1\135\1\136\1\137\1\140"+
    "\1\116\1\136\1\11\1\141\1\142\1\143\1\144\1\27\1\127\1\0\1\27\1\43\1\145\1"+
    "\32\1\107\2\11\1\107\1\11\1\146\1\147\1\143\1\150\1\50\1\103\1\0\2\27\1\104"+
    "\1\32\1\107\2\11\1\107\1\151\1\111\1\147\1\143\1\150\1\34\1\103\1\0\1\152"+
    "\1\27\1\145\1\32\1\107\4\11\1\153\1\147\1\154\1\155\1\44\1\103\1\0\1\27\1"+
    "\41\1\156\1\11\1\24\1\41\2\11\1\36\1\157\1\24\1\160\1\161\1\0\1\127\1\0\1"+
    "\162\1\27\1\42\5\11\1\163\1\164\1\165\1\166\1\0\1\167\4\27\1\170\1\171\1\172"+
    "\1\42\1\173\1\174\1\163\1\175\1\176\1\51\1\0\1\177\4\27\1\133\2\27\1\167\1"+
    "\0\1\167\1\200\1\201\1\11\1\42\3\11\1\30\1\45\1\0\1\147\1\202\1\0\1\45\3\0"+
    "\1\203\1\204\7\27\5\11\1\54\1\0\1\205\1\0\1\167\1\66\1\206\1\207\1\210\1\211"+
    "\1\11\1\212\1\213\1\0\1\51\4\11\1\37\1\22\5\11\1\214\51\11\1\137\1\24\1\137"+
    "\5\11\1\137\4\11\1\137\1\24\1\137\1\11\1\24\7\11\1\137\10\11\1\215\4\27\2"+
    "\11\2\27\12\11\2\76\1\42\114\11\1\105\2\11\1\216\2\11\1\50\11\11\1\136\1\11"+
    "\1\133\1\11\1\32\1\217\1\27\2\11\1\217\1\27\2\11\1\220\1\27\1\11\1\32\1\221"+
    "\1\27\6\11\1\222\3\0\1\223\1\224\1\0\1\167\3\27\1\225\1\0\1\167\13\11\1\27"+
    "\1\226\4\11\1\227\10\11\1\76\1\27\3\11\1\24\1\0\1\2\1\0\1\2\1\127\1\0\3\11"+
    "\1\76\1\30\1\27\5\11\1\115\3\11\1\26\1\0\1\167\4\27\2\11\1\165\1\2\6\11\1"+
    "\202\1\166\3\0\1\112\1\0\1\167\1\0\1\167\1\44\1\27\1\0\1\51\10\27\1\230\5"+
    "\11\1\222\1\0\1\230\1\115\1\0\1\167\1\27\1\231\1\2\1\27\1\232\3\11\1\102\1"+
    "\210\1\0\1\70\4\11\1\66\1\0\1\2\1\27\4\11\1\222\2\0\1\27\1\0\1\233\1\0\1\70"+
    "\3\11\1\76\1\11\1\133\10\27\1\234\2\0\1\235\1\236\1\167\30\11\7\0\1\237\42"+
    "\11\2\76\4\11\2\76\1\11\1\240\3\11\1\76\6\11\1\32\1\176\1\241\1\30\1\242\1"+
    "\115\1\11\1\30\1\241\1\30\1\243\1\244\3\27\1\245\1\27\1\44\1\133\1\27\1\246"+
    "\1\247\1\147\1\0\1\43\1\44\2\27\1\11\1\30\4\11\2\27\1\0\1\203\1\250\1\0\1"+
    "\251\1\27\1\252\1\41\1\157\1\253\1\31\1\254\1\11\1\255\1\256\1\257\2\27\5"+
    "\11\1\133\116\27\5\11\1\24\5\11\1\24\20\11\1\30\1\260\1\261\1\27\4\11\1\37"+
    "\1\22\7\11\1\44\1\27\1\63\2\11\1\24\1\27\10\24\4\0\5\27\1\44\72\27\1\262\3"+
    "\27\1\42\1\212\1\253\1\30\1\42\11\11\1\24\1\263\1\42\12\11\1\214\1\256\4\11"+
    "\1\24\1\42\12\11\1\24\2\27\3\11\1\50\6\27\170\11\1\76\11\27\75\11\1\50\2\27"+
    "\21\11\1\30\10\27\5\11\1\76\41\11\1\30\2\11\1\0\1\261\2\27\5\11\1\165\1\77"+
    "\1\264\3\11\1\66\12\11\1\167\3\27\1\44\1\11\1\41\14\11\1\106\3\11\1\24\1\11"+
    "\7\27\1\44\1\11\1\265\1\266\2\11\1\54\2\27\1\133\6\11\1\115\1\27\1\70\5\11"+
    "\1\222\1\0\1\51\1\27\1\0\1\167\2\0\1\70\1\267\1\0\1\70\2\11\1\66\1\51\2\11"+
    "\1\165\1\0\1\2\1\27\3\11\1\30\1\100\5\11\1\54\1\0\1\251\1\44\1\0\1\167\1\270"+
    "\1\11\1\0\1\271\5\11\1\102\1\166\1\27\1\266\1\272\1\0\1\167\2\11\1\24\1\273"+
    "\6\11\1\207\1\274\1\227\2\27\1\275\1\11\1\54\1\276\1\27\3\277\1\27\2\24\5"+
    "\11\1\214\1\76\1\27\16\11\1\54\1\300\1\0\1\167\64\11\1\115\1\27\2\11\1\24"+
    "\1\301\5\11\1\115\40\27\55\11\1\76\15\11\1\26\4\27\1\24\1\27\1\301\1\302\1"+
    "\11\1\107\1\24\1\176\1\303\15\11\1\26\3\27\1\301\54\11\1\76\2\27\10\11\1\41"+
    "\6\11\5\27\1\11\1\30\2\0\2\27\2\0\1\116\2\27\1\256\3\27\1\43\1\32\20\11\1"+
    "\304\1\246\1\27\1\0\1\167\1\42\2\11\1\120\1\42\2\11\1\50\1\305\12\11\1\24"+
    "\3\41\1\306\1\307\2\27\1\310\1\11\1\151\2\11\1\24\2\11\1\311\1\11\1\76\1\11"+
    "\1\76\4\27\17\11\1\50\10\27\6\11\1\30\20\27\1\312\20\27\3\11\1\30\6\11\1\133"+
    "\1\27\1\251\3\27\4\11\1\27\1\256\3\11\1\50\4\11\1\66\1\313\3\11\1\76\4\11"+
    "\1\115\1\11\1\253\5\27\23\11\1\76\1\0\1\167\4\11\1\115\4\11\1\115\5\11\1\27"+
    "\6\11\1\115\23\27\46\11\1\24\1\27\2\11\1\76\1\27\1\11\23\27\1\76\1\107\4\11"+
    "\1\37\1\314\2\11\1\76\1\27\2\11\1\24\1\27\3\11\1\24\10\27\2\11\1\315\1\27"+
    "\2\11\1\76\1\27\3\11\1\26\10\27\7\11\1\305\10\27\1\316\1\77\1\151\1\42\2\11"+
    "\1\115\1\123\4\27\3\11\1\30\3\11\1\30\4\27\1\11\1\42\2\11\1\317\3\27\6\11"+
    "\1\76\1\27\2\11\1\76\1\27\2\11\1\50\1\27\2\11\1\26\15\27\11\11\1\133\6\27"+
    "\6\11\1\50\1\27\6\11\1\50\41\27\1\232\6\11\1\0\1\166\3\27\1\127\1\0\1\27\1"+
    "\63\1\232\5\11\1\0\1\320\2\27\3\11\1\133\1\0\1\167\1\232\3\11\1\165\1\0\1"+
    "\147\1\0\2\27\4\11\1\321\1\27\1\232\5\11\1\54\1\0\1\322\1\323\1\0\1\324\4"+
    "\27\2\11\1\36\2\11\1\222\1\0\1\204\10\27\1\24\1\254\1\11\1\37\1\11\1\133\5"+
    "\11\1\165\1\0\1\313\1\0\1\167\1\145\1\105\1\106\2\11\1\107\1\131\1\111\1\112"+
    "\1\124\1\144\1\256\1\103\2\203\21\27\6\11\1\202\1\0\1\205\1\50\1\0\1\167\4"+
    "\27\6\11\2\0\1\325\1\27\1\0\1\167\24\27\5\11\1\165\1\51\1\0\1\251\2\27\1\272"+
    "\4\27\6\11\2\0\1\326\1\27\1\0\1\167\4\27\5\11\1\54\1\0\1\27\1\0\1\167\6\27"+
    "\3\11\1\327\1\0\1\2\1\0\1\167\54\27\10\11\1\0\1\167\1\27\1\44\40\27\1\102"+
    "\1\232\4\11\1\54\1\330\1\63\1\27\1\102\1\100\4\11\1\242\1\212\1\0\1\167\4"+
    "\27\7\11\1\133\40\27\1\11\1\107\3\11\1\165\1\166\1\0\1\133\1\27\1\0\1\167"+
    "\2\27\1\41\3\11\1\331\2\0\1\45\1\166\11\27\1\24\1\36\4\11\1\332\1\333\1\213"+
    "\1\27\1\0\1\167\24\27\63\11\1\26\14\27\15\11\1\24\2\27\30\11\1\115\27\27\5"+
    "\11\1\24\72\27\10\11\1\24\67\27\7\11\1\133\3\11\1\24\1\0\1\167\14\27\3\11"+
    "\1\76\1\203\1\27\6\11\1\166\1\27\1\115\1\27\1\0\1\167\1\301\2\11\1\256\2\11"+
    "\56\27\10\11\1\30\1\27\1\102\4\0\1\166\1\27\1\63\1\232\1\11\10\27\1\26\3\27"+
    "\75\11\1\30\2\27\36\11\1\50\41\27\43\11\1\24\12\27\61\11\1\115\40\27\15\11"+
    "\1\50\1\11\1\30\1\11\1\133\1\11\1\334\1\2\127\27\1\335\1\336\2\0\1\337\1\2"+
    "\3\27\1\340\22\27\1\323\67\27\12\11\1\32\10\11\1\32\1\341\1\342\1\11\1\343"+
    "\1\151\7\11\1\37\1\344\2\32\3\11\1\345\1\176\1\41\1\107\51\11\1\76\3\11\1"+
    "\107\2\11\1\214\3\11\1\214\2\11\1\32\3\11\1\32\2\11\1\24\3\11\1\24\3\11\1"+
    "\107\3\11\1\107\2\11\1\214\1\346\14\0\1\166\1\231\5\0\1\203\1\312\1\27\1\347"+
    "\2\27\1\231\1\45\1\0\52\27\1\166\2\0\1\350\1\351\1\313\72\27\30\11\1\30\1"+
    "\27\1\166\5\27\10\11\1\222\1\313\1\0\1\167\24\27\1\151\3\11\1\170\1\42\1\214"+
    "\1\352\1\252\1\353\1\170\1\240\1\170\2\214\1\126\1\11\1\36\1\11\1\115\1\354"+
    "\1\36\1\11\1\115\50\27\32\11\1\24\5\27\106\11\1\30\1\27\33\11\1\76\120\11"+
    "\1\26\1\27\146\11\1\133\3\27\3\11\1\76\74\27\1\125\3\27\14\0\20\27\36\0\2"+
    "\27");

  /* The ZZ_CMAP_A table has 1896 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\34\1\3\1\2\2\1\1\2\6\34\4\0\1\3\1\0\1\22\1\0\1\32\2\0\1\24\1\37\1\40\1"+
    "\27\1\21\1\46\1\4\1\17\1\26\1\5\7\25\2\6\1\50\1\47\1\43\1\51\1\44\1\0\1\45"+
    "\4\32\1\20\3\32\1\11\4\32\1\7\14\32\1\41\1\23\1\42\1\0\1\71\1\31\1\10\1\33"+
    "\1\66\1\56\1\55\1\13\1\64\1\67\1\14\2\32\1\54\1\60\1\12\1\53\1\63\1\32\1\52"+
    "\1\61\1\15\1\57\1\70\1\65\1\62\1\16\1\32\1\35\1\0\1\36\1\0\6\34\1\30\2\34"+
    "\1\3\1\0\4\32\4\0\1\32\2\0\1\34\7\0\1\32\4\0\1\32\5\0\7\32\1\0\2\32\4\0\4"+
    "\32\16\0\5\32\7\0\1\32\1\0\1\32\1\0\5\32\1\0\2\32\2\0\4\32\1\0\1\32\6\0\1"+
    "\32\1\0\3\32\1\0\1\32\1\0\4\32\1\0\13\32\1\0\3\32\1\0\5\34\2\0\6\32\1\0\7"+
    "\32\1\0\1\32\15\0\1\32\1\0\15\34\1\0\1\34\1\0\2\34\1\0\2\34\1\0\1\34\3\32"+
    "\5\0\6\34\5\0\1\32\4\0\3\34\1\0\1\34\3\0\3\32\7\34\4\0\2\32\1\34\13\32\1\0"+
    "\1\32\7\34\2\32\2\34\1\0\4\34\2\32\2\34\3\32\2\0\1\32\7\0\1\34\1\32\1\34\6"+
    "\32\3\34\2\0\11\32\3\34\1\32\6\0\2\34\6\32\4\34\2\32\2\0\2\34\1\32\11\34\1"+
    "\32\3\34\1\32\5\34\2\0\1\32\3\34\4\0\6\32\6\0\10\34\6\32\3\34\1\32\2\34\1"+
    "\32\7\34\2\32\2\34\2\0\2\34\1\32\3\34\1\0\10\32\2\0\2\32\2\0\6\32\1\0\7\32"+
    "\1\0\1\32\3\0\4\32\2\0\1\34\1\32\7\34\2\0\2\34\2\0\3\34\1\32\5\0\2\32\1\0"+
    "\5\32\7\0\2\32\4\0\3\34\1\0\6\32\4\0\2\32\1\0\2\32\1\0\2\32\1\0\2\32\2\0\1"+
    "\34\1\0\5\34\4\0\2\34\2\0\3\34\3\0\1\34\7\0\4\32\1\0\1\32\7\0\4\34\3\32\1"+
    "\34\2\0\1\32\1\0\2\32\1\0\3\32\2\34\1\0\3\34\2\0\1\32\10\0\1\32\6\34\2\0\1"+
    "\34\1\32\1\0\6\32\3\0\3\32\1\0\4\32\3\0\2\32\1\0\1\32\1\0\4\32\4\0\5\34\3"+
    "\0\3\34\1\0\4\34\2\0\1\32\6\0\5\34\1\0\5\32\3\0\1\32\7\34\1\0\2\34\5\0\2\34"+
    "\1\0\4\32\1\0\3\32\1\0\2\32\5\0\3\32\2\34\1\32\3\34\1\0\4\34\1\32\5\0\3\32"+
    "\1\34\2\0\2\34\1\0\7\32\1\0\1\32\4\0\1\34\4\0\6\34\1\0\1\34\3\0\2\34\4\0\1"+
    "\32\1\34\2\32\7\34\4\0\10\32\10\34\1\0\2\34\7\0\2\32\1\0\1\32\2\0\2\32\1\0"+
    "\1\32\2\0\1\32\6\0\4\32\1\0\3\32\1\0\1\32\1\0\1\32\2\0\2\32\1\0\3\32\2\34"+
    "\1\0\2\34\1\32\2\0\5\32\1\0\1\32\1\0\2\34\2\0\4\32\5\0\1\34\1\0\1\34\1\0\1"+
    "\34\4\0\2\34\5\32\10\34\11\0\1\34\1\0\7\34\1\32\2\34\4\32\3\34\1\32\3\34\2"+
    "\32\7\34\3\32\4\34\5\32\14\34\1\32\1\34\3\32\1\0\7\32\2\0\3\34\1\3\11\32\3"+
    "\34\3\0\2\32\2\34\4\0\1\32\1\0\2\34\4\0\4\32\10\34\3\0\1\32\3\0\2\32\1\34"+
    "\5\0\4\34\1\0\5\32\2\34\2\32\1\34\1\32\5\0\5\34\3\32\3\0\10\34\5\32\2\34\3"+
    "\0\3\32\3\34\1\0\5\34\4\32\1\34\4\32\3\34\2\32\3\34\1\0\5\34\1\0\1\32\1\0"+
    "\1\32\1\0\1\32\1\0\1\32\2\0\3\32\1\0\6\32\2\0\2\32\13\3\5\34\2\1\5\34\1\3"+
    "\4\0\1\32\12\0\1\3\1\0\1\34\3\0\4\34\11\0\1\32\4\0\1\32\1\0\5\32\2\0\1\32"+
    "\1\0\4\32\1\0\3\32\2\0\4\32\5\0\5\32\4\0\1\32\4\0\4\32\3\34\2\32\4\0\1\3\4"+
    "\0\3\32\1\0\2\34\2\0\3\32\6\34\1\0\3\32\1\34\3\32\1\34\4\32\1\34\4\32\3\0"+
    "\1\32\1\0\1\32\2\0\5\32\1\34\2\32\2\34\5\32\1\0\4\32\2\34\4\0\1\32\3\34\2"+
    "\32\1\34\5\32\2\34\3\0\3\32\4\0\3\32\2\34\2\0\6\32\1\0\3\34\1\0\2\34\5\0\5"+
    "\32\5\0\1\32\1\34\3\32\1\0\2\32\1\0\7\32\2\0\1\34\6\0\2\32\2\0\3\32\3\0\2"+
    "\32\3\0\2\32\2\0\3\34\4\0\3\32\1\0\2\32\1\0\1\32\5\0\1\34\2\0\3\34\5\0\1\32"+
    "\3\0\1\32\2\0\4\32\1\0\2\32\2\0\1\32\3\34\1\0\2\34\1\0\5\32\2\34\1\0\3\34"+
    "\2\0\1\34\2\0\3\32\1\34\2\0\1\32\1\0\1\34\4\32\5\0\3\34\3\0\2\34\1\32\1\0"+
    "\1\32\3\0\4\34\2\32\1\0\1\32\1\34\3\0\1\32\3\0\2\32\3\0\5\34\1\32\4\34\3\0"+
    "\6\34\1\32\6\34\3\0\1\34\1\0\2\34\1\0\1\34\2\32\3\0\2\34\6\0\5\34\3\0\6\34"+
    "\2\0\3\34\2\0\4\34\4\0\1\32\2\0\2\32\2\0\4\32\1\0\4\32\1\0\1\32\1\0\6\32\2"+
    "\0\5\32\1\0\4\32\1\0\4\32\2\0\2\34\4\0\1\34\3\0\1\34\2\0\7\34\1\0\2\34\1\0"+
    "\2\34\1\0\1\32\1\0\1\32\5\0\1\32\1\0\1\32\1\0\3\32\1\0\3\32\1\0\3\32");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\2\3\10\4\3\1\1\4"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\12\4\5\0\15\4"+
    "\1\0\1\22\1\0\1\23\2\0\21\4\2\0\1\24"+
    "\1\0\2\24\6\4\1\25\1\26\4\4\2\0\16\4"+
    "\1\27\4\4\1\24\1\0\2\4\1\30\5\4\1\31"+
    "\1\4\2\0\1\32\1\0\4\4\1\33\1\4\1\34"+
    "\1\4\1\35\3\4\1\36\3\4\1\37\1\0\1\40"+
    "\1\4\1\41\1\42\1\43\4\4\1\32\1\44\1\45"+
    "\4\4\1\46\2\4\1\47\3\4\1\0\1\4\1\50"+
    "\2\4\1\51\1\4\1\52\1\53\1\4\1\54\1\4"+
    "\1\55\1\56\1\4\1\0\2\4\1\57\1\60\1\4"+
    "\1\61\1\4\1\0\2\4\1\62\6\4\1\63\6\4"+
    "\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[219];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366"+
    "\0\u03a0\0\u03da\0\72\0\72\0\72\0\72\0\72\0\72"+
    "\0\72\0\72\0\72\0\72\0\72\0\72\0\72\0\u0414"+
    "\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4"+
    "\0\u061e\0\u0658\0\u0692\0\u06cc\0\u0706\0\u0740\0\u077a\0\u07b4"+
    "\0\u07ee\0\u0828\0\u0862\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984"+
    "\0\u09be\0\u09f8\0\u0a32\0\u032c\0\72\0\u0a6c\0\u0aa6\0\u0ae0"+
    "\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0"+
    "\0\u0cea\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80"+
    "\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u0fdc\0\u02f2"+
    "\0\u1016\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u02f2\0\u02f2"+
    "\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294\0\72\0\u12ce"+
    "\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a\0\u1464\0\u149e"+
    "\0\u14d8\0\u1512\0\u154c\0\u1586\0\u02f2\0\u15c0\0\u15fa\0\u1634"+
    "\0\u166e\0\72\0\u16a8\0\u16e2\0\u171c\0\u02f2\0\u1756\0\u1790"+
    "\0\u17ca\0\u1804\0\u183e\0\u02f2\0\u1878\0\u18b2\0\u18ec\0\u18ec"+
    "\0\u1926\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u02f2\0\u1a48\0\u02f2"+
    "\0\u1a82\0\u02f2\0\u1abc\0\u1af6\0\u1b30\0\u02f2\0\u1b6a\0\u1ba4"+
    "\0\u1bde\0\u02f2\0\u1c18\0\u02f2\0\u1c52\0\u02f2\0\u02f2\0\u02f2"+
    "\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a\0\72\0\72\0\u02f2\0\u1d74"+
    "\0\u1dae\0\u1de8\0\u1e22\0\u02f2\0\u1e5c\0\u1e96\0\u02f2\0\u1ed0"+
    "\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8\0\u02f2\0\u1ff2\0\u202c\0\u02f2"+
    "\0\u2066\0\u02f2\0\u02f2\0\u20a0\0\u02f2\0\u20da\0\u02f2\0\u02f2"+
    "\0\u2114\0\u214e\0\u2188\0\u21c2\0\u02f2\0\u02f2\0\u21fc\0\u02f2"+
    "\0\u2236\0\u2270\0\u22aa\0\u22e4\0\u02f2\0\u231e\0\u2358\0\u2392"+
    "\0\u23cc\0\u2406\0\u2440\0\u02f2\0\u247a\0\u24b4\0\u24ee\0\u2528"+
    "\0\u2562\0\u259c\0\u02f2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[219];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\2\1\16\1\2"+
    "\1\17\2\2\1\6\1\20\1\2\1\3\1\21\1\16"+
    "\1\22\1\2\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\16"+
    "\1\50\4\16\1\51\1\16\73\0\3\3\24\0\1\3"+
    "\46\0\1\5\1\6\1\52\1\0\1\53\13\0\1\6"+
    "\63\0\1\54\1\55\34\0\1\55\21\0\2\6\10\0"+
    "\1\54\1\55\4\0\1\6\27\0\1\55\20\0\1\56"+
    "\3\16\1\57\6\16\1\56\1\16\4\0\1\16\2\0"+
    "\1\16\1\0\3\16\15\0\20\16\4\0\1\56\12\16"+
    "\1\56\1\16\4\0\1\16\2\0\1\16\1\0\3\16"+
    "\15\0\1\60\17\16\4\0\1\56\5\16\1\61\4\16"+
    "\1\56\1\16\4\0\1\16\2\0\1\16\1\0\3\16"+
    "\15\0\20\16\4\0\1\56\12\16\1\56\1\16\4\0"+
    "\1\16\2\0\1\16\1\0\3\16\15\0\5\16\1\62"+
    "\12\16\4\0\1\56\3\16\1\63\3\16\1\64\2\16"+
    "\1\56\1\16\4\0\1\16\2\0\1\16\1\0\3\16"+
    "\15\0\2\16\1\65\15\16\4\0\1\56\5\16\1\66"+
    "\4\16\1\56\1\16\4\0\1\16\2\0\1\16\1\0"+
    "\3\16\15\0\4\16\1\67\1\16\1\70\11\16\4\0"+
    "\1\56\7\16\1\71\2\16\1\56\1\16\4\0\1\16"+
    "\2\0\1\16\1\0\3\16\15\0\1\72\14\16\1\73"+
    "\2\16\4\0\1\56\12\16\1\56\1\16\4\0\1\16"+
    "\2\0\1\16\1\0\3\16\15\0\20\16\2\74\1\0"+
    "\17\74\1\75\1\76\46\74\26\0\1\77\1\100\51\0"+
    "\10\101\1\0\1\101\11\0\2\101\16\0\20\101\4\0"+
    "\1\56\11\16\1\102\1\56\1\16\4\0\1\16\2\0"+
    "\1\16\1\0\3\16\15\0\1\16\1\103\16\16\4\0"+
    "\1\56\12\16\1\56\1\16\4\0\1\16\2\0\1\16"+
    "\1\0\3\16\15\0\3\16\1\104\14\16\4\0\1\56"+
    "\5\16\1\105\4\16\1\56\1\16\4\0\1\16\2\0"+
    "\1\16\1\0\3\16\15\0\20\16\4\0\1\56\12\16"+
    "\1\56\1\16\4\0\1\16\2\0\1\16\1\0\3\16"+
    "\15\0\1\16\1\106\16\16\4\0\1\56\5\16\1\107"+
    "\4\16\1\56\1\16\4\0\1\16\2\0\1\16\1\0"+
    "\3\16\15\0\1\110\17\16\4\0\1\56\3\16\1\111"+
    "\6\16\1\56\1\16\4\0\1\16\2\0\1\16\1\0"+
    "\3\16\15\0\1\16\1\112\1\16\1\113\14\16\4\0"+
    "\1\56\5\16\1\114\4\16\1\56\1\16\4\0\1\16"+
    "\2\0\1\16\1\0\3\16\15\0\5\16\1\115\12\16"+
    "\4\0\1\56\3\16\1\116\6\16\1\56\1\16\4\0"+
    "\1\16\2\0\1\16\1\0\3\16\15\0\20\16\4\0"+
    "\1\56\10\16\1\117\1\16\1\56\1\16\4\0\1\16"+
    "\2\0\1\16\1\0\3\16\15\0\14\16\1\120\3\16"+
    "\4\0\1\56\12\16\1\56\1\16\4\0\1\16\2\0"+
    "\1\16\1\0\3\16\15\0\1\121\17\16\4\0\1\56"+
    "\12\16\1\56\1\16\4\0\1\16\2\0\1\16\1\0"+
    "\3\16\15\0\1\16\1\122\16\16\10\0\1\123\73\0"+
    "\1\124\64\0\2\125\16\0\1\125\50\0\1\126\2\127"+
    "\12\0\1\126\3\0\1\127\53\0\10\16\1\0\1\16"+
    "\11\0\2\16\16\0\20\16\4\0\1\56\2\16\1\130"+
    "\7\16\1\56\1\16\4\0\1\16\2\0\1\16\1\0"+
    "\3\16\15\0\20\16\4\0\1\56\12\16\1\56\1\16"+
    "\4\0\1\16\2\0\1\16\1\0\3\16\15\0\1\131"+
    "\17\16\4\0\1\56\6\16\1\132\3\16\1\56\1\16"+
    "\4\0\1\16\2\0\1\16\1\0\3\16\15\0\20\16"+
    "\4\0\1\56\12\16\1\56\1\16\4\0\1\16\2\0"+
    "\1\16\1\0\3\16\15\0\2\16\1\133\15\16\4\0"+
    "\1\56\12\16\1\56\1\16\4\0\1\16\2\0\1\16"+
    "\1\0\3\16\15\0\2\16\1\134\15\16\4\0\1\56"+
    "\12\16\1\56\1\16\4\0\1\16\2\0\1\16\1\0"+
    "\3\16\15\0\10\16\1\135\7\16\4\0\1\56\12\16"+
    "\1\56\1\16\4\0\1\16\2\0\1\16\1\0\3\16"+
    "\15\0\1\16\1\136\16\16\4\0\1\56\10\16\1\137"+
    "\1\16\1\56\1\16\4\0\1\16\2\0\1\16\1\0"+
    "\3\16\15\0\20\16\4\0\1\56\12\16\1\56\1\16"+
    "\4\0\1\16\2\0\1\16\1\0\3\16\15\0\2\16"+
    "\1\140\15\16\4\0\1\56\12\16\1\56\1\16\4\0"+
    "\1\16\2\0\1\16\1\0\3\16\15\0\11\16\1\141"+
    "\6\16\4\0\1\56\12\16\1\56\1\16\4\0\1\16"+
    "\2\0\1\16\1\0\3\16\15\0\6\16\1\142\11\16"+
    "\4\0\1\56\12\16\1\56\1\16\4\0\1\16\2\0"+
    "\1\16\1\0\3\16\15\0\5\16\1\143\12\16\4\0"+
    "\1\56\12\16\1\56\1\16\4\0\1\16\2\0\1\16"+
    "\1\0\3\16\15\0\1\144\17\16\5\0\1\74\4\0"+
    "\2\74\1\0\1\74\4\0\4\74\5\0\1\74\16\0"+
    "\1\74\17\0\1\77\2\0\25\77\1\0\41\77\27\145"+
    "\1\146\42\145\5\0\12\101\1\0\1\101\4\0\1\101"+
    "\2\0\1\101\1\147\3\101\15\0\20\101\4\0\1\56"+
    "\10\16\1\150\1\16\1\56\1\16\4\0\1\16\2\0"+
    "\1\16\1\0\3\16\15\0\20\16\4\0\1\56\12\16"+
    "\1\56\1\16\4\0\1\16\2\0\1\16\1\0\3\16"+
    "\15\0\1\16\1\151\16\16\4\0\1\56\12\16\1\56"+
    "\1\16\4\0\1\16\2\0\1\16\1\0\3\16\15\0"+
    "\14\16\1\152\3\16\4\0\1\56\12\16\1\56\1\16"+
    "\4\0\1\16\2\0\1\16\1\0\3\16\15\0\3\16"+
    "\1\153\14\16\4\0\1\56\5\16\1\154\4\16\1\56"+
    "\1\16\4\0\1\16\2\0\1\16\1\0\3\16\15\0"+
    "\14\16\1\155\3\16\4\0\1\56\12\16\1\56\1\16"+
    "\4\0\1\16\2\0\1\16\1\0\3\16\15\0\5\16"+
    "\1\156\12\16\4\0\1\56\12\16\1\56\1\16\4\0"+
    "\1\16\2\0\1\16\1\0\3\16\15\0\1\157\17\16"+
    "\4\0\1\56\10\16\1\160\1\16\1\56\1\16\4\0"+
    "\1\16\2\0\1\16\1\0\3\16\15\0\20\16\4\0"+
    "\1\56\12\16\1\56\1\16\4\0\1\16\2\0\1\16"+
    "\1\0\3\16\15\0\5\16\1\161\12\16\4\0\1\56"+
    "\12\16\1\56\1\16\4\0\1\16\2\0\1\16\1\0"+
    "\3\16\15\0\14\16\1\162\3\16\4\0\1\56\7\16"+
    "\1\163\2\16\1\56\1\16\4\0\1\16\2\0\1\16"+
    "\1\0\3\16\15\0\20\16\4\0\1\56\7\16\1\164"+
    "\2\16\1\56\1\16\4\0\1\16\2\0\1\16\1\0"+
    "\3\16\15\0\20\16\4\0\1\56\12\16\1\56\1\16"+
    "\4\0\1\16\2\0\1\16\1\0\3\16\15\0\11\16"+
    "\1\165\6\16\4\0\1\56\12\16\1\56\1\16\4\0"+
    "\1\16\2\0\1\16\1\0\3\16\15\0\1\166\17\16"+
    "\4\0\1\56\12\16\1\56\1\16\4\0\1\16\2\0"+
    "\1\16\1\0\3\16\15\0\15\16\1\167\2\16\4\0"+
    "\1\56\12\16\1\56\1\16\4\0\1\16\2\0\1\16"+
    "\1\0\3\16\15\0\1\16\1\170\16\16\4\0\1\56"+
    "\7\16\1\171\2\16\1\56\1\16\4\0\1\16\2\0"+
    "\1\16\1\0\3\16\15\0\20\16\7\0\1\172\75\0"+
    "\1\173\63\0\2\125\11\0\1\55\4\0\1\125\27\0"+
    "\1\55\21\0\2\127\16\0\1\127\50\0\1\56\3\16"+
    "\1\174\6\16\1\56\1\16\4\0\1\16\2\0\1\16"+
    "\1\0\3\16\15\0\20\16\4\0\1\56\7\16\1\175"+
    "\2\16\1\56\1\16\4\0\1\16\2\0\1\16\1\0"+
    "\3\16\15\0\20\16\4\0\1\56\12\16\1\56\1\16"+
    "\4\0\1\16\2\0\1\16\1\0\3\16\15\0\2\16"+
    "\1\176\15\16\4\0\1\56\12\16\1\56\1\16\4\0"+
    "\1\16\2\0\1\16\1\0\3\16\15\0\7\16\1\177"+
    "\10\16\4\0\1\56\12\16\1\56\1\16\4\0\1\16"+
    "\2\0\1\16\1\0\3\16\15\0\3\16\1\200\14\16"+
    "\4\0\1\56\3\16\1\201\6\16\1\56\1\16\4\0"+
    "\1\16\2\0\1\16\1\0\3\16\15\0\20\16\4\0"+
    "\1\56\12\16\1\56\1\16\4\0\1\16\2\0\1\16"+
    "\1\0\3\16\15\0\1\16\1\202\16\16\4\0\1\56"+
    "\12\16\1\56\1\16\4\0\1\16\2\0\1\16\1\0"+
    "\3\16\15\0\3\16\1\203\14\16\4\0\1\56\12\16"+
    "\1\56\1\16\4\0\1\16\2\0\1\16\1\0\3\16"+
    "\15\0\3\16\1\204\14\16\4\0\1\56\12\16\1\56"+
    "\1\16\4\0\1\16\2\0\1\16\1\0\3\16\15\0"+
    "\1\16\1\205\16\16\27\145\1\206\42\145\26\207\1\210"+
    "\1\211\42\207\4\0\1\56\12\16\1\56\1\16\4\0"+
    "\1\16\2\0\1\16\1\0\3\16\15\0\3\16\1\212"+
    "\14\16\4\0\1\56\12\16\1\56\1\16\4\0\1\16"+
    "\2\0\1\16\1\0\3\16\15\0\2\16\1\213\15\16"+
    "\4\0\1\56\12\16\1\56\1\16\4\0\1\16\2\0"+
    "\1\16\1\0\3\16\15\0\1\16\1\214\16\16\4\0"+
    "\1\56\12\16\1\56\1\16\4\0\1\16\2\0\1\16"+
    "\1\0\3\16\15\0\13\16\1\215\4\16\4\0\1\56"+
    "\12\16\1\56\1\16\4\0\1\16\2\0\1\16\1\0"+
    "\3\16\15\0\12\16\1\216\5\16\4\0\1\56\3\16"+
    "\1\217\6\16\1\56\1\16\4\0\1\16\2\0\1\16"+
    "\1\0\3\16\15\0\20\16\4\0\1\56\12\16\1\56"+
    "\1\16\4\0\1\16\2\0\1\16\1\0\3\16\15\0"+
    "\6\16\1\220\11\16\4\0\1\56\12\16\1\56\1\16"+
    "\4\0\1\16\2\0\1\16\1\0\3\16\15\0\1\16"+
    "\1\221\16\16\4\0\1\56\12\16\1\56\1\16\4\0"+
    "\1\16\2\0\1\16\1\0\3\16\15\0\3\16\1\222"+
    "\14\16\4\0\1\56\12\16\1\56\1\16\4\0\1\16"+
    "\2\0\1\16\1\0\1\16\1\223\1\16\15\0\20\16"+
    "\4\0\1\56\7\16\1\224\2\16\1\56\1\16\4\0"+
    "\1\16\2\0\1\16\1\0\3\16\15\0\20\16\4\0"+
    "\1\56\12\16\1\56\1\16\4\0\1\16\2\0\1\16"+
    "\1\0\3\16\15\0\1\16\1\225\16\16\4\0\1\56"+
    "\12\16\1\56\1\16\4\0\1\16\2\0\1\16\1\0"+
    "\3\16\15\0\4\16\1\226\13\16\4\0\1\56\7\16"+
    "\1\227\2\16\1\56\1\16\4\0\1\16\2\0\1\16"+
    "\1\0\3\16\15\0\20\16\4\0\1\56\12\16\1\56"+
    "\1\16\4\0\1\16\2\0\1\16\1\0\3\16\15\0"+
    "\3\16\1\230\14\16\4\0\1\56\10\16\1\231\1\16"+
    "\1\56\1\16\4\0\1\16\2\0\1\16\1\0\3\16"+
    "\15\0\20\16\4\0\1\56\12\16\1\56\1\16\4\0"+
    "\1\16\2\0\1\16\1\0\3\16\15\0\4\16\1\232"+
    "\13\16\14\0\1\233\61\0\1\56\11\16\1\234\1\56"+
    "\1\16\4\0\1\16\2\0\1\16\1\0\3\16\15\0"+
    "\20\16\4\0\1\56\5\16\1\235\4\16\1\56\1\16"+
    "\4\0\1\16\2\0\1\16\1\0\3\16\15\0\20\16"+
    "\4\0\1\56\12\16\1\56\1\16\4\0\1\16\2\0"+
    "\1\16\1\0\3\16\15\0\3\16\1\236\14\16\4\0"+
    "\1\56\12\16\1\56\1\16\4\0\1\16\2\0\1\16"+
    "\1\0\3\16\15\0\4\16\1\237\13\16\4\0\1\56"+
    "\10\16\1\240\1\16\1\56\1\16\4\0\1\16\2\0"+
    "\1\16\1\0\3\16\15\0\20\16\4\0\1\56\12\16"+
    "\1\56\1\16\4\0\1\16\2\0\1\16\1\0\3\16"+
    "\15\0\1\241\17\16\4\0\1\56\12\16\1\56\1\16"+
    "\4\0\1\16\2\0\1\16\1\0\3\16\15\0\7\16"+
    "\1\242\7\16\1\243\4\0\1\56\12\16\1\56\1\16"+
    "\4\0\1\16\2\0\1\16\1\0\3\16\15\0\13\16"+
    "\1\244\4\16\26\145\1\245\1\206\42\145\27\207\1\211"+
    "\70\207\1\246\1\211\42\207\4\0\1\56\12\16\1\56"+
    "\1\16\4\0\1\16\2\0\1\16\1\0\3\16\15\0"+
    "\7\16\1\247\10\16\4\0\1\56\12\16\1\56\1\16"+
    "\4\0\1\16\2\0\1\16\1\0\3\16\15\0\3\16"+
    "\1\250\14\16\4\0\1\56\12\16\1\56\1\16\4\0"+
    "\1\16\2\0\1\16\1\0\3\16\15\0\1\251\17\16"+
    "\4\0\1\56\3\16\1\252\6\16\1\56\1\16\4\0"+
    "\1\16\2\0\1\16\1\0\3\16\15\0\20\16\4\0"+
    "\1\56\12\16\1\56\1\16\4\0\1\16\2\0\1\16"+
    "\1\0\3\16\15\0\2\16\1\253\15\16\4\0\1\56"+
    "\12\16\1\56\1\16\4\0\1\16\2\0\1\16\1\0"+
    "\3\16\15\0\1\254\17\16\4\0\1\56\12\16\1\56"+
    "\1\16\4\0\1\16\2\0\1\16\1\0\3\16\15\0"+
    "\2\16\1\255\15\16\4\0\1\56\12\16\1\56\1\16"+
    "\4\0\1\16\2\0\1\16\1\0\3\16\15\0\6\16"+
    "\1\256\11\16\4\0\1\56\5\16\1\257\4\16\1\56"+
    "\1\16\4\0\1\16\2\0\1\16\1\0\3\16\15\0"+
    "\20\16\4\0\1\56\5\16\1\260\4\16\1\56\1\16"+
    "\4\0\1\16\2\0\1\16\1\0\3\16\15\0\20\16"+
    "\4\0\1\56\12\16\1\56\1\16\4\0\1\16\2\0"+
    "\1\16\1\0\3\16\15\0\6\16\1\261\11\16\4\0"+
    "\1\56\12\16\1\56\1\16\4\0\1\16\2\0\1\16"+
    "\1\0\3\16\15\0\1\16\1\262\16\16\12\0\1\263"+
    "\63\0\1\56\7\16\1\264\2\16\1\56\1\16\4\0"+
    "\1\16\2\0\1\16\1\0\3\16\15\0\20\16\4\0"+
    "\1\56\10\16\1\265\1\16\1\56\1\16\4\0\1\16"+
    "\2\0\1\16\1\0\3\16\15\0\20\16\4\0\1\56"+
    "\10\16\1\266\1\16\1\56\1\16\4\0\1\16\2\0"+
    "\1\16\1\0\3\16\15\0\20\16\4\0\1\56\12\16"+
    "\1\56\1\16\4\0\1\16\2\0\1\16\1\0\3\16"+
    "\15\0\6\16\1\267\11\16\4\0\1\56\12\16\1\56"+
    "\1\16\4\0\1\16\2\0\1\16\1\0\3\16\15\0"+
    "\7\16\1\270\10\16\4\0\1\56\3\16\1\271\6\16"+
    "\1\56\1\16\4\0\1\16\2\0\1\16\1\0\3\16"+
    "\15\0\20\16\4\0\1\56\12\16\1\56\1\16\4\0"+
    "\1\16\2\0\1\16\1\0\3\16\15\0\4\16\1\272"+
    "\13\16\4\0\1\56\11\16\1\273\1\56\1\16\4\0"+
    "\1\16\2\0\1\16\1\0\3\16\15\0\20\16\4\0"+
    "\1\56\12\16\1\56\1\16\4\0\1\16\2\0\1\16"+
    "\1\0\3\16\15\0\17\16\1\274\4\0\1\56\12\16"+
    "\1\56\1\16\4\0\1\16\2\0\1\16\1\0\3\16"+
    "\15\0\3\16\1\275\14\16\4\0\1\56\3\16\1\276"+
    "\6\16\1\56\1\16\4\0\1\16\2\0\1\16\1\0"+
    "\3\16\15\0\20\16\4\0\1\56\12\16\1\56\1\16"+
    "\4\0\1\16\2\0\1\16\1\0\3\16\15\0\12\16"+
    "\1\277\5\16\4\0\1\56\3\16\1\300\6\16\1\56"+
    "\1\16\4\0\1\16\2\0\1\16\1\0\3\16\15\0"+
    "\20\16\4\0\1\56\12\16\1\56\1\16\4\0\1\16"+
    "\2\0\1\16\1\0\3\16\15\0\14\16\1\301\3\16"+
    "\14\0\1\302\61\0\1\56\10\16\1\303\1\16\1\56"+
    "\1\16\4\0\1\16\2\0\1\16\1\0\3\16\15\0"+
    "\20\16\4\0\1\56\3\16\1\304\6\16\1\56\1\16"+
    "\4\0\1\16\2\0\1\16\1\0\3\16\15\0\20\16"+
    "\4\0\1\56\12\16\1\56\1\16\4\0\1\16\2\0"+
    "\1\16\1\0\3\16\15\0\7\16\1\305\10\16\4\0"+
    "\1\56\5\16\1\306\4\16\1\56\1\16\4\0\1\16"+
    "\2\0\1\16\1\0\3\16\15\0\20\16\4\0\1\56"+
    "\10\16\1\307\1\16\1\56\1\16\4\0\1\16\2\0"+
    "\1\16\1\0\3\16\15\0\20\16\4\0\1\56\12\16"+
    "\1\56\1\16\4\0\1\16\2\0\1\16\1\0\3\16"+
    "\15\0\2\16\1\310\15\16\4\0\1\56\12\16\1\56"+
    "\1\16\4\0\1\16\2\0\1\16\1\0\3\16\15\0"+
    "\1\16\1\311\16\16\15\0\1\312\60\0\1\56\11\16"+
    "\1\130\1\56\1\16\4\0\1\16\2\0\1\16\1\0"+
    "\3\16\15\0\20\16\4\0\1\56\12\16\1\56\1\16"+
    "\4\0\1\16\2\0\1\16\1\0\3\16\15\0\6\16"+
    "\1\313\11\16\4\0\1\56\7\16\1\314\2\16\1\56"+
    "\1\16\4\0\1\16\2\0\1\16\1\0\3\16\15\0"+
    "\20\16\4\0\1\56\12\16\1\56\1\16\4\0\1\16"+
    "\2\0\1\16\1\0\3\16\15\0\2\16\1\315\15\16"+
    "\16\0\1\172\57\0\1\56\12\16\1\56\1\16\4\0"+
    "\1\16\2\0\1\16\1\0\3\16\15\0\11\16\1\316"+
    "\6\16\4\0\1\56\12\16\1\56\1\16\4\0\1\16"+
    "\2\0\1\16\1\0\3\16\15\0\6\16\1\317\11\16"+
    "\4\0\1\56\12\16\1\56\1\16\4\0\1\16\2\0"+
    "\1\16\1\0\3\16\15\0\17\16\1\320\4\0\1\56"+
    "\12\16\1\56\1\16\4\0\1\16\2\0\1\16\1\0"+
    "\3\16\15\0\3\16\1\321\14\16\4\0\1\56\12\16"+
    "\1\56\1\16\4\0\1\16\2\0\1\16\1\0\3\16"+
    "\15\0\6\16\1\322\11\16\4\0\1\56\12\16\1\56"+
    "\1\16\4\0\1\16\2\0\1\16\1\0\3\16\15\0"+
    "\7\16\1\323\10\16\4\0\1\56\12\16\1\56\1\16"+
    "\4\0\1\16\2\0\1\16\1\0\3\16\15\0\7\16"+
    "\1\324\10\16\4\0\1\56\10\16\1\325\1\16\1\56"+
    "\1\16\4\0\1\16\2\0\1\16\1\0\3\16\15\0"+
    "\20\16\4\0\1\56\3\16\1\326\6\16\1\56\1\16"+
    "\4\0\1\16\2\0\1\16\1\0\3\16\15\0\20\16"+
    "\4\0\1\56\12\16\1\56\1\16\4\0\1\16\2\0"+
    "\1\16\1\0\3\16\15\0\6\16\1\327\11\16\4\0"+
    "\1\56\12\16\1\56\1\16\4\0\1\16\2\0\1\16"+
    "\1\0\3\16\15\0\11\16\1\330\6\16\4\0\1\56"+
    "\12\16\1\56\1\16\4\0\1\16\2\0\1\16\1\0"+
    "\3\16\15\0\17\16\1\331\4\0\1\56\12\16\1\56"+
    "\1\16\4\0\1\16\2\0\1\16\1\0\3\16\15\0"+
    "\6\16\1\332\11\16\4\0\1\56\12\16\1\56\1\16"+
    "\4\0\1\16\2\0\1\16\1\0\3\16\15\0\7\16"+
    "\1\333\10\16";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9686];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\20\1\15\11\12\1\5\0\15\1\1\0"+
    "\1\11\1\0\1\1\2\0\21\1\2\0\1\1\1\0"+
    "\16\1\2\0\1\11\22\1\1\11\1\0\12\1\2\0"+
    "\1\1\1\0\21\1\1\0\11\1\2\11\14\1\1\0"+
    "\16\1\1\0\7\1\1\0\21\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[219];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _AvroIdlLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _AvroIdlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 53: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 54: break;
          case 3: 
            { return INT_LITERAL;
            } 
            // fall through
          case 55: break;
          case 4: 
            { return IDENTIFIER;
            } 
            // fall through
          case 56: break;
          case 5: 
            { return LEFT_BRACE;
            } 
            // fall through
          case 57: break;
          case 6: 
            { return RIGHT_BRACE;
            } 
            // fall through
          case 58: break;
          case 7: 
            { return LEFT_PAREN;
            } 
            // fall through
          case 59: break;
          case 8: 
            { return RIGHT_PAREN;
            } 
            // fall through
          case 60: break;
          case 9: 
            { return LEFT_BRACKET;
            } 
            // fall through
          case 61: break;
          case 10: 
            { return RIGHT_BRACKET;
            } 
            // fall through
          case 62: break;
          case 11: 
            { return LEFT_ANGLE;
            } 
            // fall through
          case 63: break;
          case 12: 
            { return RIGHT_ANGLE;
            } 
            // fall through
          case 64: break;
          case 13: 
            { return AT;
            } 
            // fall through
          case 65: break;
          case 14: 
            { return COMMA;
            } 
            // fall through
          case 66: break;
          case 15: 
            { return SEMICOLON;
            } 
            // fall through
          case 67: break;
          case 16: 
            { return COLON;
            } 
            // fall through
          case 68: break;
          case 17: 
            { return EQUALS;
            } 
            // fall through
          case 69: break;
          case 18: 
            { return STRING_LITERAL;
            } 
            // fall through
          case 70: break;
          case 19: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 71: break;
          case 20: 
            { return FLOAT_LITERAL;
            } 
            // fall through
          case 72: break;
          case 21: 
            { return INT;
            } 
            // fall through
          case 73: break;
          case 22: 
            { return IDL;
            } 
            // fall through
          case 74: break;
          case 23: 
            { return MAP;
            } 
            // fall through
          case 75: break;
          case 24: 
            { return NULL;
            } 
            // fall through
          case 76: break;
          case 25: 
            { return TRUE;
            } 
            // fall through
          case 77: break;
          case 26: 
            { return BLOCK_COMMENT;
            } 
            // fall through
          case 78: break;
          case 27: 
            { return LONG;
            } 
            // fall through
          case 79: break;
          case 28: 
            { return ENUM;
            } 
            // fall through
          case 80: break;
          case 29: 
            { return DATE;
            } 
            // fall through
          case 81: break;
          case 30: 
            { return UUID;
            } 
            // fall through
          case 82: break;
          case 31: 
            { return VOID;
            } 
            // fall through
          case 83: break;
          case 32: 
            { return ARRAY;
            } 
            // fall through
          case 84: break;
          case 33: 
            { return FALSE;
            } 
            // fall through
          case 85: break;
          case 34: 
            { return FIXED;
            } 
            // fall through
          case 86: break;
          case 35: 
            { return FLOAT;
            } 
            // fall through
          case 87: break;
          case 36: 
            { return DOC_COMMENT;
            } 
            // fall through
          case 88: break;
          case 37: 
            { return BYTES;
            } 
            // fall through
          case 89: break;
          case 38: 
            { return ERROR;
            } 
            // fall through
          case 90: break;
          case 39: 
            { return UNION;
            } 
            // fall through
          case 91: break;
          case 40: 
            { return IMPORT;
            } 
            // fall through
          case 92: break;
          case 41: 
            { return THROWS;
            } 
            // fall through
          case 93: break;
          case 42: 
            { return RECORD;
            } 
            // fall through
          case 94: break;
          case 43: 
            { return ONEWAY;
            } 
            // fall through
          case 95: break;
          case 44: 
            { return DOUBLE;
            } 
            // fall through
          case 96: break;
          case 45: 
            { return STRING;
            } 
            // fall through
          case 97: break;
          case 46: 
            { return SCHEMA;
            } 
            // fall through
          case 98: break;
          case 47: 
            { return TIME_MS;
            } 
            // fall through
          case 99: break;
          case 48: 
            { return BOOLEAN;
            } 
            // fall through
          case 100: break;
          case 49: 
            { return DECIMAL;
            } 
            // fall through
          case 101: break;
          case 50: 
            { return PROTOCOL;
            } 
            // fall through
          case 102: break;
          case 51: 
            { return TIMESTAMP_MS;
            } 
            // fall through
          case 103: break;
          case 52: 
            { return LOCAL_TIMESTAMP_MS;
            } 
            // fall through
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _AvroIdlLexer.flex

package opwvhk.intellij.avro_idl.syntax;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static opwvhk.intellij.avro_idl.psi.AvroIdlTypes.*;


public class _AvroIdlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00\1\u5000"+
    "\1\u5100\1\u5200\3\u0100\1\u5300\1\u5400\1\u5500\12\u1f00\4\u0100"+
    "\1\u5600\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900"+
    "\2\u1f00\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00"+
    "\42\u1f00\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\24\u1f00\1\u6200"+
    "\1\u6300\1\u1f00\1\u6400\1\u6500\1\u6600\1\u6700\2\u1f00\1\u6800"+
    "\5\u1f00\1\u6900\1\u6a00\1\u6b00\5\u1f00\1\u6c00\1\u6d00\2\u1f00"+
    "\1\u6e00\1\u1f00\1\u6f00\14\u1f00\1\u7000\4\u1f00\246\u0100\1\u7100"+
    "\20\u0100\1\u7200\1\u7300\25\u0100\1\u7400\34\u0100\1\u7500\14\u1f00"+
    "\2\u0100\1\u7600\5\u1f00\23\u0100\1\u7700\u0aec\u1f00\1\u7800\1\u7900"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\16\0\4\4\1\1"+
    "\1\4\1\5\1\4\1\6\2\4\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\7\21"+
    "\2\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\3\32\1\33\1\34\1\33\2\6\1\35\2\6\1\36"+
    "\1\6\1\37\1\6\1\40\7\6\1\41\2\6\1\42"+
    "\1\43\1\44\1\4\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\2\6\1\60"+
    "\1\61\1\62\1\63\1\64\1\6\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\6\1\75\1\4"+
    "\1\76\1\4\6\0\1\77\32\0\1\1\1\4\4\6"+
    "\4\4\1\6\2\4\1\0\7\4\1\6\4\4\1\6"+
    "\5\4\27\6\1\4\37\6\1\4\u01ca\6\4\4\14\6"+
    "\16\4\5\6\7\4\1\6\1\4\1\6\21\4\160\0"+
    "\5\6\1\4\2\6\2\4\4\6\1\4\1\6\6\4"+
    "\1\6\1\4\3\6\1\4\1\6\1\4\24\6\1\4"+
    "\123\6\1\4\213\6\1\4\5\0\2\4\246\6\1\4"+
    "\46\6\2\4\1\6\6\4\51\6\6\4\1\6\1\4"+
    "\55\0\1\4\1\0\1\4\2\0\1\4\2\0\1\4"+
    "\1\0\10\4\33\6\4\4\4\6\15\4\6\0\5\4"+
    "\1\6\4\4\13\0\1\4\1\0\3\4\53\6\37\0"+
    "\4\4\2\6\1\0\143\6\1\4\1\6\10\0\1\4"+
    "\6\0\2\6\2\0\1\4\4\0\2\6\12\0\3\6"+
    "\2\4\1\6\17\4\1\0\1\6\1\0\36\6\33\0"+
    "\2\4\131\6\13\0\1\6\16\4\12\0\41\6\11\0"+
    "\2\6\4\4\1\6\2\4\1\0\30\6\4\0\1\6"+
    "\11\0\1\6\3\0\1\6\5\0\22\4\31\6\3\0"+
    "\4\4\13\6\65\4\25\6\1\4\22\6\13\4\61\0"+
    "\66\6\3\0\1\6\22\0\1\6\7\0\12\6\2\0"+
    "\2\4\12\0\1\4\20\6\3\0\1\4\10\6\2\4"+
    "\2\6\2\4\26\6\1\4\7\6\1\4\1\6\3\4"+
    "\4\6\2\4\1\0\1\6\7\0\2\4\2\0\2\4"+
    "\3\0\1\6\10\4\1\0\4\4\2\6\1\4\3\6"+
    "\2\0\2\4\12\0\4\6\7\4\2\6\1\4\1\0"+
    "\2\4\3\0\1\4\6\6\4\4\2\6\2\4\26\6"+
    "\1\4\7\6\1\4\2\6\1\4\2\6\1\4\2\6"+
    "\2\4\1\0\1\4\5\0\4\4\2\0\2\4\3\0"+
    "\3\4\1\0\7\4\4\6\1\4\1\6\7\4\14\0"+
    "\3\6\1\0\13\4\3\0\1\4\11\6\1\4\3\6"+
    "\1\4\26\6\1\4\7\6\1\4\2\6\1\4\5\6"+
    "\2\4\1\0\1\6\10\0\1\4\3\0\1\4\3\0"+
    "\2\4\1\6\17\4\2\6\2\0\2\4\12\0\1\4"+
    "\1\6\7\4\1\6\6\0\1\4\3\0\1\4\10\6"+
    "\2\4\2\6\2\4\26\6\1\4\7\6\1\4\2\6"+
    "\1\4\5\6\2\4\1\0\1\6\7\0\2\4\2\0"+
    "\2\4\3\0\7\4\3\0\4\4\2\6\1\4\3\6"+
    "\2\0\2\4\12\0\1\4\1\6\20\4\1\0\1\6"+
    "\1\4\6\6\3\4\3\6\1\4\4\6\3\4\2\6"+
    "\1\4\1\6\1\4\2\6\3\4\2\6\3\4\3\6"+
    "\3\4\14\6\4\4\5\0\3\4\3\0\1\4\4\0"+
    "\2\4\1\6\6\4\1\0\16\4\12\0\11\4\1\6"+
    "\6\4\5\0\10\6\1\4\3\6\1\4\27\6\1\4"+
    "\20\6\3\4\1\6\7\0\1\4\3\0\1\4\4\0"+
    "\7\4\2\0\1\4\3\6\5\4\2\6\2\0\2\4"+
    "\12\0\20\4\1\6\3\0\1\4\10\6\1\4\3\6"+
    "\1\4\27\6\1\4\12\6\1\4\5\6\2\4\1\0"+
    "\1\6\7\0\1\4\3\0\1\4\4\0\7\4\2\0"+
    "\7\4\1\6\1\4\2\6\2\0\2\4\12\0\1\4"+
    "\2\6\15\4\4\0\11\6\1\4\3\6\1\4\51\6"+
    "\2\0\1\6\7\0\1\4\3\0\1\4\4\0\1\6"+
    "\5\4\3\6\1\0\7\4\3\6\2\0\2\4\12\0"+
    "\12\4\6\6\1\4\3\0\1\4\22\6\3\4\30\6"+
    "\1\4\11\6\1\4\1\6\2\4\7\6\3\4\1\0"+
    "\4\4\6\0\1\4\1\0\1\4\10\0\6\4\12\0"+
    "\2\4\2\0\15\4\60\6\1\0\2\6\7\0\4\4"+
    "\10\6\10\0\1\4\12\0\47\4\2\6\1\4\1\6"+
    "\1\4\5\6\1\4\30\6\1\4\1\6\1\4\12\6"+
    "\1\0\2\6\11\0\1\6\2\4\5\6\1\4\1\6"+
    "\1\4\6\0\2\4\12\0\2\4\4\6\40\4\1\6"+
    "\27\4\2\0\6\4\12\0\13\4\1\0\1\4\1\0"+
    "\1\4\1\0\4\4\2\0\10\6\1\4\44\6\4\4"+
    "\24\0\1\4\2\0\5\6\13\0\1\4\44\0\11\4"+
    "\1\0\71\4\53\6\24\0\1\6\12\0\6\4\6\6"+
    "\4\0\4\6\3\0\1\6\3\0\2\6\7\0\3\6"+
    "\4\0\15\6\14\0\1\6\17\0\2\4\46\6\1\4"+
    "\1\6\5\4\1\6\2\4\53\6\1\4\115\6\1\4"+
    "\4\6\2\4\7\6\1\4\1\6\1\4\4\6\2\4"+
    "\51\6\1\4\4\6\2\4\41\6\1\4\4\6\2\4"+
    "\7\6\1\4\1\6\1\4\4\6\2\4\17\6\1\4"+
    "\71\6\1\4\4\6\2\4\103\6\2\4\3\0\40\4"+
    "\20\6\20\4\126\6\2\4\6\6\3\4\u016c\6\2\4"+
    "\21\6\1\1\32\6\5\4\113\6\3\4\13\6\7\4"+
    "\15\6\1\4\4\6\3\0\13\4\22\6\3\0\13\4"+
    "\22\6\2\0\14\4\15\6\1\4\3\6\1\4\2\0"+
    "\14\4\64\6\40\0\3\4\1\6\3\4\2\6\1\0"+
    "\2\4\12\0\41\4\4\0\1\4\12\0\6\4\131\6"+
    "\7\4\5\6\2\0\42\6\1\0\1\6\5\4\106\6"+
    "\12\4\37\6\1\4\14\0\4\4\14\0\12\4\12\0"+
    "\36\6\2\4\5\6\13\4\54\6\4\4\32\6\6\4"+
    "\12\0\46\4\27\6\5\0\4\4\65\6\12\0\1\4"+
    "\35\0\2\4\13\0\6\4\12\0\15\4\1\6\10\4"+
    "\16\0\1\4\2\0\77\4\5\0\57\6\21\0\7\6"+
    "\4\4\12\0\21\4\11\0\14\4\3\0\36\6\15\0"+
    "\2\6\12\0\54\6\16\0\14\4\44\6\24\0\10\4"+
    "\12\0\3\4\3\6\12\0\44\6\2\4\11\6\7\4"+
    "\53\6\2\4\3\6\20\4\3\0\1\4\25\0\4\6"+
    "\1\0\6\6\1\0\2\6\3\0\1\6\5\4\300\6"+
    "\72\0\1\4\5\0\26\6\2\4\6\6\2\4\46\6"+
    "\2\4\6\6\2\4\10\6\1\4\1\6\1\4\1\6"+
    "\1\4\1\6\1\4\37\6\2\4\65\6\1\4\7\6"+
    "\1\4\1\6\3\4\3\6\1\4\7\6\3\4\4\6"+
    "\2\4\6\6\4\4\15\6\5\4\3\6\1\4\7\6"+
    "\3\4\13\1\5\0\30\4\2\3\5\0\1\1\17\4"+
    "\2\6\23\4\1\6\12\4\1\1\5\0\1\4\12\0"+
    "\1\4\1\6\15\4\1\6\20\4\15\6\3\4\40\6"+
    "\20\4\15\0\4\4\1\0\3\4\14\0\21\4\1\6"+
    "\4\4\1\6\2\4\12\6\1\4\1\6\3\4\5\6"+
    "\6\4\1\6\1\4\1\6\1\4\1\6\1\4\4\6"+
    "\1\4\13\6\2\4\4\6\5\4\5\6\4\4\1\6"+
    "\21\4\51\6\u0177\4\57\6\1\4\57\6\1\4\205\6"+
    "\6\4\4\6\3\0\2\6\14\4\46\6\1\4\1\6"+
    "\5\4\1\6\2\4\70\6\7\4\1\6\17\4\1\0"+
    "\27\6\11\4\7\6\1\4\7\6\1\4\7\6\1\4"+
    "\7\6\1\4\7\6\1\4\7\6\1\4\7\6\1\4"+
    "\7\6\1\4\40\0\57\4\1\6\320\4\1\1\4\4"+
    "\3\6\31\4\11\6\6\0\1\4\5\6\2\4\5\6"+
    "\4\4\126\6\2\4\2\0\2\4\3\6\1\4\132\6"+
    "\1\4\4\6\5\4\53\6\1\4\136\6\21\4\40\6"+
    "\60\4\320\6\100\4\375\6\3\4\215\6\103\4\56\6"+
    "\2\4\15\6\3\4\20\6\12\0\2\6\24\4\57\6"+
    "\1\0\4\4\12\0\1\4\37\6\2\0\120\6\2\0"+
    "\45\4\11\6\2\4\147\6\2\4\65\6\2\4\11\6"+
    "\52\4\15\6\1\0\3\6\1\0\4\6\1\0\27\6"+
    "\5\0\4\4\1\0\13\4\1\6\7\4\64\6\14\4"+
    "\2\0\62\6\22\0\12\4\12\0\6\4\22\0\6\6"+
    "\3\4\1\6\1\4\2\6\13\0\34\6\10\0\2\4"+
    "\27\6\15\0\14\4\35\6\3\4\4\0\57\6\16\0"+
    "\16\4\1\6\12\0\6\4\5\6\1\0\12\6\12\0"+
    "\5\6\1\4\51\6\16\0\11\4\3\6\1\0\10\6"+
    "\2\0\2\4\12\0\6\4\27\6\3\4\1\6\3\0"+
    "\62\6\1\0\1\6\3\0\2\6\2\0\5\6\2\0"+
    "\1\6\1\0\1\6\30\4\3\6\2\4\13\6\5\0"+
    "\2\4\3\6\2\0\12\4\6\6\2\4\6\6\2\4"+
    "\6\6\11\4\7\6\1\4\7\6\1\4\53\6\1\4"+
    "\16\6\6\4\163\6\10\0\1\4\2\0\2\4\12\0"+
    "\6\4\244\6\14\4\27\6\4\4\61\6\4\4\u0100\100"+
    "\156\6\2\4\152\6\46\4\7\6\14\4\5\6\5\4"+
    "\1\6\1\0\12\6\1\4\15\6\1\4\5\6\1\4"+
    "\1\6\1\4\2\6\1\4\2\6\1\4\154\6\41\4"+
    "\153\6\22\4\100\6\2\4\66\6\50\4\15\6\3\4"+
    "\20\0\20\4\20\0\3\4\2\6\30\4\3\6\31\4"+
    "\1\6\6\4\5\6\1\4\207\6\2\4\1\0\4\4"+
    "\1\6\13\4\12\0\7\4\32\6\4\4\1\6\1\4"+
    "\32\6\13\4\131\6\3\4\6\6\2\4\6\6\2\4"+
    "\6\6\2\4\3\6\3\4\2\6\3\4\2\6\22\4"+
    "\3\0\4\4\14\6\1\4\32\6\1\4\23\6\1\4"+
    "\2\6\1\4\17\6\2\4\16\6\42\4\173\6\105\4"+
    "\65\6\210\4\1\0\202\4\35\6\3\4\61\6\17\4"+
    "\1\0\37\4\40\6\15\4\36\6\5\4\46\6\5\0"+
    "\5\4\36\6\2\4\44\6\4\4\10\6\1\4\5\6"+
    "\52\4\236\6\2\4\12\0\6\4\44\6\4\4\44\6"+
    "\4\4\50\6\10\4\64\6\234\4\67\6\11\4\26\6"+
    "\12\4\10\6\230\4\6\6\2\4\1\6\1\4\54\6"+
    "\1\4\2\6\3\4\1\6\2\4\27\6\12\4\27\6"+
    "\11\4\37\6\101\4\23\6\1\4\2\6\12\4\26\6"+
    "\12\4\32\6\106\4\70\6\6\4\2\6\100\4\1\6"+
    "\3\0\1\4\2\0\5\4\4\0\4\6\1\4\3\6"+
    "\1\4\35\6\2\4\3\0\4\4\1\0\40\4\35\6"+
    "\3\4\35\6\43\4\10\6\1\4\34\6\2\0\31\4"+
    "\66\6\12\4\26\6\12\4\23\6\15\4\22\6\156\4"+
    "\111\6\67\4\63\6\15\4\63\6\15\4\44\6\4\0"+
    "\10\4\12\0\u0146\4\52\6\1\4\2\0\3\4\2\6"+
    "\116\4\35\6\12\4\1\6\10\4\26\6\13\0\137\4"+
    "\25\6\33\4\27\6\11\4\3\0\65\6\17\0\37\4"+
    "\12\0\17\4\4\0\55\6\13\0\2\4\1\0\17\4"+
    "\1\0\2\4\31\6\7\4\12\0\6\4\3\0\44\6"+
    "\16\0\1\4\12\0\4\4\1\6\2\0\1\6\10\4"+
    "\43\6\1\0\2\4\1\6\11\4\3\0\60\6\16\0"+
    "\4\6\4\4\4\0\1\4\14\0\1\6\1\4\1\6"+
    "\43\4\22\6\1\4\31\6\14\0\6\4\1\0\101\4"+
    "\7\6\1\4\1\6\1\4\4\6\1\4\17\6\1\4"+
    "\12\6\7\4\57\6\14\0\5\4\12\0\6\4\4\0"+
    "\1\4\10\6\2\4\2\6\2\4\26\6\1\4\7\6"+
    "\1\4\2\6\1\4\5\6\1\4\2\0\1\6\7\0"+
    "\2\4\2\0\2\4\3\0\2\4\1\6\6\4\1\0"+
    "\5\4\5\6\2\0\2\4\7\0\3\4\5\0\213\4"+
    "\65\6\22\0\4\6\5\4\12\0\4\4\1\0\3\6"+
    "\36\4\60\6\24\0\2\6\1\4\1\6\10\4\12\0"+
    "\246\4\57\6\7\0\2\4\11\0\27\4\4\6\2\0"+
    "\42\4\60\6\21\0\3\4\1\6\13\4\12\0\46\4"+
    "\53\6\15\0\1\6\7\4\12\0\66\4\33\6\2\4"+
    "\17\0\4\4\12\0\306\4\54\6\17\0\145\4\100\6"+
    "\12\0\25\4\10\6\2\4\1\6\2\4\10\6\1\4"+
    "\2\6\1\4\30\6\6\0\1\4\2\0\2\4\4\0"+
    "\1\6\1\0\1\6\2\0\14\4\12\0\106\4\10\6"+
    "\2\4\47\6\7\0\2\4\7\0\1\6\1\4\1\6"+
    "\1\0\33\4\1\6\12\0\50\6\7\0\1\6\4\0"+
    "\10\4\1\0\10\4\1\6\13\0\56\6\20\0\3\4"+
    "\1\6\42\4\71\6\7\4\11\6\1\4\45\6\10\0"+
    "\1\4\10\0\1\6\17\4\12\0\30\4\36\6\2\4"+
    "\26\0\1\4\16\0\111\4\7\6\1\4\2\6\1\4"+
    "\46\6\6\0\3\4\1\0\1\4\2\0\1\4\7\0"+
    "\1\6\1\0\10\4\12\0\6\4\6\6\1\4\2\6"+
    "\1\4\40\6\5\0\1\4\2\0\1\4\5\0\1\6"+
    "\7\4\12\0\u0136\4\23\6\4\0\271\4\1\6\54\4"+
    "\4\6\37\4\232\6\146\4\157\6\21\4\304\6\274\4"+
    "\57\6\1\4\11\0\307\4\107\6\271\4\71\6\7\4"+
    "\37\6\1\4\12\0\146\4\36\6\2\4\5\0\13\4"+
    "\60\6\7\0\11\4\4\6\14\4\12\0\11\4\25\6"+
    "\5\4\23\6\260\4\100\6\200\4\113\6\4\4\1\0"+
    "\1\6\67\0\7\4\4\0\15\6\100\4\2\6\1\4"+
    "\1\6\1\0\13\4\2\0\16\4\370\6\10\4\326\6"+
    "\52\4\11\6\367\4\37\6\61\4\3\6\21\4\4\6"+
    "\10\4\u018c\6\4\4\153\6\5\4\15\6\3\4\11\6"+
    "\7\4\12\6\3\4\2\0\1\4\4\0\301\4\5\0"+
    "\3\4\26\0\2\4\7\0\36\4\4\0\224\4\3\0"+
    "\273\4\125\6\1\4\107\6\1\4\2\6\2\4\1\6"+
    "\2\4\2\6\2\4\4\6\1\4\14\6\1\4\1\6"+
    "\1\4\7\6\1\4\101\6\1\4\4\6\2\4\10\6"+
    "\1\4\7\6\1\4\34\6\1\4\4\6\1\4\5\6"+
    "\1\4\1\6\3\4\7\6\1\4\u0154\6\2\4\31\6"+
    "\1\4\31\6\1\4\37\6\1\4\31\6\1\4\37\6"+
    "\1\4\31\6\1\4\37\6\1\4\31\6\1\4\37\6"+
    "\1\4\31\6\1\4\10\6\2\4\151\0\4\4\62\0"+
    "\10\4\1\0\16\4\1\0\26\4\5\0\1\4\17\0"+
    "\120\4\7\0\1\4\21\0\2\4\7\0\1\4\2\0"+
    "\1\4\5\0\325\4\55\6\3\4\7\0\7\6\2\4"+
    "\12\0\4\4\1\6\u0171\4\54\6\16\0\5\4\306\6"+
    "\13\4\7\0\51\4\104\6\7\0\1\6\4\4\12\0"+
    "\u0156\4\1\6\117\4\4\6\1\4\33\6\1\4\2\6"+
    "\1\4\1\6\2\4\1\6\1\4\12\6\1\4\4\6"+
    "\1\4\1\6\1\4\1\6\6\4\1\6\4\4\1\6"+
    "\1\4\1\6\1\4\1\6\1\4\3\6\1\4\2\6"+
    "\1\4\1\6\2\4\1\6\1\4\1\6\1\4\1\6"+
    "\1\4\1\6\1\4\1\6\1\4\2\6\1\4\1\6"+
    "\2\4\4\6\1\4\7\6\1\4\4\6\1\4\4\6"+
    "\1\4\1\6\1\4\12\6\1\4\21\6\5\4\3\6"+
    "\1\4\5\6\1\4\21\6\u0134\4\12\0\6\4\336\6"+
    "\42\4\65\6\13\4\336\6\2\4\u0182\6\16\4\u0131\6"+
    "\37\4\36\6\342\4\113\6\266\4\1\0\36\4\140\0"+
    "\200\4\360\0\20\4";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[31232];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\2\1\2\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\2\4\1\20\1\21\1\1\20\4\1\22"+
    "\1\23\1\3\5\0\1\24\1\25\1\26\1\10\1\0"+
    "\1\24\1\0\1\10\3\0\2\4\1\0\35\4\4\0"+
    "\1\27\1\30\1\0\1\24\2\0\1\10\1\0\1\4"+
    "\1\24\14\4\1\31\1\4\1\32\2\4\1\33\15\4"+
    "\5\0\1\24\1\0\4\4\1\34\2\4\1\35\6\4"+
    "\1\36\1\4\1\37\7\4\1\40\1\4\1\41\1\42"+
    "\3\0\1\43\1\0\1\44\1\0\1\4\1\45\1\4"+
    "\1\46\2\4\1\47\1\50\1\51\1\52\13\4\1\53"+
    "\3\0\3\4\1\54\1\55\2\4\1\56\1\4\1\57"+
    "\1\60\1\61\1\62\2\4\2\0\1\4\1\63\1\64"+
    "\3\4\1\65\1\4\2\0\2\4\1\66\1\4\1\0"+
    "\1\4\1\67\1\4\1\70\5\4\1\71\5\4\1\72";

  private static int [] zzUnpackAction() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\101\0\101\0\u0145"+
    "\0\101\0\u0186\0\u01c7\0\u0208\0\u0249\0\101\0\101\0\101"+
    "\0\101\0\101\0\101\0\u028a\0\u02cb\0\u030c\0\101\0\101"+
    "\0\u034d\0\u038e\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514"+
    "\0\u0555\0\u0596\0\u05d7\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c"+
    "\0\u075d\0\101\0\101\0\101\0\u079e\0\u07df\0\u0186\0\u0820"+
    "\0\u0861\0\u08a2\0\u08e3\0\u0924\0\u0965\0\u09a6\0\101\0\u09e7"+
    "\0\101\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae"+
    "\0\u0bef\0\u0c30\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75\0\u0db6"+
    "\0\u0df7\0\u0e38\0\u0e79\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe"+
    "\0\u0fff\0\u1040\0\u1081\0\u10c2\0\u1103\0\u1144\0\u1185\0\u11c6"+
    "\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b\0\u034d\0\u134c\0\u138d"+
    "\0\u13ce\0\u140f\0\u1450\0\u1491\0\u14d2\0\u1513\0\u1554\0\u1595"+
    "\0\u15d6\0\u0104\0\u1617\0\u1658\0\u1699\0\u16da\0\u171b\0\u175c"+
    "\0\u179d\0\u17de\0\u181f\0\u1860\0\u18a1\0\u18e2\0\u0104\0\u1923"+
    "\0\u0104\0\u1964\0\u19a5\0\u0104\0\u19e6\0\u1a27\0\u1a68\0\u1aa9"+
    "\0\u1aea\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1"+
    "\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37\0\u1e78\0\u1eb9"+
    "\0\u1efa\0\u1f3b\0\u1f7c\0\u1fbd\0\u0104\0\u1ffe\0\u203f\0\u0104"+
    "\0\u2080\0\u20c1\0\u2102\0\u2143\0\u2184\0\u21c5\0\u0104\0\u2206"+
    "\0\u0104\0\u2247\0\u2288\0\u22c9\0\u230a\0\u234b\0\u238c\0\u23cd"+
    "\0\u0104\0\u240e\0\u0104\0\u0104\0\u244f\0\u2490\0\u24d1\0\101"+
    "\0\u2512\0\101\0\u2553\0\u2594\0\u0104\0\u25d5\0\u0104\0\u2616"+
    "\0\u2657\0\u0104\0\u0104\0\u0104\0\u0104\0\u2698\0\u26d9\0\u271a"+
    "\0\u275b\0\u279c\0\u27dd\0\u281e\0\u285f\0\u28a0\0\u28e1\0\u2922"+
    "\0\u0104\0\u2963\0\u29a4\0\u29e5\0\u2a26\0\u2a67\0\u2aa8\0\u0104"+
    "\0\u0104\0\u2ae9\0\u2b2a\0\u0104\0\u2b6b\0\u0104\0\u0104\0\u0104"+
    "\0\u0104\0\u2bac\0\u2bed\0\u2c2e\0\u2c6f\0\u2cb0\0\u0104\0\u0104"+
    "\0\u2cf1\0\u2d32\0\u2d73\0\u0104\0\u2db4\0\u2df5\0\u2e36\0\u2e77"+
    "\0\u2eb8\0\u0104\0\u2ef9\0\u2f3a\0\u2f7b\0\u0104\0\u2fbc\0\101"+
    "\0\u2ffd\0\u303e\0\u307f\0\u30c0\0\u3101\0\u0104\0\u3142\0\u3183"+
    "\0\u31c4\0\u3205\0\u3246\0\u0104";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\2\1\4\1\5\1\2\1\6\1\7"+
    "\1\2\1\10\1\11\1\10\1\12\1\13\1\14\2\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\3\5"+
    "\1\25\1\5\1\26\2\5\1\27\1\2\1\30\1\5"+
    "\1\31\1\32\1\33\1\5\1\34\1\35\1\36\2\5"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\3\5\1\52\1\53\1\3\1\2"+
    "\102\0\3\3\73\0\1\3\1\0\2\4\1\0\2\4"+
    "\1\54\35\4\1\55\35\4\1\5\5\0\1\5\6\0"+
    "\2\56\1\0\3\5\7\0\10\5\3\0\1\5\1\0"+
    "\26\5\2\0\1\5\17\0\1\57\1\0\1\14\2\15"+
    "\12\0\1\60\1\0\1\61\61\0\3\62\70\0\1\63"+
    "\4\0\1\64\77\0\1\62\1\0\2\65\1\66\10\0"+
    "\1\67\1\70\1\0\1\71\2\0\1\72\10\0\1\67"+
    "\1\70\1\67\3\0\1\71\12\0\1\73\23\0\1\62"+
    "\1\0\3\15\10\0\1\67\1\70\1\0\1\71\13\0"+
    "\1\67\1\70\1\67\3\0\1\71\102\0\1\74\16\0"+
    "\1\5\5\0\1\5\6\0\2\56\1\0\3\5\7\0"+
    "\10\5\3\0\1\5\1\0\13\5\1\75\12\5\2\0"+
    "\1\5\1\0\1\5\5\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\1\76\25\5"+
    "\2\0\1\5\7\0\1\77\23\0\10\77\3\0\1\77"+
    "\1\0\26\77\4\0\1\5\5\0\1\5\6\0\2\56"+
    "\1\0\3\5\7\0\10\5\3\0\1\5\1\0\16\5"+
    "\1\100\7\5\2\0\1\5\1\0\1\5\5\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\5"+
    "\1\0\14\5\1\101\10\5\1\102\2\0\1\5\1\0"+
    "\1\5\5\0\1\5\6\0\2\56\1\0\3\5\7\0"+
    "\10\5\3\0\1\5\1\0\1\103\3\5\1\104\7\5"+
    "\1\105\11\5\2\0\1\5\1\0\1\5\5\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\5"+
    "\1\0\13\5\1\106\2\5\1\107\7\5\2\0\1\5"+
    "\1\0\1\5\5\0\1\5\6\0\2\56\1\0\3\5"+
    "\7\0\10\5\3\0\1\5\1\0\1\110\7\5\1\111"+
    "\1\112\14\5\2\0\1\5\1\0\1\5\5\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\5"+
    "\1\0\3\5\1\113\6\5\1\114\1\115\12\5\2\0"+
    "\1\5\1\0\1\5\5\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\14\5\1\116"+
    "\11\5\2\0\1\5\1\0\1\5\5\0\1\5\6\0"+
    "\2\56\1\0\3\5\7\0\10\5\3\0\1\5\1\0"+
    "\1\117\25\5\2\0\1\5\1\0\1\5\5\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\5"+
    "\1\0\1\120\20\5\1\121\4\5\2\0\1\5\1\0"+
    "\1\5\5\0\1\5\6\0\2\56\1\0\3\5\7\0"+
    "\10\5\3\0\1\5\1\0\13\5\1\122\12\5\2\0"+
    "\1\5\1\0\1\5\5\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\16\5\1\123"+
    "\7\5\2\0\1\5\1\0\1\5\5\0\1\5\6\0"+
    "\2\56\1\0\3\5\7\0\10\5\3\0\1\5\1\0"+
    "\4\5\1\124\21\5\2\0\1\5\1\0\1\5\5\0"+
    "\1\5\6\0\2\56\1\0\3\5\7\0\10\5\3\0"+
    "\1\5\1\0\2\5\1\125\15\5\1\126\5\5\2\0"+
    "\1\5\1\0\1\5\5\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\7\5\1\127"+
    "\1\130\5\5\1\131\7\5\2\0\1\5\1\0\1\5"+
    "\5\0\1\5\6\0\2\56\1\0\3\5\7\0\10\5"+
    "\3\0\1\5\1\0\13\5\1\132\5\5\1\133\4\5"+
    "\2\0\1\5\1\0\1\5\5\0\1\5\6\0\2\56"+
    "\1\0\3\5\7\0\10\5\3\0\1\5\1\0\14\5"+
    "\1\134\11\5\2\0\1\5\6\0\1\4\1\0\1\4"+
    "\10\0\2\4\21\0\1\4\4\0\1\4\3\0\1\4"+
    "\5\0\1\4\2\0\1\4\1\0\1\4\1\135\16\0"+
    "\1\5\23\0\10\5\3\0\1\5\1\136\26\5\66\0"+
    "\1\137\65\0\1\140\51\0\3\62\10\0\1\67\1\70"+
    "\15\0\1\67\1\70\1\67\24\0\12\141\1\142\66\141"+
    "\2\64\2\0\73\64\20\0\1\62\1\0\2\65\1\66"+
    "\10\0\1\67\1\70\1\0\1\71\13\0\1\67\1\70"+
    "\1\67\3\0\1\71\36\0\1\62\1\0\3\66\10\0"+
    "\1\67\1\70\15\0\1\67\1\70\1\67\37\0\1\143"+
    "\1\0\1\143\2\0\3\144\74\0\1\145\1\0\3\146"+
    "\7\0\3\146\12\0\6\146\42\0\1\145\1\0\3\147"+
    "\7\0\3\147\12\0\6\147\73\0\1\150\31\0\1\5"+
    "\5\0\1\5\6\0\2\56\1\0\3\5\7\0\10\5"+
    "\3\0\1\5\1\0\5\5\1\151\20\5\2\0\1\5"+
    "\1\0\1\5\5\0\1\5\6\0\2\56\1\0\3\5"+
    "\7\0\5\5\1\152\2\5\3\0\1\5\1\0\26\5"+
    "\2\0\1\5\1\0\1\77\5\0\1\77\11\0\3\77"+
    "\7\0\10\77\3\0\1\77\1\153\26\77\2\0\1\77"+
    "\1\0\1\5\5\0\1\5\6\0\2\56\1\0\3\5"+
    "\7\0\10\5\3\0\1\5\1\0\16\5\1\154\7\5"+
    "\2\0\1\5\1\0\1\5\5\0\1\5\6\0\2\56"+
    "\1\0\3\5\7\0\10\5\3\0\1\5\1\0\14\5"+
    "\1\155\11\5\2\0\1\5\1\0\1\5\5\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\5"+
    "\1\0\20\5\1\156\5\5\2\0\1\5\1\0\1\5"+
    "\5\0\1\5\6\0\2\56\1\0\3\5\7\0\10\5"+
    "\3\0\1\5\1\0\20\5\1\157\5\5\2\0\1\5"+
    "\1\0\1\5\5\0\1\5\6\0\2\56\1\0\3\5"+
    "\7\0\10\5\3\0\1\5\1\0\2\5\1\160\23\5"+
    "\2\0\1\5\1\0\1\5\5\0\1\5\6\0\2\56"+
    "\1\0\3\5\7\0\10\5\3\0\1\5\1\0\21\5"+
    "\1\161\4\5\2\0\1\5\1\0\1\5\5\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\5"+
    "\1\0\21\5\1\162\4\5\2\0\1\5\1\0\1\5"+
    "\5\0\1\5\6\0\2\56\1\0\3\5\7\0\10\5"+
    "\3\0\1\5\1\0\16\5\1\163\7\5\2\0\1\5"+
    "\1\0\1\5\5\0\1\5\6\0\2\56\1\0\3\5"+
    "\7\0\10\5\3\0\1\5\1\0\11\5\1\164\14\5"+
    "\2\0\1\5\1\0\1\5\5\0\1\5\6\0\2\56"+
    "\1\0\3\5\7\0\10\5\3\0\1\5\1\0\24\5"+
    "\1\165\1\5\2\0\1\5\1\0\1\5\5\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\5"+
    "\1\0\14\5\1\166\11\5\2\0\1\5\1\0\1\5"+
    "\5\0\1\5\6\0\2\56\1\0\3\5\7\0\10\5"+
    "\3\0\1\5\1\0\11\5\1\167\14\5\2\0\1\5"+
    "\1\0\1\5\5\0\1\5\6\0\2\56\1\0\3\5"+
    "\7\0\10\5\3\0\1\5\1\0\15\5\1\170\10\5"+
    "\2\0\1\5\1\0\1\5\5\0\1\5\6\0\2\56"+
    "\1\0\3\5\7\0\10\5\3\0\1\5\1\0\20\5"+
    "\1\171\5\5\2\0\1\5\1\0\1\5\5\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\5"+
    "\1\0\2\5\1\172\10\5\1\173\12\5\2\0\1\5"+
    "\1\0\1\5\5\0\1\5\6\0\2\56\1\0\3\5"+
    "\7\0\10\5\3\0\1\5\1\0\15\5\1\174\10\5"+
    "\2\0\1\5\1\0\1\5\5\0\1\5\6\0\2\56"+
    "\1\0\3\5\7\0\10\5\3\0\1\5\1\0\12\5"+
    "\1\175\13\5\2\0\1\5\1\0\1\5\5\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\5"+
    "\1\0\11\5\1\176\14\5\2\0\1\5\1\0\1\5"+
    "\5\0\1\5\6\0\2\56\1\0\3\5\7\0\10\5"+
    "\3\0\1\5\1\0\4\5\1\177\21\5\2\0\1\5"+
    "\1\0\1\5\5\0\1\5\6\0\2\56\1\0\3\5"+
    "\7\0\10\5\3\0\1\5\1\0\14\5\1\200\11\5"+
    "\2\0\1\5\1\0\1\5\5\0\1\5\6\0\2\56"+
    "\1\0\3\5\7\0\10\5\3\0\1\5\1\0\2\5"+
    "\1\201\23\5\2\0\1\5\1\0\1\5\5\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\5"+
    "\1\0\7\5\1\202\16\5\2\0\1\5\1\0\1\5"+
    "\5\0\1\5\6\0\2\56\1\0\3\5\7\0\10\5"+
    "\3\0\1\5\1\0\16\5\1\203\7\5\2\0\1\5"+
    "\1\0\1\5\5\0\1\5\6\0\2\56\1\0\3\5"+
    "\7\0\10\5\3\0\1\5\1\0\16\5\1\204\7\5"+
    "\2\0\1\5\1\0\1\5\5\0\1\5\6\0\2\56"+
    "\1\0\3\5\7\0\10\5\3\0\1\5\1\0\12\5"+
    "\1\205\13\5\2\0\1\5\1\0\1\5\5\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\5"+
    "\1\0\21\5\1\206\4\5\2\0\1\5\1\0\1\5"+
    "\5\0\1\5\6\0\2\56\1\0\3\5\7\0\10\5"+
    "\3\0\1\5\1\0\10\5\1\207\15\5\2\0\1\5"+
    "\1\0\1\5\5\0\1\5\6\0\2\56\1\0\3\5"+
    "\7\0\10\5\3\0\1\5\1\0\10\5\1\210\15\5"+
    "\2\0\1\5\1\0\1\5\5\0\1\5\6\0\2\56"+
    "\1\0\3\5\7\0\10\5\3\0\1\5\1\0\10\5"+
    "\1\211\15\5\2\0\1\5\21\0\3\212\7\0\3\212"+
    "\12\0\6\212\100\0\1\213\63\0\1\67\41\0\12\141"+
    "\1\214\66\141\12\142\1\215\66\142\20\0\3\144\76\0"+
    "\3\144\10\0\1\67\16\0\1\67\1\0\1\67\44\0"+
    "\3\216\7\0\3\216\12\0\6\216\42\0\1\216\1\0"+
    "\3\146\7\0\3\146\3\0\1\217\6\0\6\146\7\0"+
    "\1\217\32\0\1\216\1\0\3\147\7\0\3\147\1\0"+
    "\1\71\1\0\1\217\6\0\6\147\3\0\1\71\3\0"+
    "\1\217\75\0\1\220\17\0\1\5\5\0\1\5\6\0"+
    "\2\56\1\0\3\5\7\0\10\5\3\0\1\5\1\0"+
    "\10\5\1\221\15\5\2\0\1\5\16\0\2\56\62\0"+
    "\1\5\5\0\1\5\6\0\2\56\1\0\3\5\7\0"+
    "\10\5\3\0\1\5\1\0\1\222\25\5\2\0\1\5"+
    "\1\0\1\5\5\0\1\5\6\0\2\56\1\0\3\5"+
    "\7\0\10\5\3\0\1\5\1\0\11\5\1\223\14\5"+
    "\2\0\1\5\1\0\1\5\5\0\1\5\6\0\2\56"+
    "\1\0\3\5\7\0\10\5\3\0\1\5\1\0\4\5"+
    "\1\224\21\5\2\0\1\5\1\0\1\5\5\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\5"+
    "\1\0\4\5\1\225\21\5\2\0\1\5\1\0\1\5"+
    "\5\0\1\5\6\0\2\56\1\0\3\5\7\0\10\5"+
    "\3\0\1\5\1\0\10\5\1\226\15\5\2\0\1\5"+
    "\1\0\1\5\5\0\1\5\6\0\2\56\1\0\3\5"+
    "\7\0\10\5\3\0\1\5\1\0\1\5\1\227\24\5"+
    "\2\0\1\5\1\0\1\5\5\0\1\5\6\0\2\56"+
    "\1\0\3\5\7\0\10\5\3\0\1\5\1\0\12\5"+
    "\1\230\13\5\2\0\1\5\1\0\1\5\5\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\5"+
    "\1\0\14\5\1\231\11\5\2\0\1\5\1\0\1\5"+
    "\5\0\1\5\6\0\2\56\1\0\3\5\7\0\10\5"+
    "\3\0\1\5\1\0\17\5\1\232\6\5\2\0\1\5"+
    "\1\0\1\5\5\0\1\5\6\0\2\56\1\0\3\5"+
    "\7\0\10\5\3\0\1\5\1\0\4\5\1\233\21\5"+
    "\2\0\1\5\1\0\1\5\5\0\1\5\6\0\2\56"+
    "\1\0\3\5\7\0\10\5\3\0\1\5\1\0\1\234"+
    "\25\5\2\0\1\5\1\0\1\5\5\0\1\5\6\0"+
    "\2\56\1\0\3\5\7\0\10\5\3\0\1\5\1\0"+
    "\14\5\1\235\11\5\2\0\1\5\1\0\1\5\5\0"+
    "\1\5\6\0\2\56\1\0\3\5\7\0\10\5\3\0"+
    "\1\5\1\0\1\236\25\5\2\0\1\5\1\0\1\5"+
    "\5\0\1\5\6\0\2\56\1\0\3\5\7\0\10\5"+
    "\3\0\1\5\1\0\6\5\1\237\17\5\2\0\1\5"+
    "\1\0\1\5\5\0\1\5\6\0\2\56\1\0\3\5"+
    "\7\0\10\5\3\0\1\5\1\0\4\5\1\240\21\5"+
    "\2\0\1\5\1\0\1\5\5\0\1\5\6\0\2\56"+
    "\1\0\3\5\7\0\10\5\3\0\1\5\1\0\11\5"+
    "\1\241\14\5\2\0\1\5\1\0\1\5\5\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\5"+
    "\1\0\23\5\1\242\2\5\2\0\1\5\1\0\1\5"+
    "\5\0\1\5\6\0\2\56\1\0\3\5\7\0\10\5"+
    "\3\0\1\5\1\0\20\5\1\243\5\5\2\0\1\5"+
    "\1\0\1\5\5\0\1\5\6\0\2\56\1\0\3\5"+
    "\7\0\10\5\3\0\1\5\1\0\14\5\1\244\11\5"+
    "\2\0\1\5\1\0\1\5\5\0\1\5\6\0\2\56"+
    "\1\0\3\5\7\0\10\5\3\0\1\5\1\0\4\5"+
    "\1\245\21\5\2\0\1\5\1\0\1\5\5\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\5"+
    "\1\0\10\5\1\246\15\5\2\0\1\5\1\0\1\5"+
    "\5\0\1\5\6\0\2\56\1\0\3\5\7\0\10\5"+
    "\3\0\1\5\1\0\14\5\1\247\11\5\2\0\1\5"+
    "\1\0\1\5\5\0\1\5\6\0\2\56\1\0\3\5"+
    "\7\0\10\5\3\0\1\5\1\0\4\5\1\250\21\5"+
    "\2\0\1\5\1\0\1\5\5\0\1\5\6\0\2\56"+
    "\1\0\3\5\7\0\10\5\3\0\1\5\1\0\4\5"+
    "\1\251\21\5\2\0\1\5\1\0\1\5\5\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\5"+
    "\1\0\14\5\1\252\11\5\2\0\1\5\1\0\1\5"+
    "\5\0\1\5\6\0\2\56\1\0\3\5\7\0\10\5"+
    "\3\0\1\5\1\0\3\5\1\253\22\5\2\0\1\5"+
    "\1\0\1\5\5\0\1\5\6\0\2\56\1\0\3\5"+
    "\7\0\10\5\3\0\1\5\1\0\3\5\1\254\22\5"+
    "\2\0\1\5\21\0\3\255\7\0\3\255\12\0\6\255"+
    "\103\0\1\256\21\0\12\141\1\257\4\141\1\260\61\141"+
    "\12\142\1\261\4\142\1\262\61\142\20\0\3\216\7\0"+
    "\3\216\3\0\1\217\6\0\6\216\7\0\1\217\27\0"+
    "\1\144\1\0\1\144\2\0\3\144\10\0\1\67\16\0"+
    "\1\67\1\0\1\67\77\0\1\263\25\0\1\5\5\0"+
    "\1\5\6\0\2\56\1\0\3\5\7\0\10\5\3\0"+
    "\1\5\1\0\13\5\1\264\12\5\2\0\1\5\1\0"+
    "\1\5\5\0\1\5\6\0\2\56\1\0\3\5\7\0"+
    "\10\5\3\0\1\5\1\0\25\5\1\265\2\0\1\5"+
    "\1\0\1\5\5\0\1\5\6\0\2\56\1\0\3\5"+
    "\7\0\10\5\3\0\1\5\1\0\4\5\1\266\21\5"+
    "\2\0\1\5\1\0\1\5\5\0\1\5\6\0\2\56"+
    "\1\0\3\5\7\0\10\5\3\0\1\5\1\0\17\5"+
    "\1\267\6\5\2\0\1\5\1\0\1\5\5\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\5"+
    "\1\0\12\5\1\270\13\5\2\0\1\5\1\0\1\5"+
    "\5\0\1\5\6\0\2\56\1\0\3\5\7\0\10\5"+
    "\3\0\1\5\1\0\11\5\1\271\14\5\2\0\1\5"+
    "\1\0\1\5\5\0\1\5\6\0\2\56\1\0\3\5"+
    "\7\0\10\5\3\0\1\5\1\0\16\5\1\272\7\5"+
    "\2\0\1\5\1\0\1\5\5\0\1\5\6\0\2\56"+
    "\1\0\3\5\7\0\10\5\3\0\1\5\1\0\4\5"+
    "\1\273\21\5\2\0\1\5\1\0\1\5\5\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\5"+
    "\1\0\3\5\1\274\22\5\2\0\1\5\1\0\1\5"+
    "\5\0\1\5\6\0\2\56\1\0\3\5\7\0\10\5"+
    "\3\0\1\5\1\0\20\5\1\275\5\5\2\0\1\5"+
    "\1\0\1\5\5\0\1\5\6\0\2\56\1\0\3\5"+
    "\7\0\10\5\3\0\1\5\1\0\16\5\1\276\7\5"+
    "\2\0\1\5\1\0\1\5\5\0\1\5\6\0\2\56"+
    "\1\0\3\5\7\0\10\5\3\0\1\5\1\0\11\5"+
    "\1\277\14\5\2\0\1\5\1\0\1\5\5\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\5"+
    "\1\0\17\5\1\300\6\5\2\0\1\5\1\0\1\5"+
    "\5\0\1\5\6\0\2\56\1\0\3\5\7\0\10\5"+
    "\3\0\1\5\1\0\1\301\25\5\2\0\1\5\1\0"+
    "\1\5\5\0\1\5\6\0\2\56\1\0\3\5\7\0"+
    "\10\5\3\0\1\5\1\0\14\5\1\302\11\5\2\0"+
    "\1\5\1\0\1\5\5\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\16\5\1\303"+
    "\7\5\2\0\1\5\1\0\1\5\5\0\1\5\6\0"+
    "\2\56\1\0\3\5\7\0\10\5\3\0\1\5\1\0"+
    "\12\5\1\304\13\5\2\0\1\5\1\0\1\5\5\0"+
    "\1\5\6\0\2\56\1\0\3\5\7\0\10\5\3\0"+
    "\1\5\1\0\13\5\1\305\12\5\2\0\1\5\1\0"+
    "\1\5\5\0\1\5\6\0\2\56\1\0\3\5\7\0"+
    "\10\5\3\0\1\5\1\0\23\5\1\306\2\5\2\0"+
    "\1\5\1\0\1\5\5\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\307\1\0\17\5\1\310"+
    "\6\5\2\0\1\5\1\0\1\5\5\0\1\5\6\0"+
    "\2\56\1\0\3\5\7\0\10\5\3\0\1\5\1\0"+
    "\13\5\1\311\12\5\2\0\1\5\21\0\3\312\7\0"+
    "\3\312\12\0\6\312\106\0\1\313\16\0\12\141\1\257"+
    "\4\141\1\0\61\141\12\142\1\261\4\142\1\0\61\142"+
    "\66\0\1\314\12\0\1\5\5\0\1\5\6\0\2\56"+
    "\1\0\3\5\7\0\10\5\3\0\1\5\1\0\10\5"+
    "\1\315\15\5\2\0\1\5\1\0\1\5\5\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\5"+
    "\1\0\1\316\25\5\2\0\1\5\1\0\1\5\5\0"+
    "\1\5\6\0\2\56\1\0\3\5\7\0\10\5\3\0"+
    "\1\5\1\0\1\317\25\5\2\0\1\5\1\0\1\5"+
    "\5\0\1\5\6\0\2\56\1\0\3\5\7\0\10\5"+
    "\3\0\1\5\1\0\4\5\1\320\21\5\2\0\1\5"+
    "\1\0\1\5\5\0\1\5\6\0\2\56\1\0\3\5"+
    "\7\0\10\5\3\0\1\5\1\0\20\5\1\321\5\5"+
    "\2\0\1\5\1\0\1\5\5\0\1\5\6\0\2\56"+
    "\1\0\3\5\7\0\10\5\3\0\1\322\1\0\26\5"+
    "\2\0\1\5\1\0\1\5\5\0\1\5\6\0\2\56"+
    "\1\0\3\5\7\0\10\5\3\0\1\5\1\0\15\5"+
    "\1\323\10\5\2\0\1\5\1\0\1\5\5\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\5"+
    "\1\0\25\5\1\324\2\0\1\5\1\0\1\5\5\0"+
    "\1\5\6\0\2\56\1\0\3\5\7\0\10\5\3\0"+
    "\1\5\1\0\2\5\1\325\23\5\2\0\1\5\1\0"+
    "\1\5\5\0\1\5\6\0\2\56\1\0\3\5\7\0"+
    "\10\5\3\0\1\5\1\0\3\5\1\326\22\5\2\0"+
    "\1\5\1\0\1\5\5\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\1\327\25\5"+
    "\2\0\1\5\1\0\1\5\5\0\1\5\6\0\2\56"+
    "\1\0\3\5\7\0\10\5\3\0\1\5\1\0\6\5"+
    "\1\330\17\5\2\0\1\5\1\0\1\5\5\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\5"+
    "\1\0\17\5\1\331\6\5\2\0\1\5\1\0\1\5"+
    "\5\0\1\5\6\0\2\56\1\0\3\5\7\0\10\5"+
    "\3\0\1\5\1\0\12\5\1\332\13\5\2\0\1\5"+
    "\1\0\1\5\5\0\1\5\6\0\2\56\1\0\3\5"+
    "\7\0\10\5\3\0\1\5\1\0\20\5\1\333\5\5"+
    "\2\0\1\5\21\0\3\4\7\0\3\4\12\0\6\4"+
    "\103\0\1\334\105\0\1\335\14\0\1\5\5\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\5"+
    "\1\0\20\5\1\336\5\5\2\0\1\5\1\0\1\5"+
    "\5\0\1\5\6\0\2\56\1\0\3\5\7\0\10\5"+
    "\3\0\1\5\1\0\13\5\1\337\12\5\2\0\1\5"+
    "\1\0\1\5\5\0\1\5\6\0\2\56\1\0\3\5"+
    "\7\0\10\5\3\0\1\5\1\0\11\5\1\340\14\5"+
    "\2\0\1\5\1\0\1\5\5\0\1\5\6\0\2\56"+
    "\1\0\3\5\7\0\10\5\3\0\1\5\1\0\20\5"+
    "\1\341\5\5\2\0\1\5\1\0\1\5\5\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\5"+
    "\1\0\1\342\25\5\2\0\1\5\1\0\1\5\5\0"+
    "\1\5\6\0\2\56\1\0\3\5\7\0\10\5\3\0"+
    "\1\5\1\0\14\5\1\343\11\5\2\0\1\5\1\0"+
    "\1\5\5\0\1\5\6\0\2\56\1\0\3\5\7\0"+
    "\10\5\3\0\1\5\1\0\17\5\1\344\6\5\2\0"+
    "\1\5\1\0\1\5\5\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\1\345\25\5"+
    "\2\0\1\5\70\0\1\346\60\0\1\347\31\0\1\5"+
    "\5\0\1\5\6\0\2\56\1\0\3\5\7\0\10\5"+
    "\3\0\1\5\1\0\25\5\1\152\2\0\1\5\1\0"+
    "\1\5\5\0\1\5\6\0\2\56\1\0\3\5\7\0"+
    "\10\5\3\0\1\5\1\0\10\5\1\350\15\5\2\0"+
    "\1\5\1\0\1\5\5\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\2\5\1\351"+
    "\23\5\2\0\1\5\1\0\1\5\5\0\1\5\6\0"+
    "\2\56\1\0\3\5\7\0\10\5\3\0\1\5\1\0"+
    "\11\5\1\352\14\5\2\0\1\5\1\0\1\5\5\0"+
    "\1\5\6\0\2\56\1\0\3\5\7\0\10\5\3\0"+
    "\1\5\1\0\12\5\1\353\13\5\2\0\1\5\75\0"+
    "\1\67\55\0\1\354\27\0\1\5\5\0\1\5\6\0"+
    "\2\56\1\0\3\5\7\0\10\5\3\0\1\5\1\0"+
    "\12\5\1\355\13\5\2\0\1\5\1\0\1\5\5\0"+
    "\1\5\6\0\2\56\1\0\3\5\7\0\10\5\3\0"+
    "\1\5\1\0\4\5\1\356\21\5\2\0\1\5\1\0"+
    "\1\5\5\0\1\5\6\0\2\56\1\0\3\5\7\0"+
    "\10\5\3\0\1\5\1\0\15\5\1\357\10\5\2\0"+
    "\1\5\54\0\1\360\25\0\1\5\5\0\1\5\6\0"+
    "\2\56\1\0\3\5\7\0\10\5\3\0\1\5\1\0"+
    "\4\5\1\361\21\5\2\0\1\5\1\0\1\5\5\0"+
    "\1\5\6\0\2\56\1\0\3\5\7\0\10\5\3\0"+
    "\1\362\1\0\26\5\2\0\1\5\1\0\1\5\5\0"+
    "\1\5\6\0\2\56\1\0\3\5\7\0\10\5\3\0"+
    "\1\5\1\0\17\5\1\363\6\5\2\0\1\5\1\0"+
    "\1\5\5\0\1\5\6\0\2\56\1\0\3\5\7\0"+
    "\10\5\3\0\1\5\1\0\12\5\1\364\13\5\2\0"+
    "\1\5\1\0\1\5\5\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\20\5\1\365"+
    "\5\5\2\0\1\5\1\0\1\5\5\0\1\5\6\0"+
    "\2\56\1\0\3\5\7\0\10\5\3\0\1\5\1\0"+
    "\17\5\1\366\6\5\2\0\1\5\1\0\1\5\5\0"+
    "\1\5\6\0\2\56\1\0\3\5\7\0\10\5\3\0"+
    "\1\5\1\0\1\367\25\5\2\0\1\5\1\0\1\5"+
    "\5\0\1\5\6\0\2\56\1\0\3\5\7\0\10\5"+
    "\3\0\1\5\1\0\12\5\1\370\13\5\2\0\1\5"+
    "\1\0\1\5\5\0\1\5\6\0\2\56\1\0\3\5"+
    "\7\0\10\5\3\0\1\5\1\0\15\5\1\371\10\5"+
    "\2\0\1\5\1\0\1\5\5\0\1\5\6\0\2\56"+
    "\1\0\3\5\7\0\10\5\3\0\1\372\1\0\26\5"+
    "\2\0\1\5\1\0\1\5\5\0\1\5\6\0\2\56"+
    "\1\0\3\5\7\0\10\5\3\0\1\5\1\0\12\5"+
    "\1\373\13\5\2\0\1\5\1\0\1\5\5\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\5"+
    "\1\0\17\5\1\374\6\5\2\0\1\5\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[12935];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\2\11\1\1\1\11\4\1\6\11"+
    "\3\1\2\11\21\1\3\11\5\0\4\1\1\0\1\11"+
    "\1\0\1\11\3\0\2\1\1\0\35\1\4\0\2\1"+
    "\1\0\1\1\2\0\1\1\1\0\41\1\5\0\1\1"+
    "\1\0\34\1\3\0\1\11\1\0\1\11\1\0\26\1"+
    "\3\0\17\1\2\0\10\1\2\0\4\1\1\0\3\1"+
    "\1\11\14\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _AvroIdlLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _AvroIdlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 59: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 60: break;
          case 3:
            { return STRING_LITERAL;
            }
          // fall through
          case 61: break;
          case 4:
            { return IDENTIFIER_TOKEN;
            }
          // fall through
          case 62: break;
          case 5:
            { return LEFT_PAREN;
            }
          // fall through
          case 63: break;
          case 6:
            { return RIGHT_PAREN;
            }
          // fall through
          case 64: break;
          case 7:
            { return COMMA;
            }
          // fall through
          case 65: break;
          case 8:
            { return INT_LITERAL;
            }
          // fall through
          case 66: break;
          case 9:
            { return COLON;
            }
          // fall through
          case 67: break;
          case 10:
            { return SEMICOLON;
            }
          // fall through
          case 68: break;
          case 11:
            { return LEFT_ANGLE;
            }
          // fall through
          case 69: break;
          case 12:
            { return EQUALS;
            }
          // fall through
          case 70: break;
          case 13:
            { return RIGHT_ANGLE;
            }
          // fall through
          case 71: break;
          case 14:
            { return QUESTION_MARK;
            }
          // fall through
          case 72: break;
          case 15:
            { return AT;
            }
          // fall through
          case 73: break;
          case 16:
            { return LEFT_BRACKET;
            }
          // fall through
          case 74: break;
          case 17:
            { return RIGHT_BRACKET;
            }
          // fall through
          case 75: break;
          case 18:
            { return LEFT_BRACE;
            }
          // fall through
          case 76: break;
          case 19:
            { return RIGHT_BRACE;
            }
          // fall through
          case 77: break;
          case 20:
            { return FLOAT_LITERAL;
            }
          // fall through
          case 78: break;
          case 21:
            { return BLOCK_COMMENT_START;
            }
          // fall through
          case 79: break;
          case 22:
            { return LINE_COMMENT;
            }
          // fall through
          case 80: break;
          case 23:
            { return INCOMPLETE_BLOCK_COMMENT;
            }
          // fall through
          case 81: break;
          case 24:
            { return INCOMPLETE_DOC_COMMENT;
            }
          // fall through
          case 82: break;
          case 25:
            { return IDL;
            }
          // fall through
          case 83: break;
          case 26:
            { return INT;
            }
          // fall through
          case 84: break;
          case 27:
            { return MAP;
            }
          // fall through
          case 85: break;
          case 28:
            { return DATE;
            }
          // fall through
          case 86: break;
          case 29:
            { return ENUM;
            }
          // fall through
          case 87: break;
          case 30:
            { return LONG;
            }
          // fall through
          case 88: break;
          case 31:
            { return NULL;
            }
          // fall through
          case 89: break;
          case 32:
            { return TRUE;
            }
          // fall through
          case 90: break;
          case 33:
            { return UUID;
            }
          // fall through
          case 91: break;
          case 34:
            { return VOID;
            }
          // fall through
          case 92: break;
          case 35:
            { return BLOCK_COMMENT;
            }
          // fall through
          case 93: break;
          case 36:
            { return DOC_COMMENT;
            }
          // fall through
          case 94: break;
          case 37:
            { return ARRAY;
            }
          // fall through
          case 95: break;
          case 38:
            { return BYTES;
            }
          // fall through
          case 96: break;
          case 39:
            { return ERROR;
            }
          // fall through
          case 97: break;
          case 40:
            { return FALSE;
            }
          // fall through
          case 98: break;
          case 41:
            { return FIXED;
            }
          // fall through
          case 99: break;
          case 42:
            { return FLOAT;
            }
          // fall through
          case 100: break;
          case 43:
            { return UNION;
            }
          // fall through
          case 101: break;
          case 44:
            { return DOUBLE;
            }
          // fall through
          case 102: break;
          case 45:
            { return IMPORT;
            }
          // fall through
          case 103: break;
          case 46:
            { return ONEWAY;
            }
          // fall through
          case 104: break;
          case 47:
            { return RECORD;
            }
          // fall through
          case 105: break;
          case 48:
            { return SCHEMA;
            }
          // fall through
          case 106: break;
          case 49:
            { return STRING;
            }
          // fall through
          case 107: break;
          case 50:
            { return THROWS;
            }
          // fall through
          case 108: break;
          case 51:
            { return BOOLEAN;
            }
          // fall through
          case 109: break;
          case 52:
            { return DECIMAL;
            }
          // fall through
          case 110: break;
          case 53:
            { return TIME_MS;
            }
          // fall through
          case 111: break;
          case 54:
            { return PROTOCOL;
            }
          // fall through
          case 112: break;
          case 55:
            { return NAMESPACE;
            }
          // fall through
          case 113: break;
          case 56:
            { return AT_NAMESPACE;
            }
          // fall through
          case 114: break;
          case 57:
            { return TIMESTAMP_MS;
            }
          // fall through
          case 115: break;
          case 58:
            { return LOCAL_TIMESTAMP_MS;
            }
          // fall through
          case 116: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package opwvhk.intellij.avro_idl.syntax;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static opwvhk.intellij.avro_idl.psi.AvroIdlTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_AvroIdlLexer.flex</tt>
 */
public class _AvroIdlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 17504 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1"+
    "\21\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\21\1\25\1\57\1\60\5\21\2\25\1\61"+
    "\7\21\1\25\1\62\20\21\1\25\1\63\1\21\1\64\13\25\1\65\1\25\1\66\22\21\1\67"+
    "\1\70\4\21\1\71\11\21\1\72\1\73\1\74\1\75\1\21\1\76\2\21\1\77\3\21\1\100\2"+
    "\21\1\101\10\21\123\25\1\102\7\25\1\103\1\104\12\25\1\105\15\25\1\106\6\21"+
    "\1\25\1\107\u0582\21\1\110\u017f\21");

  /* The ZZ_CMAP_Y table has 4672 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1"+
    "\17\3\0\1\20\1\21\1\22\1\23\2\24\1\25\3\24\1\25\71\24\1\26\1\24\1\27\1\30"+
    "\1\31\1\32\2\30\16\0\1\33\1\34\1\35\1\36\2\24\1\37\11\24\1\40\21\24\1\41\1"+
    "\42\24\24\1\43\3\24\1\25\1\44\1\43\4\24\1\45\1\46\4\0\1\47\1\50\1\30\3\24"+
    "\2\51\1\30\1\52\1\53\1\0\1\54\5\24\1\55\3\0\1\56\1\57\13\24\1\60\1\47\1\61"+
    "\1\62\1\0\1\63\1\30\1\64\1\65\3\24\3\0\1\66\12\24\1\67\1\0\1\70\1\30\1\0\1"+
    "\71\3\24\1\55\1\72\1\23\2\24\1\67\1\73\1\74\1\75\2\30\3\24\1\76\1\24\1\51"+
    "\6\30\2\24\1\33\1\77\2\30\1\100\5\0\1\101\6\24\1\102\2\0\1\103\1\24\1\104"+
    "\1\0\1\43\1\24\1\105\1\106\1\107\2\24\1\110\1\111\1\112\1\113\1\114\1\64\1"+
    "\115\1\104\1\0\1\116\1\117\1\120\1\121\1\107\2\24\1\110\1\122\1\123\1\124"+
    "\1\125\1\126\1\127\1\130\1\0\1\131\1\30\1\120\1\40\1\37\2\24\1\110\1\132\1"+
    "\112\1\47\1\133\1\134\1\30\1\104\1\0\1\44\1\135\1\120\1\106\1\107\2\24\1\110"+
    "\1\132\1\112\1\113\1\125\1\130\1\115\1\104\1\0\1\44\1\30\1\136\1\137\1\140"+
    "\1\141\1\117\1\137\1\24\1\142\1\143\1\144\1\145\1\30\1\130\1\0\1\30\1\44\1"+
    "\146\1\33\1\110\2\24\1\110\1\24\1\147\1\150\1\144\1\151\1\51\1\104\1\0\2\30"+
    "\1\105\1\33\1\110\2\24\1\110\1\152\1\112\1\150\1\144\1\151\1\35\1\104\1\0"+
    "\1\153\1\30\1\146\1\33\1\110\4\24\1\154\1\150\1\155\1\156\1\45\1\104\1\0\1"+
    "\30\1\42\1\157\1\24\1\25\1\42\2\24\1\37\1\160\1\25\1\161\1\162\1\0\1\130\1"+
    "\0\1\163\1\30\1\43\5\24\1\164\1\165\1\166\1\167\1\0\1\170\4\30\1\171\1\172"+
    "\1\173\1\43\1\174\1\175\1\164\1\176\1\177\1\52\1\0\1\200\4\30\1\134\2\30\1"+
    "\170\1\0\1\170\1\201\1\202\1\24\1\43\3\24\1\31\1\46\1\0\1\150\1\203\1\0\1"+
    "\46\3\0\1\204\1\205\7\30\5\24\1\55\1\0\1\206\1\0\1\170\1\67\1\207\1\210\1"+
    "\211\1\212\1\24\1\213\1\214\1\0\1\52\4\24\1\40\1\22\5\24\1\215\51\24\1\140"+
    "\1\25\1\140\5\24\1\140\4\24\1\140\1\25\1\140\1\24\1\25\7\24\1\140\10\24\1"+
    "\216\4\30\2\24\2\30\12\24\2\77\1\43\114\24\1\106\2\24\1\217\2\24\1\51\11\24"+
    "\1\137\1\24\1\134\1\24\1\33\1\220\1\30\2\24\1\220\1\30\2\24\1\221\1\30\1\24"+
    "\1\33\1\222\1\30\6\24\1\223\3\0\1\224\1\225\1\0\1\170\3\30\1\226\1\0\1\170"+
    "\13\24\1\30\1\227\4\24\1\230\10\24\1\77\1\30\3\24\1\25\1\0\1\2\1\0\1\2\1\130"+
    "\1\0\3\24\1\77\1\31\1\30\5\24\1\116\3\24\1\27\1\0\1\170\4\30\2\24\1\166\1"+
    "\2\6\24\1\203\1\167\3\0\1\113\1\0\1\170\1\0\1\170\1\45\1\30\1\0\1\52\10\30"+
    "\1\231\5\24\1\223\1\0\1\231\1\116\1\0\1\170\1\30\1\232\1\2\1\30\1\233\3\24"+
    "\1\103\1\211\1\0\1\71\4\24\1\67\1\0\1\2\1\30\4\24\1\223\2\0\1\30\1\0\1\234"+
    "\1\0\1\71\3\24\1\77\1\24\1\134\10\30\1\235\2\0\1\236\1\237\1\170\30\24\7\0"+
    "\1\240\42\24\2\77\4\24\2\77\1\24\1\241\3\24\1\77\6\24\1\33\1\177\1\242\1\31"+
    "\1\243\1\116\1\24\1\31\1\242\1\31\1\244\1\245\3\30\1\246\1\30\1\45\1\134\1"+
    "\30\1\247\1\250\1\150\1\0\1\44\1\45\2\30\1\24\1\31\4\24\2\30\1\0\1\204\1\251"+
    "\1\0\1\252\1\30\1\253\1\42\1\160\1\254\1\32\1\255\1\24\1\256\1\257\1\260\2"+
    "\30\5\24\1\134\116\30\5\24\1\25\5\24\1\25\20\24\1\31\1\261\1\262\1\30\4\24"+
    "\1\40\1\22\7\24\1\45\1\30\1\64\2\24\1\25\1\30\10\25\4\0\5\30\1\45\72\30\1"+
    "\263\3\30\1\43\1\213\1\254\1\31\1\43\11\24\1\25\1\264\1\43\12\24\1\215\1\257"+
    "\4\24\1\25\1\43\12\24\1\25\2\30\3\24\1\51\6\30\170\24\1\77\11\30\75\24\1\51"+
    "\2\30\21\24\1\31\10\30\5\24\1\77\41\24\1\31\2\24\1\0\1\262\2\30\5\24\1\166"+
    "\1\100\1\265\3\24\1\67\12\24\1\170\3\30\1\45\1\24\1\42\14\24\1\107\3\24\1"+
    "\25\1\24\7\30\1\45\1\24\1\266\1\267\2\24\1\55\2\30\1\134\6\24\1\116\1\30\1"+
    "\71\5\24\1\223\1\0\1\52\1\30\1\0\1\170\2\0\1\71\1\270\1\0\1\71\2\24\1\67\1"+
    "\52\2\24\1\166\1\0\1\2\1\30\3\24\1\31\1\101\5\24\1\55\1\0\1\252\1\45\1\0\1"+
    "\170\1\271\1\24\1\0\1\272\5\24\1\103\1\167\1\30\1\267\1\273\1\0\1\170\2\24"+
    "\1\25\1\274\6\24\1\210\1\275\1\230\2\30\1\276\1\24\1\55\1\277\1\30\3\300\1"+
    "\30\2\25\5\24\1\215\1\77\1\30\16\24\1\55\1\301\1\0\1\170\64\24\1\116\1\30"+
    "\2\24\1\25\1\302\5\24\1\116\40\30\55\24\1\77\15\24\1\27\4\30\1\25\1\30\1\302"+
    "\1\303\1\24\1\110\1\25\1\177\1\304\15\24\1\27\3\30\1\302\54\24\1\77\2\30\10"+
    "\24\1\42\6\24\5\30\1\24\1\31\2\0\2\30\2\0\1\117\2\30\1\257\3\30\1\44\1\33"+
    "\20\24\1\305\1\247\1\30\1\0\1\170\1\43\2\24\1\121\1\43\2\24\1\51\1\306\12"+
    "\24\1\25\3\42\1\307\1\310\2\30\1\311\1\24\1\152\2\24\1\25\2\24\1\312\1\24"+
    "\1\77\1\24\1\77\4\30\17\24\1\51\10\30\6\24\1\31\20\30\1\313\20\30\3\24\1\31"+
    "\6\24\1\134\1\30\1\252\3\30\4\24\1\30\1\257\3\24\1\51\4\24\1\67\1\314\3\24"+
    "\1\77\4\24\1\116\1\24\1\254\5\30\23\24\1\77\1\0\1\170\4\24\1\116\4\24\1\116"+
    "\5\24\1\30\6\24\1\116\23\30\46\24\1\25\1\30\2\24\1\77\1\30\1\24\23\30\1\77"+
    "\1\110\4\24\1\40\1\315\2\24\1\77\1\30\2\24\1\25\1\30\3\24\1\25\10\30\2\24"+
    "\1\316\1\30\2\24\1\77\1\30\3\24\1\27\10\30\7\24\1\306\10\30\1\317\1\100\1"+
    "\152\1\43\2\24\1\116\1\124\4\30\3\24\1\31\3\24\1\31\4\30\1\24\1\43\2\24\1"+
    "\320\3\30\6\24\1\77\1\30\2\24\1\77\1\30\2\24\1\51\1\30\2\24\1\27\15\30\11"+
    "\24\1\134\6\30\6\24\1\51\1\30\6\24\1\51\41\30\1\233\6\24\1\0\1\167\3\30\1"+
    "\130\1\0\1\30\1\64\1\233\5\24\1\0\1\321\2\30\3\24\1\134\1\0\1\170\1\233\3"+
    "\24\1\166\1\0\1\150\1\0\2\30\4\24\1\322\1\30\1\233\5\24\1\55\1\0\1\323\1\324"+
    "\1\0\1\325\4\30\2\24\1\37\2\24\1\223\1\0\1\205\10\30\1\25\1\255\1\24\1\40"+
    "\1\24\1\134\5\24\1\166\1\0\1\314\1\0\1\170\1\146\1\106\1\107\2\24\1\110\1"+
    "\132\1\112\1\113\1\125\1\145\1\257\1\104\2\204\21\30\6\24\1\203\1\0\1\206"+
    "\1\51\1\0\1\170\4\30\6\24\2\0\1\326\1\30\1\0\1\170\24\30\5\24\1\166\1\52\1"+
    "\0\1\252\2\30\1\273\4\30\6\24\2\0\1\327\1\30\1\0\1\170\4\30\5\24\1\55\1\0"+
    "\1\30\1\0\1\170\6\30\3\24\1\330\1\0\1\2\1\0\1\170\54\30\10\24\1\0\1\170\1"+
    "\30\1\45\40\30\1\103\1\233\4\24\1\55\1\331\1\64\1\30\1\103\1\101\4\24\1\243"+
    "\1\213\1\0\1\170\4\30\7\24\1\134\40\30\1\24\1\110\3\24\1\166\1\167\1\0\1\134"+
    "\1\30\1\0\1\170\2\30\1\42\3\24\1\332\2\0\1\46\1\167\11\30\1\25\1\37\4\24\1"+
    "\333\1\334\1\214\1\30\1\0\1\170\24\30\63\24\1\27\14\30\15\24\1\25\2\30\30"+
    "\24\1\116\27\30\5\24\1\25\72\30\10\24\1\25\67\30\7\24\1\134\3\24\1\25\1\0"+
    "\1\170\14\30\3\24\1\77\1\204\1\30\6\24\1\167\1\30\1\116\1\30\1\0\1\170\1\302"+
    "\2\24\1\257\2\24\56\30\10\24\1\31\1\30\1\103\4\0\1\167\1\30\1\64\1\233\1\24"+
    "\10\30\1\27\3\30\75\24\1\31\2\30\36\24\1\51\41\30\43\24\1\25\12\30\61\24\1"+
    "\116\40\30\15\24\1\51\1\24\1\31\1\24\1\134\1\24\1\335\1\2\127\30\1\336\1\337"+
    "\2\0\1\340\1\2\3\30\1\341\22\30\1\324\67\30\12\24\1\33\10\24\1\33\1\342\1"+
    "\343\1\24\1\344\1\152\7\24\1\40\1\345\2\33\3\24\1\346\1\177\1\42\1\110\51"+
    "\24\1\77\3\24\1\110\2\24\1\215\3\24\1\215\2\24\1\33\3\24\1\33\2\24\1\25\3"+
    "\24\1\25\3\24\1\110\3\24\1\110\2\24\1\215\1\347\14\0\1\167\1\232\5\0\1\204"+
    "\1\313\1\30\1\350\2\30\1\232\1\46\1\0\52\30\1\167\2\0\1\351\1\352\1\314\72"+
    "\30\30\24\1\31\1\30\1\167\5\30\10\24\1\223\1\314\1\0\1\170\24\30\1\152\3\24"+
    "\1\171\1\43\1\215\1\353\1\253\1\354\1\171\1\241\1\171\2\215\1\127\1\24\1\37"+
    "\1\24\1\116\1\355\1\37\1\24\1\116\50\30\32\24\1\25\5\30\106\24\1\31\1\30\33"+
    "\24\1\77\120\24\1\27\1\30\146\24\1\134\3\30\3\24\1\77\74\30\1\126\3\30\14"+
    "\0\20\30\36\0\2\30");

  /* The ZZ_CMAP_A table has 1904 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\42\1\3\1\2\2\1\1\2\6\42\4\0\1\3\1\0\1\30\1\0\1\40\2\0\1\32\1\46\1\47\1"+
    "\35\1\4\1\55\1\43\1\23\1\34\1\5\7\11\2\6\1\57\1\56\1\52\1\60\1\53\1\61\1\54"+
    "\3\10\1\25\1\24\1\25\2\40\1\15\2\40\1\12\1\40\1\13\1\40\1\27\7\40\1\26\2\40"+
    "\1\50\1\31\1\51\1\0\1\73\1\37\1\14\1\33\1\67\1\66\1\64\1\17\1\74\1\76\1\20"+
    "\2\40\1\63\1\70\1\16\1\62\1\72\1\40\1\41\1\65\1\21\1\71\1\77\1\75\1\7\1\22"+
    "\1\40\1\44\1\0\1\45\1\0\6\42\1\36\2\42\1\3\1\0\4\40\4\0\1\40\2\0\1\42\7\0"+
    "\1\40\4\0\1\40\5\0\17\40\1\0\2\40\4\0\4\40\16\0\5\40\7\0\1\40\1\0\1\40\1\0"+
    "\5\40\1\0\2\40\2\0\4\40\1\0\1\40\6\0\1\40\1\0\3\40\1\0\1\40\1\0\4\40\1\0\13"+
    "\40\1\0\3\40\1\0\5\42\2\0\6\40\1\0\7\40\1\0\1\40\15\0\1\40\1\0\15\42\1\0\1"+
    "\42\1\0\2\42\1\0\2\42\1\0\1\42\3\40\5\0\6\42\5\0\1\40\4\0\3\42\1\0\1\42\3"+
    "\0\3\40\7\42\4\0\2\40\1\42\13\40\1\0\1\40\7\42\2\40\2\42\1\0\4\42\2\40\2\42"+
    "\3\40\2\0\1\40\7\0\1\42\1\40\1\42\6\40\3\42\2\0\11\40\3\42\1\40\6\0\2\42\6"+
    "\40\4\42\2\40\2\0\2\42\1\40\11\42\1\40\3\42\1\40\5\42\2\0\1\40\3\42\4\0\6"+
    "\40\6\0\10\42\6\40\3\42\1\40\2\42\1\40\7\42\2\40\2\42\2\0\2\42\1\40\3\42\1"+
    "\0\10\40\2\0\2\40\2\0\6\40\1\0\7\40\1\0\1\40\3\0\4\40\2\0\1\42\1\40\7\42\2"+
    "\0\2\42\2\0\3\42\1\40\5\0\2\40\1\0\5\40\7\0\2\40\4\0\3\42\1\0\6\40\4\0\2\40"+
    "\1\0\2\40\1\0\2\40\1\0\2\40\2\0\1\42\1\0\5\42\4\0\2\42\2\0\3\42\3\0\1\42\7"+
    "\0\4\40\1\0\1\40\7\0\4\42\3\40\1\42\2\0\1\40\1\0\2\40\1\0\3\40\2\42\1\0\3"+
    "\42\2\0\1\40\10\0\1\40\6\42\2\0\1\42\1\40\1\0\6\40\3\0\3\40\1\0\4\40\3\0\2"+
    "\40\1\0\1\40\1\0\4\40\4\0\5\42\3\0\3\42\1\0\4\42\2\0\1\40\6\0\5\42\1\0\5\40"+
    "\3\0\1\40\7\42\1\0\2\42\5\0\2\42\1\0\4\40\1\0\3\40\1\0\2\40\5\0\3\40\2\42"+
    "\1\40\3\42\1\0\4\42\1\40\5\0\3\40\1\42\2\0\2\42\1\0\7\40\1\0\1\40\4\0\1\42"+
    "\4\0\6\42\1\0\1\42\3\0\2\42\4\0\1\40\1\42\2\40\7\42\4\0\10\40\10\42\1\0\2"+
    "\42\7\0\2\40\1\0\1\40\2\0\2\40\1\0\1\40\2\0\1\40\6\0\4\40\1\0\3\40\1\0\1\40"+
    "\1\0\1\40\2\0\2\40\1\0\3\40\2\42\1\0\2\42\1\40\2\0\5\40\1\0\1\40\1\0\2\42"+
    "\2\0\4\40\5\0\1\42\1\0\1\42\1\0\1\42\4\0\2\42\5\40\10\42\11\0\1\42\1\0\7\42"+
    "\1\40\2\42\4\40\3\42\1\40\3\42\2\40\7\42\3\40\4\42\5\40\14\42\1\40\1\42\3"+
    "\40\1\0\7\40\2\0\3\42\1\3\11\40\3\42\3\0\2\40\2\42\4\0\1\40\1\0\2\42\4\0\4"+
    "\40\10\42\3\0\1\40\3\0\2\40\1\42\5\0\4\42\1\0\5\40\2\42\2\40\1\42\1\40\5\0"+
    "\5\42\3\40\3\0\10\42\5\40\2\42\3\0\3\40\3\42\1\0\5\42\4\40\1\42\4\40\3\42"+
    "\2\40\3\42\1\0\5\42\1\0\1\40\1\0\1\40\1\0\1\40\1\0\1\40\2\0\3\40\1\0\6\40"+
    "\2\0\2\40\13\3\5\42\2\1\5\42\1\3\4\0\1\40\12\0\1\3\1\0\1\42\3\0\4\42\11\0"+
    "\1\40\4\0\1\40\1\0\5\40\2\0\1\40\1\0\4\40\1\0\3\40\2\0\4\40\5\0\5\40\4\0\1"+
    "\40\4\0\4\40\3\42\2\40\4\0\1\3\4\0\3\40\1\0\2\42\2\0\3\40\6\42\1\0\3\40\1"+
    "\42\3\40\1\42\4\40\1\42\4\40\3\0\1\40\1\0\1\40\2\0\5\40\1\42\2\40\2\42\5\40"+
    "\1\0\4\40\2\42\4\0\1\40\3\42\2\40\1\42\5\40\2\42\3\0\3\40\4\0\3\40\2\42\2"+
    "\0\6\40\1\0\3\42\1\0\2\42\5\0\5\40\5\0\1\40\1\42\3\40\1\0\2\40\1\0\7\40\2"+
    "\0\1\42\6\0\2\40\2\0\3\40\3\0\2\40\3\0\2\40\2\0\3\42\4\0\3\40\1\0\2\40\1\0"+
    "\1\40\5\0\1\42\2\0\3\42\5\0\1\40\3\0\1\40\2\0\4\40\1\0\2\40\2\0\1\40\3\42"+
    "\1\0\2\42\1\0\5\40\2\42\1\0\3\42\2\0\1\42\2\0\3\40\1\42\2\0\1\40\1\0\1\42"+
    "\4\40\5\0\3\42\3\0\2\42\1\40\1\0\1\40\3\0\4\42\2\40\1\0\1\40\1\42\3\0\1\40"+
    "\3\0\2\40\3\0\5\42\1\40\4\42\3\0\6\42\1\40\6\42\3\0\1\42\1\0\2\42\1\0\1\42"+
    "\2\40\3\0\2\42\6\0\5\42\3\0\6\42\2\0\3\42\2\0\4\42\4\0\1\40\2\0\2\40\2\0\4"+
    "\40\1\0\4\40\1\0\1\40\1\0\6\40\2\0\5\40\1\0\4\40\1\0\4\40\2\0\2\42\4\0\1\42"+
    "\3\0\1\42\2\0\7\42\1\0\2\42\1\0\2\42\1\0\1\40\1\0\1\40\5\0\1\40\1\0\1\40\1"+
    "\0\3\40\1\0\3\40\1\0\3\40");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\2\3\10\4\2\1\1\4"+
    "\2\1\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\11\4\3\0\1\3\2\0\1\3\2\23\3\0\16\4"+
    "\1\0\1\24\1\0\2\4\1\25\2\0\1\4\1\0"+
    "\16\4\2\0\1\3\2\0\1\23\2\0\1\23\7\4"+
    "\1\26\1\27\6\4\2\0\2\4\1\0\12\4\1\30"+
    "\4\4\2\0\1\23\3\4\1\31\5\4\1\32\3\4"+
    "\2\0\1\33\1\0\1\4\1\0\1\4\1\34\1\4"+
    "\1\35\3\4\1\36\3\4\1\37\1\4\1\40\1\0"+
    "\1\41\2\4\1\42\1\43\1\44\4\4\1\45\1\4"+
    "\1\33\1\46\1\4\1\0\2\4\1\47\4\4\1\50"+
    "\1\4\1\0\2\4\1\51\2\4\1\52\1\4\1\53"+
    "\1\0\1\54\1\4\1\55\1\56\1\57\2\4\1\0"+
    "\3\4\1\60\1\61\1\0\1\4\1\62\1\4\1\0"+
    "\2\4\1\0\1\4\1\63\1\64\1\4\1\0\2\4"+
    "\1\65\3\4\1\66\6\4\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[249];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0"+
    "\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0"+
    "\0\u0400\0\u0440\0\u0480\0\u04c0\0\100\0\100\0\100\0\100"+
    "\0\100\0\100\0\100\0\100\0\u0500\0\100\0\100\0\100"+
    "\0\100\0\100\0\u0540\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680"+
    "\0\u06c0\0\u0700\0\u0740\0\u0780\0\u07c0\0\u0380\0\u0800\0\u0840"+
    "\0\u0880\0\100\0\100\0\u08c0\0\u0900\0\u0940\0\u0980\0\u09c0"+
    "\0\u0a00\0\u0a40\0\u0a80\0\u0ac0\0\u0b00\0\u0b40\0\u0b80\0\u0bc0"+
    "\0\u0c00\0\u0c40\0\u0c80\0\u0cc0\0\u0d00\0\u03c0\0\100\0\u0d40"+
    "\0\u0d80\0\u0dc0\0\u0e00\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0f40"+
    "\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100\0\u1140"+
    "\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300\0\u1340"+
    "\0\u1380\0\u13c0\0\u1400\0\u1440\0\u0480\0\u0180\0\u1480\0\u14c0"+
    "\0\u1500\0\u1540\0\u1580\0\u15c0\0\u1600\0\u0180\0\u0180\0\u1640"+
    "\0\u1680\0\u16c0\0\u1700\0\u1740\0\u1780\0\u17c0\0\u1800\0\u1840"+
    "\0\u1880\0\u18c0\0\u1900\0\u1940\0\u1980\0\u19c0\0\u1a00\0\u1a40"+
    "\0\u1a80\0\u1ac0\0\u1b00\0\u1b40\0\u0180\0\u1b80\0\u1bc0\0\u1c00"+
    "\0\u1c40\0\u1c80\0\u1cc0\0\u1d00\0\u1d40\0\u1d80\0\u1dc0\0\u0180"+
    "\0\u1e00\0\u1e40\0\u1e80\0\u1ec0\0\u1f00\0\u0180\0\u1f40\0\u1f80"+
    "\0\u1fc0\0\u2000\0\u2040\0\u2040\0\u2080\0\u20c0\0\u2100\0\u2140"+
    "\0\u0180\0\u2180\0\u0180\0\u21c0\0\u2200\0\u2240\0\u0180\0\u2280"+
    "\0\u22c0\0\u2300\0\u0180\0\u2340\0\u0180\0\u2380\0\u0180\0\u23c0"+
    "\0\u2400\0\u0180\0\u0180\0\u0180\0\u2440\0\u2480\0\u24c0\0\u2500"+
    "\0\u0180\0\u2540\0\100\0\100\0\u2580\0\u25c0\0\u2600\0\u2640"+
    "\0\u0180\0\u2680\0\u26c0\0\u2700\0\u2740\0\u0180\0\u2780\0\u27c0"+
    "\0\u2800\0\u2840\0\u0180\0\u2880\0\u28c0\0\u0180\0\u2900\0\u0180"+
    "\0\u2940\0\u0180\0\u2980\0\u0180\0\u0180\0\u0180\0\u29c0\0\u2a00"+
    "\0\u2a40\0\u2a80\0\u2ac0\0\u2b00\0\u0180\0\u0180\0\u2b40\0\u2b80"+
    "\0\u0180\0\u2bc0\0\u2c00\0\u2c40\0\u2c80\0\u2cc0\0\u2d00\0\u0180"+
    "\0\u0180\0\u2d40\0\u2d80\0\u2dc0\0\u2e00\0\100\0\u2e40\0\u2e80"+
    "\0\u2ec0\0\u0180\0\u2f00\0\u2f40\0\u2f80\0\u2fc0\0\u3000\0\u3040"+
    "\0\u0180";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[249];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\2\7\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\7"+
    "\1\17\4\7\1\20\2\2\1\21\1\22\1\2\1\3"+
    "\1\23\1\7\1\24\1\2\1\4\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\7\1\50\1\51\1\52\4\7\1\53\101\0\3\3"+
    "\32\0\1\3\46\0\1\5\1\6\2\0\1\6\1\0"+
    "\1\54\1\0\1\55\5\0\1\56\61\0\1\57\1\60"+
    "\1\61\1\0\1\57\1\62\4\0\1\63\3\0\1\64"+
    "\1\65\1\63\1\66\34\0\1\62\1\65\1\0\1\63"+
    "\16\0\2\6\2\0\1\6\1\62\4\0\1\63\3\0"+
    "\1\64\1\65\1\63\35\0\1\62\1\65\1\0\1\63"+
    "\16\0\16\7\1\67\4\7\3\0\1\7\2\0\1\7"+
    "\1\0\3\7\1\67\16\0\16\7\5\0\7\7\1\70"+
    "\6\7\1\67\4\7\3\0\1\7\2\0\1\7\1\0"+
    "\3\7\1\67\16\0\16\7\5\0\16\7\1\67\4\7"+
    "\3\0\1\7\2\0\1\7\1\0\1\7\1\71\1\7"+
    "\1\67\16\0\16\7\5\0\11\7\1\72\4\7\1\67"+
    "\4\7\3\0\1\7\2\0\1\7\1\0\3\7\1\67"+
    "\16\0\16\7\5\0\7\7\1\73\6\7\1\67\4\7"+
    "\3\0\1\7\2\0\1\7\1\0\3\7\1\67\16\0"+
    "\7\7\1\74\6\7\5\0\7\7\1\75\3\7\1\76"+
    "\2\7\1\67\4\7\3\0\1\7\2\0\1\7\1\0"+
    "\3\7\1\67\16\0\1\7\1\77\14\7\5\0\11\7"+
    "\1\100\4\7\1\67\4\7\3\0\1\7\2\0\1\7"+
    "\1\0\3\7\1\67\16\0\4\7\1\101\1\7\1\102"+
    "\7\7\5\0\13\7\1\103\2\7\1\67\4\7\3\0"+
    "\1\7\2\0\1\7\1\0\1\7\1\104\1\7\1\67"+
    "\16\0\14\7\1\105\1\7\5\0\2\64\2\0\1\64"+
    "\66\0\2\106\1\0\25\106\1\107\1\110\46\106\5\0"+
    "\15\7\1\111\1\67\4\7\3\0\1\7\2\0\1\7"+
    "\1\0\3\7\1\67\16\0\1\112\15\7\34\0\1\113"+
    "\1\114\51\0\2\115\1\0\11\115\1\0\4\115\3\0"+
    "\1\115\4\0\2\115\20\0\16\115\5\0\16\7\1\67"+
    "\4\7\3\0\1\7\2\0\1\7\1\0\3\7\1\67"+
    "\16\0\2\7\1\116\13\7\16\0\1\117\66\0\11\7"+
    "\1\120\4\7\1\67\4\7\3\0\1\7\2\0\1\7"+
    "\1\0\3\7\1\67\16\0\16\7\5\0\16\7\1\67"+
    "\4\7\3\0\1\7\2\0\1\7\1\0\3\7\1\67"+
    "\16\0\1\121\15\7\5\0\11\7\1\122\4\7\1\67"+
    "\4\7\3\0\1\7\2\0\1\7\1\0\1\7\1\123"+
    "\1\7\1\67\16\0\16\7\5\0\14\7\1\124\1\7"+
    "\1\67\4\7\3\0\1\7\2\0\1\7\1\0\3\7"+
    "\1\67\16\0\5\7\1\125\10\7\5\0\7\7\1\126"+
    "\6\7\1\67\4\7\3\0\1\7\2\0\1\7\1\0"+
    "\3\7\1\67\16\0\1\127\1\7\1\130\13\7\5\0"+
    "\7\7\1\131\6\7\1\67\4\7\3\0\1\7\2\0"+
    "\1\7\1\0\3\7\1\67\16\0\16\7\5\0\11\7"+
    "\1\132\4\7\1\67\4\7\3\0\1\7\2\0\1\7"+
    "\1\0\3\7\1\67\16\0\7\7\1\133\6\7\5\0"+
    "\16\7\1\67\4\7\3\0\1\7\2\0\1\7\1\0"+
    "\1\7\1\134\1\7\1\67\16\0\16\7\5\0\16\7"+
    "\1\67\4\7\3\0\1\7\2\0\1\7\1\0\3\7"+
    "\1\67\16\0\1\135\15\7\14\0\1\136\101\0\1\137"+
    "\66\0\1\57\1\60\2\0\1\57\1\62\4\0\1\63"+
    "\3\0\1\64\1\65\1\63\35\0\1\62\1\65\1\0"+
    "\1\63\16\0\2\60\2\0\1\60\5\0\1\63\3\0"+
    "\1\64\1\65\1\63\36\0\1\65\1\0\1\63\16\0"+
    "\2\140\1\0\2\140\2\0\1\140\2\0\1\140\3\0"+
    "\1\141\2\140\5\0\1\140\30\0\1\140\1\0\2\140"+
    "\15\0\2\64\2\0\1\64\5\0\1\63\4\0\1\65"+
    "\1\63\36\0\1\65\1\0\1\63\15\0\1\142\2\143"+
    "\2\0\1\143\31\0\1\142\41\0\2\144\1\0\2\144"+
    "\2\0\1\144\2\0\1\144\3\0\1\141\2\144\5\0"+
    "\1\144\30\0\1\144\1\0\2\144\17\0\2\7\1\0"+
    "\11\7\1\0\4\7\3\0\1\7\3\0\1\145\2\7"+
    "\20\0\16\7\5\0\6\7\1\146\7\7\1\67\4\7"+
    "\3\0\1\7\2\0\1\7\1\0\3\7\1\67\16\0"+
    "\16\7\5\0\16\7\1\67\4\7\3\0\1\7\2\0"+
    "\1\7\1\0\1\7\1\147\1\7\1\67\16\0\16\7"+
    "\5\0\12\7\1\150\3\7\1\67\4\7\3\0\1\7"+
    "\2\0\1\7\1\0\3\7\1\67\16\0\16\7\5\0"+
    "\16\7\1\67\4\7\3\0\1\7\2\0\1\7\1\0"+
    "\3\7\1\67\16\0\6\7\1\151\7\7\5\0\16\7"+
    "\1\67\4\7\3\0\1\7\2\0\1\7\1\0\3\7"+
    "\1\67\16\0\1\7\1\152\14\7\5\0\16\7\1\67"+
    "\4\7\3\0\1\7\2\0\1\7\1\0\3\7\1\67"+
    "\16\0\1\7\1\153\14\7\5\0\2\7\1\154\13\7"+
    "\1\67\4\7\3\0\1\7\2\0\1\7\1\0\3\7"+
    "\1\67\16\0\16\7\5\0\16\7\1\67\4\7\3\0"+
    "\1\7\2\0\1\7\1\0\3\7\1\67\16\0\1\155"+
    "\15\7\5\0\14\7\1\156\1\7\1\67\4\7\3\0"+
    "\1\7\2\0\1\7\1\0\3\7\1\67\16\0\16\7"+
    "\5\0\16\7\1\67\4\7\3\0\1\7\2\0\1\7"+
    "\1\0\3\7\1\67\16\0\1\7\1\157\14\7\5\0"+
    "\16\7\1\67\4\7\3\0\1\7\2\0\1\7\1\0"+
    "\3\7\1\67\16\0\10\7\1\160\5\7\5\0\16\7"+
    "\1\67\4\7\3\0\1\7\2\0\1\7\1\0\3\7"+
    "\1\67\16\0\6\7\1\161\7\7\5\0\16\7\1\67"+
    "\4\7\3\0\1\7\2\0\1\7\1\0\3\7\1\67"+
    "\16\0\7\7\1\162\6\7\5\0\16\7\1\67\4\7"+
    "\3\0\1\7\2\0\1\7\1\0\1\7\1\163\1\7"+
    "\1\67\16\0\16\7\5\0\1\106\3\0\1\106\4\0"+
    "\2\106\1\0\1\106\6\0\4\106\5\0\1\106\43\0"+
    "\14\7\1\164\1\7\1\67\4\7\3\0\1\7\2\0"+
    "\1\7\1\0\3\7\1\67\16\0\16\7\5\0\16\7"+
    "\1\67\4\7\3\0\1\7\2\0\1\7\1\0\3\7"+
    "\1\67\16\0\1\165\15\7\1\113\2\0\33\113\1\0"+
    "\41\113\35\166\1\167\42\166\5\0\16\115\1\0\4\115"+
    "\3\0\1\115\2\0\1\115\1\170\3\115\17\0\16\115"+
    "\5\0\16\7\1\67\4\7\3\0\1\7\2\0\1\7"+
    "\1\0\3\7\1\67\16\0\5\7\1\171\10\7\14\0"+
    "\1\172\70\0\16\7\1\67\4\7\3\0\1\7\2\0"+
    "\1\7\1\0\3\7\1\67\16\0\2\7\1\173\13\7"+
    "\5\0\11\7\1\174\4\7\1\67\4\7\3\0\1\7"+
    "\2\0\1\7\1\0\3\7\1\67\16\0\5\7\1\175"+
    "\10\7\5\0\16\7\1\67\4\7\3\0\1\7\2\0"+
    "\1\7\1\0\3\7\1\67\16\0\7\7\1\176\6\7"+
    "\5\0\16\7\1\67\4\7\3\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\177\1\7\1\67\16\0\16\7\5\0"+
    "\16\7\1\67\4\7\3\0\1\7\2\0\1\7\1\0"+
    "\1\7\1\200\1\7\1\67\16\0\16\7\5\0\16\7"+
    "\1\67\4\7\3\0\1\7\2\0\1\7\1\0\3\7"+
    "\1\67\16\0\14\7\1\201\1\7\5\0\14\7\1\202"+
    "\1\7\1\67\4\7\3\0\1\7\2\0\1\7\1\0"+
    "\3\7\1\67\16\0\16\7\5\0\16\7\1\67\4\7"+
    "\3\0\1\7\2\0\1\7\1\0\3\7\1\67\16\0"+
    "\7\7\1\203\6\7\5\0\16\7\1\67\4\7\3\0"+
    "\1\7\2\0\1\7\1\0\3\7\1\67\16\0\5\7"+
    "\1\204\10\7\5\0\16\7\1\67\4\7\3\0\1\7"+
    "\2\0\1\7\1\0\3\7\1\67\16\0\10\7\1\205"+
    "\5\7\5\0\13\7\1\206\2\7\1\67\4\7\3\0"+
    "\1\7\2\0\1\7\1\0\3\7\1\67\16\0\16\7"+
    "\5\0\13\7\1\207\2\7\1\67\4\7\3\0\1\7"+
    "\2\0\1\7\1\0\3\7\1\67\16\0\16\7\5\0"+
    "\16\7\1\67\4\7\3\0\1\7\2\0\1\7\1\0"+
    "\3\7\1\67\16\0\1\210\15\7\5\0\13\7\1\211"+
    "\2\7\1\67\4\7\3\0\1\7\2\0\1\7\1\0"+
    "\3\7\1\67\16\0\16\7\13\0\1\63\103\0\1\212"+
    "\65\0\2\140\1\0\2\140\1\62\1\0\1\140\2\0"+
    "\1\140\3\0\1\213\2\140\1\0\1\214\3\0\1\140"+
    "\27\0\1\62\1\140\1\0\2\140\2\0\1\214\12\0"+
    "\2\213\1\0\2\213\2\0\1\213\2\0\1\213\4\0"+
    "\2\213\5\0\1\213\30\0\1\213\1\0\2\213\15\0"+
    "\2\143\2\0\1\143\73\0\2\143\2\0\1\143\5\0"+
    "\1\63\5\0\1\63\40\0\1\63\16\0\2\144\1\0"+
    "\2\144\2\0\1\144\2\0\1\144\3\0\1\213\2\144"+
    "\1\0\1\214\3\0\1\144\30\0\1\144\1\0\2\144"+
    "\2\0\1\214\12\0\7\7\1\215\6\7\1\67\4\7"+
    "\3\0\1\7\2\0\1\7\1\0\3\7\1\67\16\0"+
    "\16\7\5\0\13\7\1\216\2\7\1\67\4\7\3\0"+
    "\1\7\2\0\1\7\1\0\3\7\1\67\16\0\16\7"+
    "\5\0\16\7\1\67\4\7\3\0\1\7\2\0\1\7"+
    "\1\0\3\7\1\67\16\0\2\7\1\217\13\7\5\0"+
    "\16\7\1\67\4\7\3\0\1\7\2\0\1\7\1\0"+
    "\3\7\1\67\16\0\1\7\1\220\14\7\5\0\16\7"+
    "\1\67\4\7\3\0\1\7\2\0\1\7\1\0\3\7"+
    "\1\67\16\0\3\7\1\221\12\7\5\0\16\7\1\67"+
    "\4\7\3\0\1\7\2\0\1\7\1\0\3\7\1\67"+
    "\16\0\2\7\1\222\13\7\5\0\7\7\1\223\6\7"+
    "\1\67\4\7\3\0\1\7\2\0\1\7\1\0\3\7"+
    "\1\67\16\0\16\7\5\0\16\7\1\67\4\7\3\0"+
    "\1\7\2\0\1\7\1\0\3\7\1\67\16\0\1\224"+
    "\15\7\5\0\16\7\1\67\4\7\3\0\1\7\2\0"+
    "\1\7\1\0\3\7\1\67\16\0\2\7\1\225\13\7"+
    "\5\0\16\7\1\67\4\7\3\0\1\7\2\0\1\7"+
    "\1\0\3\7\1\67\16\0\2\7\1\226\13\7\5\0"+
    "\16\7\1\67\4\7\3\0\1\7\2\0\1\7\1\0"+
    "\3\7\1\67\16\0\1\227\15\7\5\0\16\7\1\67"+
    "\4\7\3\0\1\7\2\0\1\7\1\0\3\7\1\67"+
    "\16\0\2\7\1\230\13\7\5\0\16\7\1\67\4\7"+
    "\3\0\1\7\2\0\1\7\1\0\3\7\1\67\16\0"+
    "\1\7\1\231\14\7\35\166\1\232\42\166\34\233\1\234"+
    "\1\235\42\233\23\0\1\67\17\0\1\67\41\0\16\7"+
    "\1\67\4\7\3\0\1\7\2\0\1\7\1\0\3\7"+
    "\1\67\16\0\1\236\15\7\70\0\1\237\14\0\16\7"+
    "\1\67\4\7\3\0\1\7\2\0\1\7\1\0\3\7"+
    "\1\67\16\0\13\7\1\240\2\7\5\0\16\7\1\67"+
    "\4\7\3\0\1\7\2\0\1\7\1\0\3\7\1\67"+
    "\16\0\12\7\1\241\3\7\5\0\7\7\1\242\6\7"+
    "\1\67\4\7\3\0\1\7\2\0\1\7\1\0\3\7"+
    "\1\67\16\0\16\7\5\0\16\7\1\67\4\7\3\0"+
    "\1\7\2\0\1\7\1\0\3\7\1\67\16\0\6\7"+
    "\1\243\7\7\5\0\16\7\1\67\4\7\3\0\1\7"+
    "\2\0\1\7\1\0\3\7\1\67\16\0\1\244\15\7"+
    "\5\0\13\7\1\245\2\7\1\67\4\7\3\0\1\7"+
    "\2\0\1\7\1\0\3\7\1\67\16\0\16\7\5\0"+
    "\16\7\1\67\4\7\3\0\1\7\2\0\1\7\1\0"+
    "\3\7\1\67\16\0\2\7\1\246\13\7\5\0\16\7"+
    "\1\67\4\7\3\0\1\7\2\0\1\7\1\0\3\7"+
    "\1\67\16\0\2\7\1\247\13\7\5\0\16\7\1\67"+
    "\4\7\3\0\1\250\2\0\1\7\1\0\3\7\1\67"+
    "\16\0\16\7\5\0\13\7\1\251\2\7\1\67\4\7"+
    "\3\0\1\7\2\0\1\7\1\0\3\7\1\67\16\0"+
    "\16\7\5\0\16\7\1\67\4\7\3\0\1\7\2\0"+
    "\1\7\1\0\3\7\1\67\16\0\1\252\15\7\5\0"+
    "\16\7\1\67\4\7\3\0\1\7\2\0\1\7\1\0"+
    "\3\7\1\67\16\0\4\7\1\253\11\7\5\0\14\7"+
    "\1\254\1\7\1\67\4\7\3\0\1\7\2\0\1\7"+
    "\1\0\3\7\1\67\16\0\16\7\5\0\16\7\1\67"+
    "\4\7\3\0\1\7\2\0\1\7\1\0\3\7\1\67"+
    "\16\0\4\7\1\255\11\7\20\0\1\256\64\0\2\213"+
    "\1\0\2\213\2\0\1\213\2\0\1\213\4\0\2\213"+
    "\1\0\1\214\3\0\1\213\30\0\1\213\1\0\2\213"+
    "\2\0\1\214\11\0\3\143\2\0\1\143\5\0\1\63"+
    "\5\0\1\63\15\0\1\143\22\0\1\63\16\0\15\7"+
    "\1\257\1\67\4\7\3\0\1\7\2\0\1\7\1\0"+
    "\3\7\1\67\16\0\16\7\5\0\11\7\1\260\4\7"+
    "\1\67\4\7\3\0\1\7\2\0\1\7\1\0\3\7"+
    "\1\67\16\0\16\7\5\0\16\7\1\67\4\7\3\0"+
    "\1\7\2\0\1\7\1\0\3\7\1\67\16\0\3\7"+
    "\1\261\12\7\5\0\16\7\1\67\4\7\3\0\1\7"+
    "\2\0\1\7\1\0\3\7\1\67\16\0\2\7\1\262"+
    "\13\7\5\0\16\7\1\67\4\7\3\0\1\7\2\0"+
    "\1\7\1\0\3\7\1\67\16\0\4\7\1\263\11\7"+
    "\5\0\14\7\1\264\1\7\1\67\4\7\3\0\1\7"+
    "\2\0\1\7\1\0\3\7\1\67\16\0\16\7\5\0"+
    "\16\7\1\67\4\7\3\0\1\7\2\0\1\7\1\0"+
    "\1\7\1\265\1\7\1\67\16\0\16\7\5\0\16\7"+
    "\1\67\4\7\3\0\1\7\2\0\1\7\1\0\3\7"+
    "\1\67\16\0\3\7\1\266\5\7\1\267\4\7\5\0"+
    "\16\7\1\67\4\7\3\0\1\7\2\0\1\7\1\0"+
    "\3\7\1\67\16\0\13\7\1\270\2\7\5\0\16\7"+
    "\1\67\4\7\3\0\1\7\2\0\1\7\1\0\3\7"+
    "\1\67\16\0\3\7\1\271\12\7\5\0\16\7\1\67"+
    "\4\7\3\0\1\7\2\0\1\7\1\0\3\7\1\67"+
    "\16\0\2\7\1\272\13\7\34\166\1\273\1\232\42\166"+
    "\35\233\1\235\76\233\1\274\1\235\42\233\5\0\16\7"+
    "\1\67\4\7\3\0\1\7\2\0\1\7\1\0\1\7"+
    "\1\275\1\7\1\67\16\0\16\7\64\0\1\276\20\0"+
    "\7\7\1\277\6\7\1\67\4\7\3\0\1\7\2\0"+
    "\1\7\1\0\3\7\1\67\16\0\16\7\5\0\16\7"+
    "\1\67\4\7\3\0\1\7\2\0\1\7\1\0\3\7"+
    "\1\67\16\0\1\7\1\300\14\7\5\0\16\7\1\67"+
    "\4\7\3\0\1\7\2\0\1\7\1\0\1\7\1\301"+
    "\1\7\1\67\16\0\16\7\5\0\11\7\1\302\4\7"+
    "\1\67\4\7\3\0\1\7\2\0\1\7\1\0\3\7"+
    "\1\67\16\0\16\7\5\0\16\7\1\67\4\7\3\0"+
    "\1\7\2\0\1\7\1\0\3\7\1\67\16\0\6\7"+
    "\1\303\7\7\5\0\16\7\1\67\4\7\3\0\1\7"+
    "\2\0\1\7\1\0\3\7\1\67\16\0\1\7\1\304"+
    "\14\7\5\0\16\7\1\67\4\7\3\0\1\7\2\0"+
    "\1\7\1\0\3\7\1\67\16\0\6\7\1\305\7\7"+
    "\5\0\11\7\1\306\4\7\1\67\4\7\3\0\1\7"+
    "\2\0\1\7\1\0\3\7\1\67\16\0\16\7\5\0"+
    "\16\7\1\67\4\7\3\0\1\7\2\0\1\7\1\0"+
    "\3\7\1\67\16\0\1\307\15\7\16\0\1\310\66\0"+
    "\13\7\1\311\2\7\1\67\4\7\3\0\1\7\2\0"+
    "\1\7\1\0\3\7\1\67\16\0\16\7\5\0\16\7"+
    "\1\67\4\7\3\0\1\7\2\0\1\7\1\0\3\7"+
    "\1\67\16\0\10\7\1\312\5\7\5\0\14\7\1\313"+
    "\1\7\1\67\4\7\3\0\1\7\2\0\1\7\1\0"+
    "\3\7\1\67\16\0\16\7\5\0\14\7\1\314\1\7"+
    "\1\67\4\7\3\0\1\7\2\0\1\7\1\0\3\7"+
    "\1\67\16\0\16\7\5\0\16\7\1\67\4\7\3\0"+
    "\1\7\2\0\1\7\1\0\3\7\1\67\16\0\6\7"+
    "\1\315\7\7\5\0\16\7\1\67\4\7\3\0\1\7"+
    "\2\0\1\7\1\0\3\7\1\67\16\0\3\7\1\316"+
    "\12\7\5\0\7\7\1\317\6\7\1\67\4\7\3\0"+
    "\1\7\2\0\1\7\1\0\3\7\1\67\16\0\16\7"+
    "\5\0\16\7\1\67\4\7\3\0\1\7\2\0\1\7"+
    "\1\0\3\7\1\67\16\0\4\7\1\320\11\7\65\0"+
    "\1\321\17\0\15\7\1\322\1\67\4\7\3\0\1\7"+
    "\2\0\1\7\1\0\3\7\1\67\16\0\16\7\5\0"+
    "\16\7\1\67\4\7\3\0\1\7\2\0\1\7\1\0"+
    "\3\7\1\67\16\0\11\7\1\323\4\7\5\0\16\7"+
    "\1\67\4\7\3\0\1\7\2\0\1\7\1\0\3\7"+
    "\1\67\16\0\12\7\1\324\3\7\5\0\7\7\1\325"+
    "\6\7\1\67\4\7\3\0\1\7\2\0\1\7\1\0"+
    "\3\7\1\67\16\0\16\7\5\0\16\7\1\67\4\7"+
    "\3\0\1\7\2\0\1\7\1\0\3\7\1\67\16\0"+
    "\2\7\1\326\13\7\5\0\7\7\1\327\6\7\1\67"+
    "\4\7\3\0\1\7\2\0\1\7\1\0\3\7\1\67"+
    "\16\0\16\7\5\0\16\7\1\67\4\7\3\0\1\7"+
    "\2\0\1\7\1\0\3\7\1\67\16\0\5\7\1\330"+
    "\10\7\20\0\1\331\64\0\14\7\1\332\1\7\1\67"+
    "\4\7\3\0\1\7\2\0\1\7\1\0\3\7\1\67"+
    "\16\0\16\7\5\0\7\7\1\333\6\7\1\67\4\7"+
    "\3\0\1\7\2\0\1\7\1\0\3\7\1\67\16\0"+
    "\16\7\5\0\7\7\1\334\6\7\1\67\4\7\3\0"+
    "\1\7\2\0\1\7\1\0\3\7\1\67\16\0\16\7"+
    "\5\0\16\7\1\67\4\7\3\0\1\7\2\0\1\7"+
    "\1\0\3\7\1\67\16\0\3\7\1\335\12\7\5\0"+
    "\11\7\1\336\4\7\1\67\4\7\3\0\1\7\2\0"+
    "\1\7\1\0\3\7\1\67\16\0\16\7\72\0\1\337"+
    "\12\0\14\7\1\340\1\7\1\67\4\7\3\0\1\7"+
    "\2\0\1\7\1\0\3\7\1\67\16\0\16\7\5\0"+
    "\16\7\1\67\4\7\3\0\1\7\2\0\1\7\1\0"+
    "\3\7\1\67\16\0\1\7\1\341\14\7\5\0\16\7"+
    "\1\67\4\7\3\0\1\7\2\0\1\7\1\0\3\7"+
    "\1\67\16\0\1\342\15\7\21\0\1\343\63\0\15\7"+
    "\1\146\1\67\4\7\3\0\1\7\2\0\1\7\1\0"+
    "\3\7\1\67\16\0\16\7\5\0\16\7\1\67\4\7"+
    "\3\0\1\7\2\0\1\7\1\0\3\7\1\67\16\0"+
    "\5\7\1\344\10\7\5\0\16\7\1\67\4\7\3\0"+
    "\1\7\2\0\1\7\1\0\3\7\1\67\16\0\6\7"+
    "\1\345\7\7\14\0\1\346\70\0\13\7\1\347\2\7"+
    "\1\67\4\7\3\0\1\7\2\0\1\7\1\0\3\7"+
    "\1\67\16\0\16\7\5\0\16\7\1\67\4\7\3\0"+
    "\1\7\2\0\1\7\1\0\3\7\1\67\16\0\1\7"+
    "\1\350\14\7\22\0\1\63\62\0\16\7\1\67\4\7"+
    "\3\0\1\7\2\0\1\7\1\0\3\7\1\67\16\0"+
    "\2\7\1\351\13\7\5\0\16\7\1\67\4\7\3\0"+
    "\1\7\2\0\1\7\1\0\3\7\1\67\16\0\10\7"+
    "\1\352\5\7\67\0\1\353\15\0\16\7\1\67\4\7"+
    "\3\0\1\7\2\0\1\7\1\0\3\7\1\67\16\0"+
    "\6\7\1\354\7\7\5\0\16\7\1\67\4\7\3\0"+
    "\1\7\2\0\1\7\1\0\3\7\1\67\16\0\11\7"+
    "\1\355\4\7\64\0\1\356\20\0\16\7\1\67\4\7"+
    "\3\0\1\7\2\0\1\7\1\0\3\7\1\67\16\0"+
    "\2\7\1\357\13\7\5\0\16\7\1\67\4\7\3\0"+
    "\1\7\2\0\1\7\1\0\3\7\1\67\16\0\6\7"+
    "\1\360\7\7\5\0\16\7\1\67\4\7\3\0\1\7"+
    "\2\0\1\7\1\0\3\7\1\67\16\0\3\7\1\361"+
    "\12\7\5\0\16\7\1\67\4\7\3\0\1\7\2\0"+
    "\1\7\1\0\3\7\1\67\16\0\3\7\1\362\12\7"+
    "\5\0\14\7\1\363\1\7\1\67\4\7\3\0\1\7"+
    "\2\0\1\7\1\0\3\7\1\67\16\0\16\7\5\0"+
    "\7\7\1\364\6\7\1\67\4\7\3\0\1\7\2\0"+
    "\1\7\1\0\3\7\1\67\16\0\16\7\5\0\16\7"+
    "\1\67\4\7\3\0\1\7\2\0\1\7\1\0\3\7"+
    "\1\67\16\0\6\7\1\365\7\7\5\0\16\7\1\67"+
    "\4\7\3\0\1\7\2\0\1\7\1\0\3\7\1\67"+
    "\16\0\10\7\1\366\5\7\5\0\16\7\1\67\4\7"+
    "\3\0\1\7\2\0\1\7\1\0\3\7\1\67\16\0"+
    "\11\7\1\367\4\7\5\0\16\7\1\67\4\7\3\0"+
    "\1\7\2\0\1\7\1\0\3\7\1\67\16\0\6\7"+
    "\1\370\7\7\5\0\16\7\1\67\4\7\3\0\1\7"+
    "\2\0\1\7\1\0\3\7\1\67\16\0\3\7\1\371"+
    "\12\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12416];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\22\1\10\11\1\1\5\11\11\1\3\0"+
    "\1\1\2\0\2\11\1\1\3\0\16\1\1\0\1\11"+
    "\1\0\3\1\2\0\1\1\1\0\16\1\2\0\1\1"+
    "\2\0\1\1\2\0\20\1\2\0\2\1\1\0\17\1"+
    "\2\0\16\1\2\0\1\1\1\0\1\1\1\0\16\1"+
    "\1\0\14\1\2\11\1\1\1\0\11\1\1\0\10\1"+
    "\1\0\7\1\1\0\5\1\1\0\3\1\1\0\2\1"+
    "\1\0\4\1\1\0\2\1\1\11\13\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[249];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _AvroIdlLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _AvroIdlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 56: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 57: break;
          case 3: 
            { return INT_LITERAL;
            } 
            // fall through
          case 58: break;
          case 4: 
            { return IDENTIFIER_TOKEN;
            } 
            // fall through
          case 59: break;
          case 5: 
            { return LEFT_BRACE;
            } 
            // fall through
          case 60: break;
          case 6: 
            { return RIGHT_BRACE;
            } 
            // fall through
          case 61: break;
          case 7: 
            { return LEFT_PAREN;
            } 
            // fall through
          case 62: break;
          case 8: 
            { return RIGHT_PAREN;
            } 
            // fall through
          case 63: break;
          case 9: 
            { return LEFT_BRACKET;
            } 
            // fall through
          case 64: break;
          case 10: 
            { return RIGHT_BRACKET;
            } 
            // fall through
          case 65: break;
          case 11: 
            { return LEFT_ANGLE;
            } 
            // fall through
          case 66: break;
          case 12: 
            { return RIGHT_ANGLE;
            } 
            // fall through
          case 67: break;
          case 13: 
            { return AT;
            } 
            // fall through
          case 68: break;
          case 14: 
            { return COMMA;
            } 
            // fall through
          case 69: break;
          case 15: 
            { return SEMICOLON;
            } 
            // fall through
          case 70: break;
          case 16: 
            { return COLON;
            } 
            // fall through
          case 71: break;
          case 17: 
            { return EQUALS;
            } 
            // fall through
          case 72: break;
          case 18: 
            { return QUESTION_MARK;
            } 
            // fall through
          case 73: break;
          case 19: 
            { return FLOAT_LITERAL;
            } 
            // fall through
          case 74: break;
          case 20: 
            { return STRING_LITERAL;
            } 
            // fall through
          case 75: break;
          case 21: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 76: break;
          case 22: 
            { return INT;
            } 
            // fall through
          case 77: break;
          case 23: 
            { return IDL;
            } 
            // fall through
          case 78: break;
          case 24: 
            { return MAP;
            } 
            // fall through
          case 79: break;
          case 25: 
            { return NULL;
            } 
            // fall through
          case 80: break;
          case 26: 
            { return TRUE;
            } 
            // fall through
          case 81: break;
          case 27: 
            { return BLOCK_COMMENT;
            } 
            // fall through
          case 82: break;
          case 28: 
            { return LONG;
            } 
            // fall through
          case 83: break;
          case 29: 
            { return ENUM;
            } 
            // fall through
          case 84: break;
          case 30: 
            { return DATE;
            } 
            // fall through
          case 85: break;
          case 31: 
            { return UUID;
            } 
            // fall through
          case 86: break;
          case 32: 
            { return VOID;
            } 
            // fall through
          case 87: break;
          case 33: 
            { return ARRAY;
            } 
            // fall through
          case 88: break;
          case 34: 
            { return FALSE;
            } 
            // fall through
          case 89: break;
          case 35: 
            { return FIXED;
            } 
            // fall through
          case 90: break;
          case 36: 
            { return FLOAT;
            } 
            // fall through
          case 91: break;
          case 37: 
            { return BYTES;
            } 
            // fall through
          case 92: break;
          case 38: 
            { return DOC_COMMENT;
            } 
            // fall through
          case 93: break;
          case 39: 
            { return ERROR;
            } 
            // fall through
          case 94: break;
          case 40: 
            { return UNION;
            } 
            // fall through
          case 95: break;
          case 41: 
            { return IMPORT;
            } 
            // fall through
          case 96: break;
          case 42: 
            { return THROWS;
            } 
            // fall through
          case 97: break;
          case 43: 
            { return RECORD;
            } 
            // fall through
          case 98: break;
          case 44: 
            { return ONEWAY;
            } 
            // fall through
          case 99: break;
          case 45: 
            { return STRING;
            } 
            // fall through
          case 100: break;
          case 46: 
            { return SCHEMA;
            } 
            // fall through
          case 101: break;
          case 47: 
            { return DOUBLE;
            } 
            // fall through
          case 102: break;
          case 48: 
            { return TIME_MS;
            } 
            // fall through
          case 103: break;
          case 49: 
            { return BOOLEAN;
            } 
            // fall through
          case 104: break;
          case 50: 
            { return DECIMAL;
            } 
            // fall through
          case 105: break;
          case 51: 
            { return PROTOCOL;
            } 
            // fall through
          case 106: break;
          case 52: 
            { return NAMESPACE;
            } 
            // fall through
          case 107: break;
          case 53: 
            { return AT_NAMESPACE;
            } 
            // fall through
          case 108: break;
          case 54: 
            { return TIMESTAMP_MS;
            } 
            // fall through
          case 109: break;
          case 55: 
            { return LOCAL_TIMESTAMP_MS;
            } 
            // fall through
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

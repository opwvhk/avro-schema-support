// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _AvroIdlLexer.flex

package opwvhk.intellij.avro_idl.syntax;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static opwvhk.intellij.avro_idl.psi.AvroIdlTypes.*;


public class _AvroIdlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00\1\u3b00"+
    "\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u1f00\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00\1\u5000"+
    "\1\u5100\1\u5200\3\u0100\1\u5300\1\u5400\1\u5500\12\u1f00\4\u0100"+
    "\1\u5600\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900"+
    "\2\u1f00\1\u5a00\1\u5b00\27\u0100\1\u5c00\2\u0100\1\u5d00\45\u1f00"+
    "\1\u0100\1\u5e00\1\u5f00\11\u1f00\1\u6000\24\u1f00\1\u6100\1\u6200"+
    "\1\u1f00\1\u6300\1\u6400\1\u6500\1\u6600\2\u1f00\1\u6700\5\u1f00"+
    "\1\u6800\1\u6900\1\u6a00\5\u1f00\1\u6b00\1\u6c00\2\u1f00\1\u6d00"+
    "\1\u1f00\1\u6e00\21\u1f00\246\u0100\1\u6f00\20\u0100\1\u7000\1\u7100"+
    "\25\u0100\1\u7200\34\u0100\1\u7300\14\u1f00\2\u0100\1\u7400\u0b06\u1f00"+
    "\1\u7500\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\0"+
    "\1\4\1\0\1\5\2\0\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\7\20\2\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\3\31"+
    "\1\32\1\33\1\32\2\5\1\34\2\5\1\35\1\5"+
    "\1\36\1\5\1\37\7\5\1\40\2\5\1\41\1\42"+
    "\1\43\1\0\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\2\5\1\57\1\60"+
    "\1\61\1\62\1\63\1\5\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\5\1\74\1\0\1\75"+
    "\7\0\1\3\32\0\1\1\1\0\4\5\4\0\1\5"+
    "\12\0\1\5\1\0\1\76\2\0\1\5\5\0\27\5"+
    "\1\0\37\5\1\0\u01ca\5\4\0\14\5\16\0\5\5"+
    "\7\0\1\5\1\0\1\5\21\0\160\76\5\5\1\0"+
    "\2\5\3\0\3\5\1\0\1\5\6\0\1\5\1\76"+
    "\3\5\1\0\1\5\1\0\24\5\1\0\123\5\1\0"+
    "\213\5\1\0\5\76\2\0\246\5\1\0\46\5\2\0"+
    "\1\5\6\0\51\5\6\0\1\5\1\0\55\76\1\0"+
    "\1\76\1\0\2\76\1\0\2\76\1\0\1\76\10\0"+
    "\33\5\4\0\4\5\30\0\1\5\4\0\13\76\5\0"+
    "\53\5\37\76\4\0\2\5\1\76\143\5\1\0\1\5"+
    "\7\76\2\0\6\76\2\5\2\76\1\0\4\76\2\5"+
    "\12\76\3\5\2\0\1\5\20\0\1\5\1\76\36\5"+
    "\33\76\2\0\131\5\13\76\1\5\16\0\12\76\41\5"+
    "\11\76\2\5\4\0\1\5\2\0\1\76\30\5\4\76"+
    "\1\5\11\76\1\5\3\76\1\5\5\76\22\0\31\5"+
    "\3\76\4\0\13\5\65\0\25\5\1\0\10\5\25\0"+
    "\17\76\1\0\41\76\66\5\3\76\1\5\22\76\1\5"+
    "\7\76\12\5\2\76\2\0\12\76\1\0\20\5\3\76"+
    "\1\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5"+
    "\1\0\1\5\3\0\4\5\2\0\1\76\1\5\7\76"+
    "\2\0\2\76\2\0\3\76\1\5\10\0\1\76\4\0"+
    "\2\5\1\0\3\5\2\76\2\0\12\76\4\5\7\0"+
    "\2\5\1\0\1\76\2\0\3\76\1\0\6\5\4\0"+
    "\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0"+
    "\2\5\1\0\2\5\2\0\1\76\1\0\5\76\4\0"+
    "\2\76\2\0\3\76\3\0\1\76\7\0\4\5\1\0"+
    "\1\5\7\0\14\76\3\5\1\76\13\0\3\76\1\0"+
    "\11\5\1\0\3\5\1\0\26\5\1\0\7\5\1\0"+
    "\2\5\1\0\5\5\2\0\1\76\1\5\10\76\1\0"+
    "\3\76\1\0\3\76\2\0\1\5\17\0\2\5\2\76"+
    "\2\0\12\76\1\0\1\5\7\0\1\5\6\76\1\0"+
    "\3\76\1\0\10\5\2\0\2\5\2\0\26\5\1\0"+
    "\7\5\1\0\2\5\1\0\5\5\2\0\1\76\1\5"+
    "\7\76\2\0\2\76\2\0\3\76\10\0\2\76\4\0"+
    "\2\5\1\0\3\5\2\76\2\0\12\76\1\0\1\5"+
    "\20\0\1\76\1\5\1\0\6\5\3\0\3\5\1\0"+
    "\4\5\3\0\2\5\1\0\1\5\1\0\2\5\3\0"+
    "\2\5\3\0\3\5\3\0\14\5\4\0\5\76\3\0"+
    "\3\76\1\0\4\76\2\0\1\5\6\0\1\76\16\0"+
    "\12\76\11\0\1\5\6\0\5\76\10\5\1\0\3\5"+
    "\1\0\27\5\1\0\20\5\3\0\1\5\7\76\1\0"+
    "\3\76\1\0\4\76\7\0\2\76\1\0\3\5\5\0"+
    "\2\5\2\76\2\0\12\76\20\0\1\5\3\76\1\0"+
    "\10\5\1\0\3\5\1\0\27\5\1\0\12\5\1\0"+
    "\5\5\2\0\1\76\1\5\7\76\1\0\3\76\1\0"+
    "\4\76\7\0\2\76\7\0\1\5\1\0\2\5\2\76"+
    "\2\0\12\76\1\0\2\5\15\0\4\76\1\0\10\5"+
    "\1\0\3\5\1\0\51\5\2\76\1\5\7\76\1\0"+
    "\3\76\1\0\4\76\1\5\5\0\3\5\1\76\7\0"+
    "\3\5\2\76\2\0\12\76\12\0\6\5\2\0\2\76"+
    "\1\0\22\5\3\0\30\5\1\0\11\5\1\0\1\5"+
    "\2\0\7\5\3\0\1\76\4\0\6\76\1\0\1\76"+
    "\1\0\10\76\6\0\12\76\2\0\2\76\15\0\60\5"+
    "\1\76\1\5\10\76\4\0\10\5\10\76\1\0\12\76"+
    "\47\0\2\5\1\0\1\5\1\0\5\5\1\0\30\5"+
    "\1\0\1\5\1\0\12\5\1\76\1\5\12\76\1\5"+
    "\2\0\5\5\1\0\1\5\1\0\6\76\2\0\12\76"+
    "\2\0\4\5\40\0\1\5\27\0\2\76\6\0\12\76"+
    "\13\0\1\76\1\0\1\76\1\0\1\76\4\0\2\76"+
    "\10\5\1\0\44\5\4\0\24\76\1\0\2\76\5\5"+
    "\13\76\1\0\44\76\11\0\1\76\71\0\53\5\24\76"+
    "\1\5\12\76\6\0\6\5\4\76\4\5\3\76\1\5"+
    "\3\76\2\5\7\76\3\5\4\76\15\5\14\76\1\5"+
    "\17\76\2\0\46\5\1\0\1\5\5\0\1\5\2\0"+
    "\53\5\1\0\115\5\1\0\4\5\2\0\7\5\1\0"+
    "\1\5\1\0\4\5\2\0\51\5\1\0\4\5\2\0"+
    "\41\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0"+
    "\4\5\2\0\17\5\1\0\71\5\1\0\4\5\2\0"+
    "\103\5\2\0\3\76\11\0\11\76\16\0\20\5\20\0"+
    "\126\5\2\0\6\5\3\0\u016c\5\2\0\21\5\1\1"+
    "\32\5\5\0\113\5\3\0\13\5\7\0\15\5\1\0"+
    "\4\5\3\76\13\0\22\5\3\76\13\0\22\5\2\76"+
    "\14\0\15\5\1\0\3\5\1\0\2\76\14\0\64\5"+
    "\40\76\3\0\1\5\3\0\2\5\1\76\2\0\12\76"+
    "\41\0\3\76\2\0\12\76\6\0\131\5\7\0\51\5"+
    "\1\76\1\5\5\0\106\5\12\0\37\5\1\0\14\76"+
    "\4\0\14\76\12\0\12\76\36\5\2\0\5\5\13\0"+
    "\54\5\4\0\32\5\6\0\13\76\45\0\27\5\5\76"+
    "\4\0\65\5\12\76\1\0\35\76\2\0\13\76\6\0"+
    "\12\76\15\0\1\5\10\0\16\76\102\0\5\76\57\5"+
    "\21\76\7\5\4\0\12\76\21\0\11\76\14\0\3\76"+
    "\36\5\15\76\2\5\12\76\54\5\16\76\14\0\44\5"+
    "\24\76\10\0\12\76\3\0\3\5\12\76\44\5\2\0"+
    "\11\5\7\0\53\5\2\0\3\5\20\0\3\76\1\0"+
    "\25\76\4\5\1\76\6\5\1\76\2\5\3\76\1\5"+
    "\5\0\300\5\72\76\1\0\5\76\26\5\2\0\6\5"+
    "\2\0\46\5\2\0\6\5\2\0\10\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\37\5\2\0\65\5"+
    "\1\0\7\5\1\0\1\5\3\0\3\5\1\0\7\5"+
    "\3\0\4\5\2\0\6\5\4\0\15\5\5\0\3\5"+
    "\1\0\7\5\3\0\13\1\35\0\2\3\5\0\1\1"+
    "\17\0\2\5\23\0\1\5\12\0\1\1\21\0\1\5"+
    "\15\0\1\5\20\0\15\5\3\0\40\5\20\0\15\76"+
    "\4\0\1\76\3\0\14\76\21\0\1\5\4\0\1\5"+
    "\2\0\12\5\1\0\1\5\2\0\6\5\6\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\20\5\2\0\4\5"+
    "\5\0\5\5\4\0\1\5\21\0\51\5\u0177\0\57\5"+
    "\1\0\57\5\1\0\205\5\6\0\4\5\3\76\2\5"+
    "\14\0\46\5\1\0\1\5\5\0\1\5\2\0\70\5"+
    "\7\0\1\5\17\0\1\76\27\5\11\0\7\5\1\0"+
    "\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0"+
    "\7\5\1\0\7\5\1\0\7\5\1\0\40\76\57\0"+
    "\1\5\320\0\1\1\4\0\3\5\31\0\11\5\6\76"+
    "\1\0\5\5\2\0\5\5\4\0\126\5\2\0\2\76"+
    "\2\0\3\5\1\0\132\5\1\0\4\5\5\0\53\5"+
    "\1\0\136\5\21\0\33\5\65\0\306\5\112\0\360\5"+
    "\20\0\215\5\103\0\56\5\2\0\15\5\3\0\20\5"+
    "\12\76\2\5\24\0\57\5\1\76\4\0\12\76\1\0"+
    "\37\5\2\76\120\5\2\76\45\0\11\5\2\0\147\5"+
    "\2\0\65\5\2\0\5\5\60\0\13\5\1\76\3\5"+
    "\1\76\4\5\1\76\27\5\5\76\20\0\1\5\7\0"+
    "\64\5\14\0\2\76\62\5\22\76\12\0\12\76\6\0"+
    "\22\76\6\5\3\0\1\5\1\0\2\5\13\76\34\5"+
    "\10\76\2\0\27\5\15\76\14\0\35\5\3\0\4\76"+
    "\57\5\16\76\16\0\1\5\12\76\6\0\5\5\1\76"+
    "\12\5\12\76\5\5\1\0\51\5\16\76\11\0\3\5"+
    "\1\76\10\5\2\76\2\0\12\76\6\0\27\5\3\0"+
    "\1\5\3\76\62\5\1\76\1\5\3\76\2\5\2\76"+
    "\5\5\2\76\1\5\1\76\1\5\30\0\3\5\2\0"+
    "\13\5\5\76\2\0\3\5\2\76\12\0\6\5\2\0"+
    "\6\5\2\0\6\5\11\0\7\5\1\0\7\5\1\0"+
    "\53\5\1\0\14\5\10\0\163\5\10\76\1\0\2\76"+
    "\2\0\12\76\6\0\244\5\14\0\27\5\4\0\61\5"+
    "\4\0\u0100\77\156\5\2\0\152\5\46\0\7\5\14\0"+
    "\5\5\5\0\1\5\1\76\12\5\1\0\15\5\1\0"+
    "\5\5\1\0\1\5\1\0\2\5\1\0\2\5\1\0"+
    "\154\5\41\0\213\5\6\0\332\5\22\0\100\5\2\0"+
    "\66\5\50\0\12\5\2\0\1\5\3\0\20\76\20\0"+
    "\20\76\3\0\2\5\30\0\3\5\31\0\1\5\7\0"+
    "\1\5\1\0\1\5\3\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\176\5\7\0\1\5\13\0"+
    "\12\76\7\0\32\5\4\0\1\5\1\0\32\5\13\0"+
    "\70\5\2\76\37\5\3\0\6\5\2\0\6\5\2\0"+
    "\6\5\2\0\3\5\3\0\2\5\3\0\2\5\31\0"+
    "\14\5\1\0\32\5\1\0\23\5\1\0\2\5\1\0"+
    "\17\5\2\0\16\5\42\0\173\5\105\0\65\5\210\0"+
    "\1\76\202\0\35\5\3\0\61\5\17\0\1\76\37\0"+
    "\40\5\15\0\36\5\5\0\46\5\5\76\5\0\36\5"+
    "\2\0\44\5\4\0\10\5\1\0\5\5\52\0\236\5"+
    "\2\0\12\76\6\0\44\5\4\0\44\5\4\0\50\5"+
    "\10\0\64\5\234\0\67\5\11\0\26\5\12\0\10\5"+
    "\230\0\6\5\2\0\1\5\1\0\54\5\1\0\2\5"+
    "\3\0\1\5\2\0\27\5\12\0\27\5\11\0\37\5"+
    "\101\0\23\5\1\0\2\5\12\0\26\5\12\0\32\5"+
    "\106\0\70\5\6\0\2\5\100\0\1\5\3\76\1\0"+
    "\2\76\5\0\4\76\4\5\1\0\3\5\1\0\35\5"+
    "\2\0\3\76\4\0\1\76\40\0\35\5\3\0\35\5"+
    "\43\0\10\5\1\0\34\5\2\76\31\0\66\5\12\0"+
    "\26\5\12\0\23\5\15\0\22\5\156\0\111\5\67\0"+
    "\63\5\15\0\63\5\15\0\44\5\4\76\10\0\12\76"+
    "\306\0\35\5\12\0\1\5\10\0\26\5\13\76\217\0"+
    "\27\5\11\0\3\76\65\5\17\76\37\0\12\76\17\0"+
    "\4\76\55\5\13\76\25\0\31\5\7\0\12\76\6\0"+
    "\3\76\44\5\16\76\1\0\12\76\4\0\1\5\2\76"+
    "\11\0\43\5\1\76\2\0\1\5\11\0\3\76\60\5"+
    "\16\76\4\5\4\0\4\76\3\0\12\76\1\5\1\0"+
    "\1\5\43\0\22\5\1\0\31\5\14\76\6\0\1\76"+
    "\101\0\7\5\1\0\1\5\1\0\4\5\1\0\17\5"+
    "\1\0\12\5\7\0\57\5\14\76\5\0\12\76\6\0"+
    "\4\76\1\0\10\5\2\0\2\5\2\0\26\5\1\0"+
    "\7\5\1\0\2\5\1\0\5\5\1\0\2\76\1\5"+
    "\7\76\2\0\2\76\2\0\3\76\2\0\1\5\6\0"+
    "\1\76\5\0\5\5\2\76\2\0\7\76\3\0\5\76"+
    "\213\0\65\5\22\76\4\5\5\0\12\76\4\0\1\76"+
    "\1\5\40\0\60\5\24\76\2\5\1\0\1\5\10\0"+
    "\12\76\246\0\57\5\7\76\2\0\11\76\27\0\4\5"+
    "\2\76\42\0\60\5\21\76\3\0\1\5\13\0\12\76"+
    "\46\0\53\5\15\76\1\5\7\0\12\76\66\0\33\5"+
    "\2\0\17\76\4\0\12\76\306\0\54\5\17\76\145\0"+
    "\100\5\12\76\25\0\1\5\240\0\10\5\2\0\47\5"+
    "\7\76\2\0\7\76\1\5\1\0\1\5\1\76\33\0"+
    "\1\5\12\76\50\5\7\76\1\5\4\76\10\0\1\76"+
    "\10\0\1\5\13\76\56\5\20\76\3\0\1\5\42\0"+
    "\71\5\7\0\11\5\1\0\45\5\10\76\1\0\10\76"+
    "\1\5\17\0\12\76\30\0\36\5\2\0\26\76\1\0"+
    "\16\76\111\0\7\5\1\0\2\5\1\0\46\5\6\76"+
    "\3\0\1\76\1\0\2\76\1\0\7\76\1\5\1\76"+
    "\10\0\12\76\6\0\6\5\1\0\2\5\1\0\40\5"+
    "\5\76\1\0\2\76\1\0\5\76\1\5\7\0\12\76"+
    "\u0136\0\23\5\4\76\346\0\4\5\37\0\232\5\146\0"+
    "\157\5\21\0\304\5\274\0\57\5\321\0\107\5\271\0"+
    "\71\5\7\0\37\5\1\0\12\76\146\0\36\5\2\0"+
    "\5\76\13\0\60\5\7\76\11\0\4\5\14\0\12\76"+
    "\11\0\25\5\5\0\23\5\260\0\100\5\200\0\113\5"+
    "\4\0\1\76\1\5\67\76\7\0\4\76\15\5\100\0"+
    "\2\5\1\0\1\5\34\0\370\5\10\0\363\5\15\0"+
    "\37\5\61\0\3\5\21\0\4\5\10\0\u018c\5\4\0"+
    "\153\5\5\0\15\5\3\0\11\5\7\0\12\5\3\0"+
    "\2\76\306\0\5\76\3\0\6\76\10\0\10\76\2\0"+
    "\7\76\36\0\4\76\224\0\3\76\273\0\125\5\1\0"+
    "\107\5\1\0\2\5\2\0\1\5\2\0\2\5\2\0"+
    "\4\5\1\0\14\5\1\0\1\5\1\0\7\5\1\0"+
    "\101\5\1\0\4\5\2\0\10\5\1\0\7\5\1\0"+
    "\34\5\1\0\4\5\1\0\5\5\1\0\1\5\3\0"+
    "\7\5\1\0\u0154\5\2\0\31\5\1\0\31\5\1\0"+
    "\37\5\1\0\31\5\1\0\37\5\1\0\31\5\1\0"+
    "\37\5\1\0\31\5\1\0\37\5\1\0\31\5\1\0"+
    "\10\5\2\0\151\76\4\0\62\76\10\0\1\76\16\0"+
    "\1\76\26\0\5\76\1\0\17\76\120\0\7\76\1\0"+
    "\21\76\2\0\7\76\1\0\2\76\1\0\5\76\325\0"+
    "\55\5\3\0\7\76\7\5\2\0\12\76\4\0\1\5"+
    "\u0171\0\54\5\16\76\5\0\306\5\13\0\7\76\51\0"+
    "\104\5\7\76\1\5\4\0\12\76\u0156\0\1\5\117\0"+
    "\4\5\1\0\33\5\1\0\2\5\1\0\1\5\2\0"+
    "\1\5\1\0\12\5\1\0\4\5\1\0\1\5\1\0"+
    "\1\5\6\0\1\5\4\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\3\5\1\0\2\5\1\0\1\5\2\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\2\5\1\0\1\5\2\0\4\5\1\0"+
    "\7\5\1\0\4\5\1\0\4\5\1\0\1\5\1\0"+
    "\12\5\1\0\21\5\5\0\3\5\1\0\5\5\1\0"+
    "\21\5\104\0\327\5\51\0\65\5\13\0\336\5\2\0"+
    "\u0182\5\16\0\u0131\5\37\0\36\5\342\0\360\76\20\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[30208];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\2\1\2\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\2\4\1\20\1\21\1\1\20\4\1\22"+
    "\1\23\1\3\5\0\1\24\1\25\1\26\1\10\1\0"+
    "\1\24\1\0\1\10\3\0\2\4\2\0\36\4\3\0"+
    "\1\27\1\30\1\0\1\24\2\0\1\10\1\0\1\4"+
    "\1\24\14\4\1\31\1\4\1\32\2\4\1\33\15\4"+
    "\5\0\1\24\1\0\1\4\1\0\3\4\1\34\2\4"+
    "\1\35\6\4\1\36\1\4\1\37\7\4\1\40\1\4"+
    "\1\41\1\42\3\0\1\43\1\0\1\44\1\0\2\4"+
    "\1\45\1\4\1\46\2\4\1\47\1\50\1\51\1\52"+
    "\13\4\1\53\3\0\3\4\1\54\1\55\2\4\1\56"+
    "\1\4\1\57\1\60\1\61\1\62\2\4\2\0\1\4"+
    "\1\63\1\64\3\4\1\65\1\4\2\0\2\4\1\66"+
    "\1\4\1\0\1\4\1\67\1\4\1\70\5\4\1\71"+
    "\5\4\1\72";

  private static int [] zzUnpackAction() {
    int [] result = new int[255];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\100\0\100\0\u0140"+
    "\0\100\0\u0180\0\u01c0\0\u0200\0\u0240\0\100\0\100\0\100"+
    "\0\100\0\100\0\100\0\u0280\0\u02c0\0\u0300\0\100\0\100"+
    "\0\u0340\0\u0380\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500"+
    "\0\u0540\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700"+
    "\0\u0740\0\100\0\100\0\100\0\u0780\0\u07c0\0\u0180\0\u0800"+
    "\0\u0840\0\u0880\0\u08c0\0\u0900\0\u0940\0\u0980\0\100\0\u09c0"+
    "\0\100\0\u0a00\0\u0a40\0\u0a80\0\u0ac0\0\u0b00\0\u0340\0\u0b40"+
    "\0\u0b80\0\u0bc0\0\u0c00\0\u0c40\0\u0c80\0\u0cc0\0\u0d00\0\u0d40"+
    "\0\u0d80\0\u0dc0\0\u0e00\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0f40"+
    "\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100\0\u1140"+
    "\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300\0\u1340"+
    "\0\u1380\0\u13c0\0\u1400\0\u1440\0\u1480\0\u14c0\0\u1500\0\u1540"+
    "\0\u1580\0\u15c0\0\u0100\0\u1600\0\u1640\0\u1680\0\u16c0\0\u1700"+
    "\0\u1740\0\u1780\0\u17c0\0\u1800\0\u1840\0\u1880\0\u18c0\0\u0100"+
    "\0\u1900\0\u0100\0\u1940\0\u1980\0\u0100\0\u19c0\0\u1a00\0\u1a40"+
    "\0\u1a80\0\u1ac0\0\u1b00\0\u1b40\0\u1b80\0\u1bc0\0\u1c00\0\u1c40"+
    "\0\u1c80\0\u1cc0\0\u1d00\0\u1d40\0\u1d80\0\u1dc0\0\u1e00\0\u1e40"+
    "\0\u1e80\0\u1ec0\0\u1f00\0\u1f40\0\u1f80\0\u1fc0\0\u0100\0\u2000"+
    "\0\u2040\0\u0100\0\u2080\0\u20c0\0\u2100\0\u2140\0\u2180\0\u21c0"+
    "\0\u0100\0\u2200\0\u0100\0\u2240\0\u2280\0\u22c0\0\u2300\0\u2340"+
    "\0\u2380\0\u23c0\0\u0100\0\u2400\0\u0100\0\u0100\0\u2440\0\u2480"+
    "\0\u24c0\0\100\0\u2500\0\100\0\u2540\0\u2580\0\u25c0\0\u0100"+
    "\0\u2600\0\u0100\0\u2640\0\u2680\0\u0100\0\u0100\0\u0100\0\u0100"+
    "\0\u26c0\0\u2700\0\u2740\0\u2780\0\u27c0\0\u2800\0\u2840\0\u2880"+
    "\0\u28c0\0\u2900\0\u2940\0\u0100\0\u2980\0\u29c0\0\u2a00\0\u2a40"+
    "\0\u2a80\0\u2ac0\0\u0100\0\u0100\0\u2b00\0\u2b40\0\u0100\0\u2b80"+
    "\0\u0100\0\u0100\0\u0100\0\u0100\0\u2bc0\0\u2c00\0\u2c40\0\u2c80"+
    "\0\u2cc0\0\u0100\0\u0100\0\u2d00\0\u2d40\0\u2d80\0\u0100\0\u2dc0"+
    "\0\u2e00\0\u2e40\0\u2e80\0\u2ec0\0\u0100\0\u2f00\0\u2f40\0\u2f80"+
    "\0\u0100\0\u2fc0\0\100\0\u3000\0\u3040\0\u3080\0\u30c0\0\u3100"+
    "\0\u0100\0\u3140\0\u3180\0\u31c0\0\u3200\0\u3240\0\u0100";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[255];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\2\1\6\1\7\1\2"+
    "\1\10\1\11\1\10\1\12\1\13\1\14\2\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\3\5\1\25"+
    "\1\5\1\26\2\5\1\27\1\2\1\30\1\5\1\31"+
    "\1\32\1\33\1\5\1\34\1\35\1\36\2\5\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\3\5\1\52\1\53\2\2\101\0\3\3"+
    "\74\0\2\4\1\0\1\4\1\54\35\4\1\55\35\4"+
    "\5\0\1\5\6\0\2\56\1\0\3\5\7\0\10\5"+
    "\3\0\1\5\1\0\26\5\2\0\1\5\16\0\1\57"+
    "\1\0\1\14\2\15\12\0\1\60\1\0\1\61\60\0"+
    "\3\62\67\0\1\63\4\0\1\64\76\0\1\62\1\0"+
    "\2\65\1\66\10\0\1\67\1\70\1\0\1\71\2\0"+
    "\1\72\10\0\1\67\1\70\1\67\3\0\1\71\12\0"+
    "\1\73\22\0\1\62\1\0\3\15\10\0\1\67\1\70"+
    "\1\0\1\71\13\0\1\67\1\70\1\67\3\0\1\71"+
    "\101\0\1\74\23\0\1\5\6\0\2\56\1\0\3\5"+
    "\7\0\10\5\3\0\1\5\1\0\13\5\1\75\12\5"+
    "\2\0\1\5\6\0\1\5\6\0\2\56\1\0\3\5"+
    "\7\0\10\5\3\0\1\5\1\0\1\76\25\5\2\0"+
    "\1\5\1\0\42\77\1\100\2\77\1\101\32\77\5\0"+
    "\1\5\6\0\2\56\1\0\3\5\7\0\10\5\3\0"+
    "\1\5\1\0\16\5\1\102\7\5\2\0\1\5\6\0"+
    "\1\5\6\0\2\56\1\0\3\5\7\0\10\5\3\0"+
    "\1\5\1\0\14\5\1\103\10\5\1\104\2\0\1\5"+
    "\6\0\1\5\6\0\2\56\1\0\3\5\7\0\10\5"+
    "\3\0\1\5\1\0\1\105\3\5\1\106\7\5\1\107"+
    "\11\5\2\0\1\5\6\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\13\5\1\110"+
    "\2\5\1\111\7\5\2\0\1\5\6\0\1\5\6\0"+
    "\2\56\1\0\3\5\7\0\10\5\3\0\1\5\1\0"+
    "\1\112\7\5\1\113\1\114\14\5\2\0\1\5\6\0"+
    "\1\5\6\0\2\56\1\0\3\5\7\0\10\5\3\0"+
    "\1\5\1\0\3\5\1\115\6\5\1\116\1\117\12\5"+
    "\2\0\1\5\6\0\1\5\6\0\2\56\1\0\3\5"+
    "\7\0\10\5\3\0\1\5\1\0\14\5\1\120\11\5"+
    "\2\0\1\5\6\0\1\5\6\0\2\56\1\0\3\5"+
    "\7\0\10\5\3\0\1\5\1\0\1\121\25\5\2\0"+
    "\1\5\6\0\1\5\6\0\2\56\1\0\3\5\7\0"+
    "\10\5\3\0\1\5\1\0\1\122\20\5\1\123\4\5"+
    "\2\0\1\5\6\0\1\5\6\0\2\56\1\0\3\5"+
    "\7\0\10\5\3\0\1\5\1\0\13\5\1\124\12\5"+
    "\2\0\1\5\6\0\1\5\6\0\2\56\1\0\3\5"+
    "\7\0\10\5\3\0\1\5\1\0\16\5\1\125\7\5"+
    "\2\0\1\5\6\0\1\5\6\0\2\56\1\0\3\5"+
    "\7\0\10\5\3\0\1\5\1\0\4\5\1\126\21\5"+
    "\2\0\1\5\6\0\1\5\6\0\2\56\1\0\3\5"+
    "\7\0\10\5\3\0\1\5\1\0\2\5\1\127\15\5"+
    "\1\130\5\5\2\0\1\5\6\0\1\5\6\0\2\56"+
    "\1\0\3\5\7\0\10\5\3\0\1\5\1\0\7\5"+
    "\1\131\1\132\5\5\1\133\7\5\2\0\1\5\6\0"+
    "\1\5\6\0\2\56\1\0\3\5\7\0\10\5\3\0"+
    "\1\5\1\0\13\5\1\134\5\5\1\135\4\5\2\0"+
    "\1\5\6\0\1\5\6\0\2\56\1\0\3\5\7\0"+
    "\10\5\3\0\1\5\1\0\14\5\1\136\11\5\2\0"+
    "\1\5\5\0\1\4\1\0\1\4\10\0\2\4\21\0"+
    "\1\4\4\0\1\4\3\0\1\4\5\0\1\4\2\0"+
    "\1\4\1\0\1\4\1\137\15\0\1\5\23\0\10\5"+
    "\3\0\1\5\1\77\26\5\65\0\1\140\64\0\1\141"+
    "\50\0\3\62\10\0\1\67\1\70\15\0\1\67\1\70"+
    "\1\67\24\0\11\142\1\143\66\142\2\64\2\0\73\64"+
    "\16\0\1\62\1\0\2\65\1\66\10\0\1\67\1\70"+
    "\1\0\1\71\13\0\1\67\1\70\1\67\3\0\1\71"+
    "\35\0\1\62\1\0\3\66\10\0\1\67\1\70\15\0"+
    "\1\67\1\70\1\67\36\0\1\144\1\0\1\144\2\0"+
    "\3\145\73\0\1\146\1\0\3\147\7\0\3\147\12\0"+
    "\6\147\41\0\1\146\1\0\3\150\7\0\3\150\12\0"+
    "\6\150\72\0\1\151\36\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\5\5\1\152"+
    "\20\5\2\0\1\5\6\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\5\5\1\153\2\5\3\0\1\5\1\0"+
    "\26\5\2\0\1\5\1\0\42\77\1\100\2\77\1\154"+
    "\32\77\14\0\2\56\67\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\16\5\1\155"+
    "\7\5\2\0\1\5\6\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\14\5\1\156"+
    "\11\5\2\0\1\5\6\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\20\5\1\157"+
    "\5\5\2\0\1\5\6\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\20\5\1\160"+
    "\5\5\2\0\1\5\6\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\2\5\1\161"+
    "\23\5\2\0\1\5\6\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\21\5\1\162"+
    "\4\5\2\0\1\5\6\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\21\5\1\163"+
    "\4\5\2\0\1\5\6\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\16\5\1\164"+
    "\7\5\2\0\1\5\6\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\11\5\1\165"+
    "\14\5\2\0\1\5\6\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\24\5\1\166"+
    "\1\5\2\0\1\5\6\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\14\5\1\167"+
    "\11\5\2\0\1\5\6\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\11\5\1\170"+
    "\14\5\2\0\1\5\6\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\15\5\1\171"+
    "\10\5\2\0\1\5\6\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\20\5\1\172"+
    "\5\5\2\0\1\5\6\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\2\5\1\173"+
    "\10\5\1\174\12\5\2\0\1\5\6\0\1\5\6\0"+
    "\2\56\1\0\3\5\7\0\10\5\3\0\1\5\1\0"+
    "\15\5\1\175\10\5\2\0\1\5\6\0\1\5\6\0"+
    "\2\56\1\0\3\5\7\0\10\5\3\0\1\5\1\0"+
    "\12\5\1\176\13\5\2\0\1\5\6\0\1\5\6\0"+
    "\2\56\1\0\3\5\7\0\10\5\3\0\1\5\1\0"+
    "\11\5\1\177\14\5\2\0\1\5\6\0\1\5\6\0"+
    "\2\56\1\0\3\5\7\0\10\5\3\0\1\5\1\0"+
    "\4\5\1\200\21\5\2\0\1\5\6\0\1\5\6\0"+
    "\2\56\1\0\3\5\7\0\10\5\3\0\1\5\1\0"+
    "\14\5\1\201\11\5\2\0\1\5\6\0\1\5\6\0"+
    "\2\56\1\0\3\5\7\0\10\5\3\0\1\5\1\0"+
    "\2\5\1\202\23\5\2\0\1\5\6\0\1\5\6\0"+
    "\2\56\1\0\3\5\7\0\10\5\3\0\1\5\1\0"+
    "\7\5\1\203\16\5\2\0\1\5\6\0\1\5\6\0"+
    "\2\56\1\0\3\5\7\0\10\5\3\0\1\5\1\0"+
    "\16\5\1\204\7\5\2\0\1\5\6\0\1\5\6\0"+
    "\2\56\1\0\3\5\7\0\10\5\3\0\1\5\1\0"+
    "\16\5\1\205\7\5\2\0\1\5\6\0\1\5\6\0"+
    "\2\56\1\0\3\5\7\0\10\5\3\0\1\5\1\0"+
    "\12\5\1\206\13\5\2\0\1\5\6\0\1\5\6\0"+
    "\2\56\1\0\3\5\7\0\10\5\3\0\1\5\1\0"+
    "\21\5\1\207\4\5\2\0\1\5\6\0\1\5\6\0"+
    "\2\56\1\0\3\5\7\0\10\5\3\0\1\5\1\0"+
    "\10\5\1\210\15\5\2\0\1\5\6\0\1\5\6\0"+
    "\2\56\1\0\3\5\7\0\10\5\3\0\1\5\1\0"+
    "\10\5\1\211\15\5\2\0\1\5\6\0\1\5\6\0"+
    "\2\56\1\0\3\5\7\0\10\5\3\0\1\5\1\0"+
    "\10\5\1\212\15\5\2\0\1\5\20\0\3\213\7\0"+
    "\3\213\12\0\6\213\77\0\1\214\62\0\1\67\41\0"+
    "\11\142\1\215\66\142\11\143\1\216\66\143\17\0\3\145"+
    "\75\0\3\145\10\0\1\67\16\0\1\67\1\0\1\67"+
    "\43\0\3\217\7\0\3\217\12\0\6\217\41\0\1\217"+
    "\1\0\3\147\7\0\3\147\3\0\1\220\6\0\6\147"+
    "\7\0\1\220\31\0\1\217\1\0\3\150\7\0\3\150"+
    "\1\0\1\71\1\0\1\220\6\0\6\150\3\0\1\71"+
    "\3\0\1\220\74\0\1\221\24\0\1\5\6\0\2\56"+
    "\1\0\3\5\7\0\10\5\3\0\1\5\1\0\10\5"+
    "\1\222\15\5\2\0\1\5\1\0\14\77\2\223\24\77"+
    "\1\100\2\77\1\101\32\77\5\0\1\5\6\0\2\56"+
    "\1\0\3\5\7\0\10\5\3\0\1\5\1\0\1\224"+
    "\25\5\2\0\1\5\6\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\11\5\1\225"+
    "\14\5\2\0\1\5\6\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\4\5\1\226"+
    "\21\5\2\0\1\5\6\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\4\5\1\227"+
    "\21\5\2\0\1\5\6\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\10\5\1\230"+
    "\15\5\2\0\1\5\6\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\1\5\1\231"+
    "\24\5\2\0\1\5\6\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\12\5\1\232"+
    "\13\5\2\0\1\5\6\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\14\5\1\233"+
    "\11\5\2\0\1\5\6\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\17\5\1\234"+
    "\6\5\2\0\1\5\6\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\4\5\1\235"+
    "\21\5\2\0\1\5\6\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\1\236\25\5"+
    "\2\0\1\5\6\0\1\5\6\0\2\56\1\0\3\5"+
    "\7\0\10\5\3\0\1\5\1\0\14\5\1\237\11\5"+
    "\2\0\1\5\6\0\1\5\6\0\2\56\1\0\3\5"+
    "\7\0\10\5\3\0\1\5\1\0\1\240\25\5\2\0"+
    "\1\5\6\0\1\5\6\0\2\56\1\0\3\5\7\0"+
    "\10\5\3\0\1\5\1\0\6\5\1\241\17\5\2\0"+
    "\1\5\6\0\1\5\6\0\2\56\1\0\3\5\7\0"+
    "\10\5\3\0\1\5\1\0\4\5\1\242\21\5\2\0"+
    "\1\5\6\0\1\5\6\0\2\56\1\0\3\5\7\0"+
    "\10\5\3\0\1\5\1\0\11\5\1\243\14\5\2\0"+
    "\1\5\6\0\1\5\6\0\2\56\1\0\3\5\7\0"+
    "\10\5\3\0\1\5\1\0\23\5\1\244\2\5\2\0"+
    "\1\5\6\0\1\5\6\0\2\56\1\0\3\5\7\0"+
    "\10\5\3\0\1\5\1\0\20\5\1\245\5\5\2\0"+
    "\1\5\6\0\1\5\6\0\2\56\1\0\3\5\7\0"+
    "\10\5\3\0\1\5\1\0\14\5\1\246\11\5\2\0"+
    "\1\5\6\0\1\5\6\0\2\56\1\0\3\5\7\0"+
    "\10\5\3\0\1\5\1\0\4\5\1\247\21\5\2\0"+
    "\1\5\6\0\1\5\6\0\2\56\1\0\3\5\7\0"+
    "\10\5\3\0\1\5\1\0\10\5\1\250\15\5\2\0"+
    "\1\5\6\0\1\5\6\0\2\56\1\0\3\5\7\0"+
    "\10\5\3\0\1\5\1\0\14\5\1\251\11\5\2\0"+
    "\1\5\6\0\1\5\6\0\2\56\1\0\3\5\7\0"+
    "\10\5\3\0\1\5\1\0\4\5\1\252\21\5\2\0"+
    "\1\5\6\0\1\5\6\0\2\56\1\0\3\5\7\0"+
    "\10\5\3\0\1\5\1\0\4\5\1\253\21\5\2\0"+
    "\1\5\6\0\1\5\6\0\2\56\1\0\3\5\7\0"+
    "\10\5\3\0\1\5\1\0\14\5\1\254\11\5\2\0"+
    "\1\5\6\0\1\5\6\0\2\56\1\0\3\5\7\0"+
    "\10\5\3\0\1\5\1\0\3\5\1\255\22\5\2\0"+
    "\1\5\6\0\1\5\6\0\2\56\1\0\3\5\7\0"+
    "\10\5\3\0\1\5\1\0\3\5\1\256\22\5\2\0"+
    "\1\5\20\0\3\257\7\0\3\257\12\0\6\257\102\0"+
    "\1\260\21\0\11\142\1\261\4\142\1\262\61\142\11\143"+
    "\1\263\4\143\1\264\61\143\17\0\3\217\7\0\3\217"+
    "\3\0\1\220\6\0\6\217\7\0\1\220\26\0\1\145"+
    "\1\0\1\145\2\0\3\145\10\0\1\67\16\0\1\67"+
    "\1\0\1\67\76\0\1\265\32\0\1\5\6\0\2\56"+
    "\1\0\3\5\7\0\10\5\3\0\1\5\1\0\13\5"+
    "\1\266\12\5\2\0\1\5\1\0\5\77\1\267\23\77"+
    "\10\267\1\77\1\100\1\77\1\267\1\154\26\267\4\77"+
    "\5\0\1\5\6\0\2\56\1\0\3\5\7\0\10\5"+
    "\3\0\1\5\1\0\25\5\1\270\2\0\1\5\6\0"+
    "\1\5\6\0\2\56\1\0\3\5\7\0\10\5\3\0"+
    "\1\5\1\0\4\5\1\271\21\5\2\0\1\5\6\0"+
    "\1\5\6\0\2\56\1\0\3\5\7\0\10\5\3\0"+
    "\1\5\1\0\17\5\1\272\6\5\2\0\1\5\6\0"+
    "\1\5\6\0\2\56\1\0\3\5\7\0\10\5\3\0"+
    "\1\5\1\0\12\5\1\273\13\5\2\0\1\5\6\0"+
    "\1\5\6\0\2\56\1\0\3\5\7\0\10\5\3\0"+
    "\1\5\1\0\11\5\1\274\14\5\2\0\1\5\6\0"+
    "\1\5\6\0\2\56\1\0\3\5\7\0\10\5\3\0"+
    "\1\5\1\0\16\5\1\275\7\5\2\0\1\5\6\0"+
    "\1\5\6\0\2\56\1\0\3\5\7\0\10\5\3\0"+
    "\1\5\1\0\4\5\1\276\21\5\2\0\1\5\6\0"+
    "\1\5\6\0\2\56\1\0\3\5\7\0\10\5\3\0"+
    "\1\5\1\0\3\5\1\277\22\5\2\0\1\5\6\0"+
    "\1\5\6\0\2\56\1\0\3\5\7\0\10\5\3\0"+
    "\1\5\1\0\20\5\1\300\5\5\2\0\1\5\6\0"+
    "\1\5\6\0\2\56\1\0\3\5\7\0\10\5\3\0"+
    "\1\5\1\0\16\5\1\301\7\5\2\0\1\5\6\0"+
    "\1\5\6\0\2\56\1\0\3\5\7\0\10\5\3\0"+
    "\1\5\1\0\11\5\1\302\14\5\2\0\1\5\6\0"+
    "\1\5\6\0\2\56\1\0\3\5\7\0\10\5\3\0"+
    "\1\5\1\0\17\5\1\303\6\5\2\0\1\5\6\0"+
    "\1\5\6\0\2\56\1\0\3\5\7\0\10\5\3\0"+
    "\1\5\1\0\1\304\25\5\2\0\1\5\6\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\5"+
    "\1\0\14\5\1\305\11\5\2\0\1\5\6\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\5"+
    "\1\0\16\5\1\306\7\5\2\0\1\5\6\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\5"+
    "\1\0\12\5\1\307\13\5\2\0\1\5\6\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\5"+
    "\1\0\13\5\1\310\12\5\2\0\1\5\6\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\5"+
    "\1\0\23\5\1\311\2\5\2\0\1\5\6\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\312"+
    "\1\0\17\5\1\313\6\5\2\0\1\5\6\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\5"+
    "\1\0\13\5\1\314\12\5\2\0\1\5\20\0\3\315"+
    "\7\0\3\315\12\0\6\315\105\0\1\316\16\0\11\142"+
    "\1\261\4\142\1\0\61\142\11\143\1\263\4\143\1\0"+
    "\61\143\65\0\1\317\17\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\10\5\1\320"+
    "\15\5\2\0\1\5\1\0\5\77\1\267\6\77\2\223"+
    "\1\77\3\267\7\77\10\267\1\77\1\100\1\77\1\267"+
    "\1\101\26\267\2\77\1\267\1\77\5\0\1\5\6\0"+
    "\2\56\1\0\3\5\7\0\10\5\3\0\1\5\1\0"+
    "\1\321\25\5\2\0\1\5\6\0\1\5\6\0\2\56"+
    "\1\0\3\5\7\0\10\5\3\0\1\5\1\0\1\322"+
    "\25\5\2\0\1\5\6\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\4\5\1\323"+
    "\21\5\2\0\1\5\6\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\20\5\1\324"+
    "\5\5\2\0\1\5\6\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\325\1\0\26\5\2\0"+
    "\1\5\6\0\1\5\6\0\2\56\1\0\3\5\7\0"+
    "\10\5\3\0\1\5\1\0\15\5\1\326\10\5\2\0"+
    "\1\5\6\0\1\5\6\0\2\56\1\0\3\5\7\0"+
    "\10\5\3\0\1\5\1\0\25\5\1\327\2\0\1\5"+
    "\6\0\1\5\6\0\2\56\1\0\3\5\7\0\10\5"+
    "\3\0\1\5\1\0\2\5\1\330\23\5\2\0\1\5"+
    "\6\0\1\5\6\0\2\56\1\0\3\5\7\0\10\5"+
    "\3\0\1\5\1\0\3\5\1\331\22\5\2\0\1\5"+
    "\6\0\1\5\6\0\2\56\1\0\3\5\7\0\10\5"+
    "\3\0\1\5\1\0\1\332\25\5\2\0\1\5\6\0"+
    "\1\5\6\0\2\56\1\0\3\5\7\0\10\5\3\0"+
    "\1\5\1\0\6\5\1\333\17\5\2\0\1\5\6\0"+
    "\1\5\6\0\2\56\1\0\3\5\7\0\10\5\3\0"+
    "\1\5\1\0\17\5\1\334\6\5\2\0\1\5\6\0"+
    "\1\5\6\0\2\56\1\0\3\5\7\0\10\5\3\0"+
    "\1\5\1\0\12\5\1\335\13\5\2\0\1\5\6\0"+
    "\1\5\6\0\2\56\1\0\3\5\7\0\10\5\3\0"+
    "\1\5\1\0\20\5\1\336\5\5\2\0\1\5\20\0"+
    "\3\4\7\0\3\4\12\0\6\4\102\0\1\337\104\0"+
    "\1\340\21\0\1\5\6\0\2\56\1\0\3\5\7\0"+
    "\10\5\3\0\1\5\1\0\20\5\1\341\5\5\2\0"+
    "\1\5\6\0\1\5\6\0\2\56\1\0\3\5\7\0"+
    "\10\5\3\0\1\5\1\0\13\5\1\342\12\5\2\0"+
    "\1\5\6\0\1\5\6\0\2\56\1\0\3\5\7\0"+
    "\10\5\3\0\1\5\1\0\11\5\1\343\14\5\2\0"+
    "\1\5\6\0\1\5\6\0\2\56\1\0\3\5\7\0"+
    "\10\5\3\0\1\5\1\0\20\5\1\344\5\5\2\0"+
    "\1\5\6\0\1\5\6\0\2\56\1\0\3\5\7\0"+
    "\10\5\3\0\1\5\1\0\1\345\25\5\2\0\1\5"+
    "\6\0\1\5\6\0\2\56\1\0\3\5\7\0\10\5"+
    "\3\0\1\5\1\0\14\5\1\346\11\5\2\0\1\5"+
    "\6\0\1\5\6\0\2\56\1\0\3\5\7\0\10\5"+
    "\3\0\1\5\1\0\17\5\1\347\6\5\2\0\1\5"+
    "\6\0\1\5\6\0\2\56\1\0\3\5\7\0\10\5"+
    "\3\0\1\5\1\0\1\350\25\5\2\0\1\5\67\0"+
    "\1\351\57\0\1\352\36\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\25\5\1\153"+
    "\2\0\1\5\6\0\1\5\6\0\2\56\1\0\3\5"+
    "\7\0\10\5\3\0\1\5\1\0\10\5\1\353\15\5"+
    "\2\0\1\5\6\0\1\5\6\0\2\56\1\0\3\5"+
    "\7\0\10\5\3\0\1\5\1\0\2\5\1\354\23\5"+
    "\2\0\1\5\6\0\1\5\6\0\2\56\1\0\3\5"+
    "\7\0\10\5\3\0\1\5\1\0\11\5\1\355\14\5"+
    "\2\0\1\5\6\0\1\5\6\0\2\56\1\0\3\5"+
    "\7\0\10\5\3\0\1\5\1\0\12\5\1\356\13\5"+
    "\2\0\1\5\74\0\1\67\54\0\1\357\34\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\5"+
    "\1\0\12\5\1\360\13\5\2\0\1\5\6\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\5"+
    "\1\0\4\5\1\361\21\5\2\0\1\5\6\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\5"+
    "\1\0\15\5\1\362\10\5\2\0\1\5\53\0\1\363"+
    "\32\0\1\5\6\0\2\56\1\0\3\5\7\0\10\5"+
    "\3\0\1\5\1\0\4\5\1\364\21\5\2\0\1\5"+
    "\6\0\1\5\6\0\2\56\1\0\3\5\7\0\10\5"+
    "\3\0\1\365\1\0\26\5\2\0\1\5\6\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\5"+
    "\1\0\17\5\1\366\6\5\2\0\1\5\6\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\5"+
    "\1\0\12\5\1\367\13\5\2\0\1\5\6\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\5"+
    "\1\0\20\5\1\370\5\5\2\0\1\5\6\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\5"+
    "\1\0\17\5\1\371\6\5\2\0\1\5\6\0\1\5"+
    "\6\0\2\56\1\0\3\5\7\0\10\5\3\0\1\5"+
    "\1\0\1\372\25\5\2\0\1\5\6\0\1\5\6\0"+
    "\2\56\1\0\3\5\7\0\10\5\3\0\1\5\1\0"+
    "\12\5\1\373\13\5\2\0\1\5\6\0\1\5\6\0"+
    "\2\56\1\0\3\5\7\0\10\5\3\0\1\5\1\0"+
    "\15\5\1\374\10\5\2\0\1\5\6\0\1\5\6\0"+
    "\2\56\1\0\3\5\7\0\10\5\3\0\1\375\1\0"+
    "\26\5\2\0\1\5\6\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\12\5\1\376"+
    "\13\5\2\0\1\5\6\0\1\5\6\0\2\56\1\0"+
    "\3\5\7\0\10\5\3\0\1\5\1\0\17\5\1\377"+
    "\6\5\2\0\1\5\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[12928];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\2\11\1\1\1\11\4\1\6\11"+
    "\3\1\2\11\21\1\3\11\5\0\4\1\1\0\1\11"+
    "\1\0\1\11\3\0\2\1\2\0\36\1\3\0\2\1"+
    "\1\0\1\1\2\0\1\1\1\0\41\1\5\0\1\1"+
    "\1\0\1\1\1\0\33\1\3\0\1\11\1\0\1\11"+
    "\1\0\27\1\3\0\17\1\2\0\10\1\2\0\4\1"+
    "\1\0\3\1\1\11\14\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[255];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _AvroIdlLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _AvroIdlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 59: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 60: break;
          case 3:
            { return STRING_LITERAL;
            }
          // fall through
          case 61: break;
          case 4:
            { return IDENTIFIER_TOKEN;
            }
          // fall through
          case 62: break;
          case 5:
            { return LEFT_PAREN;
            }
          // fall through
          case 63: break;
          case 6:
            { return RIGHT_PAREN;
            }
          // fall through
          case 64: break;
          case 7:
            { return COMMA;
            }
          // fall through
          case 65: break;
          case 8:
            { return INT_LITERAL;
            }
          // fall through
          case 66: break;
          case 9:
            { return COLON;
            }
          // fall through
          case 67: break;
          case 10:
            { return SEMICOLON;
            }
          // fall through
          case 68: break;
          case 11:
            { return LEFT_ANGLE;
            }
          // fall through
          case 69: break;
          case 12:
            { return EQUALS;
            }
          // fall through
          case 70: break;
          case 13:
            { return RIGHT_ANGLE;
            }
          // fall through
          case 71: break;
          case 14:
            { return QUESTION_MARK;
            }
          // fall through
          case 72: break;
          case 15:
            { return AT;
            }
          // fall through
          case 73: break;
          case 16:
            { return LEFT_BRACKET;
            }
          // fall through
          case 74: break;
          case 17:
            { return RIGHT_BRACKET;
            }
          // fall through
          case 75: break;
          case 18:
            { return LEFT_BRACE;
            }
          // fall through
          case 76: break;
          case 19:
            { return RIGHT_BRACE;
            }
          // fall through
          case 77: break;
          case 20:
            { return FLOAT_LITERAL;
            }
          // fall through
          case 78: break;
          case 21:
            { return BLOCK_COMMENT_START;
            }
          // fall through
          case 79: break;
          case 22:
            { return LINE_COMMENT;
            }
          // fall through
          case 80: break;
          case 23:
            { return INCOMPLETE_BLOCK_COMMENT;
            }
          // fall through
          case 81: break;
          case 24:
            { return INCOMPLETE_DOC_COMMENT;
            }
          // fall through
          case 82: break;
          case 25:
            { return IDL;
            }
          // fall through
          case 83: break;
          case 26:
            { return INT;
            }
          // fall through
          case 84: break;
          case 27:
            { return MAP;
            }
          // fall through
          case 85: break;
          case 28:
            { return DATE;
            }
          // fall through
          case 86: break;
          case 29:
            { return ENUM;
            }
          // fall through
          case 87: break;
          case 30:
            { return LONG;
            }
          // fall through
          case 88: break;
          case 31:
            { return NULL;
            }
          // fall through
          case 89: break;
          case 32:
            { return TRUE;
            }
          // fall through
          case 90: break;
          case 33:
            { return UUID;
            }
          // fall through
          case 91: break;
          case 34:
            { return VOID;
            }
          // fall through
          case 92: break;
          case 35:
            { return BLOCK_COMMENT;
            }
          // fall through
          case 93: break;
          case 36:
            { return DOC_COMMENT;
            }
          // fall through
          case 94: break;
          case 37:
            { return ARRAY;
            }
          // fall through
          case 95: break;
          case 38:
            { return BYTES;
            }
          // fall through
          case 96: break;
          case 39:
            { return ERROR;
            }
          // fall through
          case 97: break;
          case 40:
            { return FALSE;
            }
          // fall through
          case 98: break;
          case 41:
            { return FIXED;
            }
          // fall through
          case 99: break;
          case 42:
            { return FLOAT;
            }
          // fall through
          case 100: break;
          case 43:
            { return UNION;
            }
          // fall through
          case 101: break;
          case 44:
            { return DOUBLE;
            }
          // fall through
          case 102: break;
          case 45:
            { return IMPORT;
            }
          // fall through
          case 103: break;
          case 46:
            { return ONEWAY;
            }
          // fall through
          case 104: break;
          case 47:
            { return RECORD;
            }
          // fall through
          case 105: break;
          case 48:
            { return SCHEMA;
            }
          // fall through
          case 106: break;
          case 49:
            { return STRING;
            }
          // fall through
          case 107: break;
          case 50:
            { return THROWS;
            }
          // fall through
          case 108: break;
          case 51:
            { return BOOLEAN;
            }
          // fall through
          case 109: break;
          case 52:
            { return DECIMAL;
            }
          // fall through
          case 110: break;
          case 53:
            { return TIME_MS;
            }
          // fall through
          case 111: break;
          case 54:
            { return PROTOCOL;
            }
          // fall through
          case 112: break;
          case 55:
            { return NAMESPACE;
            }
          // fall through
          case 113: break;
          case 56:
            { return AT_NAMESPACE;
            }
          // fall through
          case 114: break;
          case 57:
            { return TIMESTAMP_MS;
            }
          // fall through
          case 115: break;
          case 58:
            { return LOCAL_TIMESTAMP_MS;
            }
          // fall through
          case 116: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
